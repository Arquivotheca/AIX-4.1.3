$ @(#)74	1.17.1.20  src/bos/usr/ccs/bin/as/as.msg, cmdas, bos411, 9428A410j 6/8/94 19:13:35
$ $ 
$ $  COMPONENT_NAME: (CMDAS) Assembler and Macroprocessor
$ $
$ $  FUNCTIONS: as.msg
$ $
$ $             This is the message catalog file. When LANG
$ $             is defined as En_US, etc.,  message text in this
$ $             file is used. Otherwise,  message text in asmsgs.c
$ $             is used.
$ $ 
$ $  ORIGINS: 3, 27
$ $
$ $
$ $  This module contains IBM CONFIDENTIAL code. -- (IBM
$ $  Confidential Restricted when combined with the aggregated
$ $  modules for this product)
$ $                   SOURCE MATERIALS
$ $  (C) COPYRIGHT International Business Machines Corp. 1985, 1994
$ $  All Rights Reserved
$ $
$ $  US Government Users Restricted Rights - Use, duplication or
$ $  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
$ $
$ $$ORIGINAL UNIX MESSAGE: is the message as it appeared originally in the
$ $$unix source.  In most instances, this message is still the message text 
$ $$in the assembler source file asmsgs.c.
$ $

$quote "         define quote character.
$ Do not translate %s, %1$s, %2$s, 0x%x, %d.
$set MS_AS        Define initial set#

$ $ **************************************************************************
$ $ **************************** MESSAGE DEFINITIONS *************************
$ $ *************************************************************************/


1 "1252-001 %s is defined already.\n"
$ $$In the instances this msg appears, The user has previously used this
$ $$name in a definition type statement and is trying to define it
$ $$again, which is illegal.  On this particular statement, they
$ $$should change the name, or if they meant to define the name here
$ $$they should change the name previously defined.  The name field
$ $$in this particular situation must not have been previously defined.
$ $ There are three instances where this message will display this
$ $ syntax error.  A label name, a .set (pseudo-op) name,
$ $ or a .lcomm/.comm (pseudo-op) name
$ $ has been defined previously in the source code.
$ $ Label/.set/.lcomm/.comm names can only be defined once
$ $ in the source code.  Either change the name or
$ $ change the previously defined name. The name
$ $ will be displayed in place of the %s.
$ $$ORIGINAL UNIX MESSAGE:"001","Redefinition of %s\n",

2 "1252-002 There is a nesting overflow.\n\
\tDo not specify more than 100 .function/.bb/.bi pseudo-ops \n\
\twithout specifying the matching .ef/.eb/.ei pseudo-ops.\n"
$ Do not translate .function/.bb/.bi, pseudo-ops, or .ef/.eb/.ei.
$ $What is a nesting overflow, exactly?
$ $$Nesting is a concept which describes "one inside of another".
$ $$For example, the childs egg toy, where one egg fits in a
$ $$bigger egg, which together fits in a bigger egg, etc.
$ $$Debugger information describing a function, like you
$ $$think of a c language function, is described like this:
$ $$.function #/* this gives function information */
$ $$.bf       #/* this indicates the function has started */
$ $$#/* stuff and lines of assembler code */
$ $$.ef       #/* this indicates the function has ended */
$ $$Nested function information is described like this:
$ $$.function #/* this gives function information */
$ $$.bf       #/* this indicates the function has started */
$ $$#/* stuff and lines of assembler code */
$ $$    .function #/* another function, which is contained within */
$ $$              #/*the orig func*/
$ $$    .bf       #/* this indicates the nested function has started */
$ $$    #/* stuff and lines of assembler code in the nested function */
$ $$    .ef       #/* this indicates the nested function has ended */
$ $$.ef       #/* this indicates the function has ended */
$ $$In a nesting overflow, the statements have gone too far into
$ $$nested functions without coming out.
$ $$This is a tough one to understand depending on background.  If you
$ $$need additional clarification let me know.  I drop by 997 occasionally.
$ $ This syntax error message will only be displayed if
$ $ debugger pseudo-ops are used.
$ $ .function/.bb (pseudo-ops) generates pointers
$ $ that are saved on a stack with a limiting size
$ $ of 100 pointers.  If more than 100 .function/.bb
$ $ pseudo-ops have been encountered (without encountering
$ $ the matching .ef/.eb pseudo-ops), this syntax error
$ $ message will display.  Rewriting the code to avoid
$ $ this nesting is necessary.  Note, debugger pseudo-ops
$ $ are customarily generated by compilers, as opposed to
$ $ users.
$ $$ ORIGINAL UNIX MESSAGE:"002","Nesting overflow\n",

3 "1252-003 The .set operand is not defined\n\
\tor is a forward reference.\n"
$ A forward reference is using the name before it is defined.
$ Do not translate .set.
$ $$Forward referencing is using the name before it is defined.
$ $$For example,
$ $$b = a + 1;
$ $$...
$ $$a = 1;
$ $$now you have used "a" to represent a value that is defined in a later line
$ $$to define "b".
$ $ The .set pseudo-op has the following syntax, .set name, expr.
$ $ expr can be an integer,predefined name (label/lcomm/comm,
$ $ etc.) or algebraic combination of integer/name.
$ $ This syntax error message appears when the expr is
$ $ not defined.  The user should verify that all elements
$ $ of expr are defined previous to this .set statement.
$ $$ORIGINAL UNIX MESSAGE:"003",".set operand undefined or forward reference\n"

4 "1252-004 The .globl symbol is not valid.\n\
\tCheck that the .globl name is a relocatable expression.\n"
$ Do not translate .globl.
$ $Is there another word that can replace "relocatable?"
$ $$The concept of relocation is fairly common amount programmers.  Individuals
$ $$using the assembler will be programmers.
$ $$Relocation, in this instance, describes an entity that represents a memory
$ $$location whose address or location can be and will be changed to reflect
$ $$run-time locations. Entities, symbol names, that are defined relocatable
$ $$or non-relocatable are explicitly given in the assembler publication,
$ $$which I would hope the translator has access to.
$ $ The .globl name must be a relocatable expression.
$ $ This syntax error message appears when the
$ $ .globl name is absolute(constant/integer),
$ $ tocrelative(.tc label/name)
$ $ tocofrelative(.tocof label/name), or unknow(undefined
$ $ in pass 2); because, these are NON-relocatable expressions.
$ $ The user must verify that the .globl
$ $ name is a relocatable expression.
$ $ If not defined, the name is assumed external.
$ $ Relocatable expressions include label names, .lcomm/
$ $ .comm names, and .csect names.  .dsect names
$ $ or labels contained within a .dsect are NOT relocatable.
$ $ Also, .set names are NOT relocatable.
$ $$ORIGINAL UNIX MESSAGE:"004","Invalid .globl symbol\n",

5 "1252-005 The storage class is not valid.\n\
\tSpecify a supported storage class for the csect name.\n"
$ Do not translate csect.
$ $$"csect" is a general term which describes the assembler language
$ $$sectioning specific to V3.  A csect is the smallest divisible
$ $$section (relocatable) of a object file. It has a specific
$ $$storage class associated with it.  In this instance, the storage
$ $$class given is in error.
$ $ This syntax error message is displayed when the
$ $ csectname[storageclass] storage class is NOT
$ $ one of the following: pr,ro,db,tc,ua,rw,gl,xo,sv,
$ $ bs,ds,uc,ti,tb,tc0,dsect,lc. The user must
$ $ verify that the name has one of the supported
$ $ storage classes.
$ $$ORIGINAL UNIX MESSAGE:"005","invalid storage class\n",

6 "1252-006 The ERRTOK in the ICSECT ERRTOK is not known.\n\
\tDepending upon where you acquired this product, contact either\n\
\tyour service representative or your approved supplier.\n"
$ Do not translate ERRTOK or ICSECT ERRTOK.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $$This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $$A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $ INTERNAL ERROR message.  Fixed by assembler source change.
$ $ Possible unanticipated user error, but not likely.
$ $ the lexical analyzer that parses all this stuff out that are used by yacc
$ $$ORIGINAL UNIX MESSAGE:"006","unknown ERRTOK in icsect errtok\n",

7 "1252-007 The alignment must be an absolute expression.\n"
$ $$Alignment is a term used to describe the position of the
$ $$entity within the object file. It is customarily associated
$ $$with halfword(resides on a 2 byte boundary), fullword
$ $$(resides on a 4 byte boundary), or doubleword(resides on a 8 byte
$ $$boundary).  In this instance, the user has requested that a
$ $$csect be positioned on a specified byte boundary, but has
$ $$not given that specified byte boundary in a form that the
$ $$assembler understands, or can use.
$ $ This syntax error message is a result of an incorrect
$ $ .csect statement:  .csect name[storageclass],expr.
$ $ (The csect name[storageclass] and expr are optional operands)
$ $ The expr must be either an absolute expression (integer)
$ $ or resolve algebraically into an absolute expression.
$ $ The user must verify that expr is absolute.
$ $$ORIGINAL UNIX MESSAGE:"007","alignment must be an absolute expression\n",

8 "1252-008 The .tocof name1 is not valid.\n\
\tCheck that the name1 has not been defined previously.\n"
$ Do not translate .tocof or name1.
$ $ This is a syntax error message displayed with incorrect
$ $ .tocof statement:  .tocof name1,name2.
$ $ name1 must be undefined.  The user must verify that
$ $ name1 has not been previously defined.
$ $$ORIGINAL UNIX MESSAGE"008","illegal TOCOF name1\n",

9 "1252-009 A Begin or End block or function pseudo-op is missing.\n\
\tMake sure that there is a matching .eb statement\n\
\tfor each .bb statement and that there is\n\
\ta matching .ef statement for each .bf statment.\n"
$ Do not translate pseudo-op, .eb, .bb, .ef, or .bf.
$ $$.bb/.eb, .bf/.ef pseudo-ops give additional information
$ $$to indicate "begin block","end block", "begin function",
$ $$"end function" sections of code.  These are c language
$ $$type concepts that are not really relevant to assembler, but
$ $$the debugger needs this type of info about the original source
$ $$file.  The programmer needs to verify that there is a matching
$ $$.eb statement for every .bb statement.  And, that there is a
$ $$matching .ef statement for every .bf statement.
$ $ This INTERNAL ERROR message will only be displayed if
$ $ debugger pseudo-ops are used.
$ $ .bb/.eb/.bf/.ef (pseudo-ops) generates pointers
$ $ that are saved on a stack. If there are not enough
$ $ pointers between pass1 and pass2 an error has occurred.
$ $$ORIGINAL UNIX MESSAGE:"009","illegal TOCOF name2: %d\n",
$ $$BECOMES
$ $$ORIGINAL UNIX MESSAGE:"142","Begin/End block pseudo-op missing\n",

10 "1252-010 The .tocof name2 is not valid.\n\
\tMake sure that name2 is an external symbol.\n"
$ Do not translate .tocof, name2.
$ $$In the instance where the name appears in a .extern statement
$ $$and is defined internally, this message will also appear.
$ $$I think this would be a confusing recovery in this particular
$ $$instance to the programmer.
$ $$The symbol must be defined as an external and not defined in
$ $$the local assembly.
$ $ This is a syntax error message displayed with incorrect
$ $ .tocof statement:  .tocof name1,name2.
$ $ name2 must be externally defined (appear in .extern statement).
$ $and not be a defined in this local assembly.
$ $ The user must verify that
$ $ name1 is defined as an extern.
$ $$ORIGINAL UNIX MESSAGE:"010","illegal TOCOF name2\n",

11 "1252-011 A .space parameter is undefined.\n"
$ Do not translate .space.
$ $$Forward referencing is using the name before it is defined.
$ $$For example,
$ $$b = a + 1;
$ $$...
$ $$a = 1;
$ $$now you have used "a" to represent a value that is defined in a later line
$ $$to define "b".
$ $ This is a syntax error message displayed with incorrect
$ $ .space statement:  .space N.
$ $ N must be a positive absolute expression.  This message
$ $ indicates that N contains an undefined element (as in a label or
$ $ name (.lcomm/.comm/.csect) defined later).  The user must verify
$ $ that N is an absolute expression, integer or
$ $ algebraic expression which resolves into an
$ $ absolute expression.
$ $$ORIGINAL UNIX MESSAGE:"011","Illegal forward reference in .space\n",

12 "1252-012 The .space size must be an absolute expression.\n"
$ Do not translate .space.
$ $ This is a syntax error message displayed with incorrect
$ $ .space statement:  .space N.
$ $ N must be a positive absolute expression.  This message
$ $ indicates that N contains a non-absolute element,
$ $ such as a label or
$ $ name (.lcomm/.comm/.csect).  The user must verify
$ $ that N is an absolute expression, integer or
$ $ algebraic expression which resolves into an
$ $ absolute expression.
$ $$ORIGINAL UNIX MESSAGE:"012",".space size not absolute\n",

13 "1252-013 The .space size must be a positive absolute expression.\n"
$ Do not translate .space.
$ $ This is a syntax error message displayed with incorrect
$ $ .space statement:  .space N.
$ $ N must be a positive absolute expression.  This message
$ $ indicates that N resolves to a negative absolute
$ $ expression.  The user must verify
$ $ that N is a positive absolute expression.
$ $$ORIGINAL UNIX MESSAGE:"013",".space size is negative\n",

14 "1252-014 The .rename name symbol must be defined in the source code.\n"
$ $ This is a syntax error message displayed with incorrect
$ $ .rename statement:  .rename name,strcon.
$ $ name must be defined somewhere in the source code.
$ $ This message indicates that name has not been defined.
$ $ The user must verify that the name is defined somewhere
$ $ in the source code.
$ $$ORIGINAL UNIX MESSAGE:"014","illegal symbol type for rename\n",

15 "1252-015 A pseudo-op parameter is not defined.\n"
$ $ This is a syntax error message displayed with several
$ $ pseudo-ops (.line,.xline,.bf,.ef,.bb,.eb) which
$ $ have an expression argument that must resolve.
$ $ These pseudo-ops are customarily used by compilers/
$ $ preprocessors to provide debugger information.
$ $ The code must change so that the expression resolves/
$ $ or is defined.
$ $$ORIGINAL UNIX MESSAGE:"015","Invalid expression\n",

16 "1252-016 The specified opcode or pseudo-op is not valid.\n\
\tUse supported instructions or pseudo-ops only.\n"
$ Do not translate opcode or pseudo-op.
$ $ The first element (after any label) on the source line is not
$ $ recognized as an instruction or pseudo-op
$ $ that is supported/processed by the assembler.
$ $ The user should use only supported instructions
$ $ or pseudo-ops.
$ $$ORIGINAL UNIX MESSAGE:"016","invalid opcode or pseudo-op\n",

17 "1252-017 The ERRTOK in the args parameter is not valid.\n\
\tDepending upon where you acquired this product,\n\
\tcontact either your service representative\n\
\tor your approved supplier.\n"
$ Do not translate ERRTOK or args.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $$This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $$A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $ INTERNAL ERROR message.  Fixed by assembler source change.
$ $ Possible unanticipated user error, but not likely.
$ $$ORIGINAL UNIX MESSAGE:"017","unknown ERRTOK in errtok args\n",

18 "1252-018 Use a .tc inside a .toc scope only.\n\
\tPrecede the .tc statements with a .toc statement.\n"
$ Do not translate .tc, .toc, .csect.
$ $What do you call .tc, .toc, .csect, in general?
$ $$Pseudo-ops.  This term is derived from pseudo-operations, which
$ $$describes directives to the assembler which are not necessarily
$ $$converted directly into machine code.
$ $$More specifically, they are Section Definition pseudo-ops,
$ $$which include .comm,.csect,.lcomm,.tc, and .toc.
$ $$And, if .tc statements are the last statements in the source
$ $$file, they do not have to be followed by a .csect statement.
$ $ Syntax error message.  A .tc pseudo-op is only valid
$ $ following a .toc statement and prior to a .csect
$ $ statement.  The user should place a .toc statement
$ $ preceding the .tc statements and follow the statements
$ $ with a .csect.
$ $$The .tc pseudo-ops do not have to be followed by a .csect
$ $$statement, if they are the last statements in a source file.
$ $$ORIGINAL UNIX MESSAGE:"018","\".tc\" only allowed inside \".toc\" scope\n",

19 "1252-019 Do not specify externally defined symbols as .byte or .vbyte\n\
\texpression parameters.\n"
$ Do not translate .vbyte, .byte.
$ $ Syntax error message for .byte/.vbyte pseudo-ops:
$ $ .byte exp,exp... exp=expression
$ $ .vbyte N,exp   N=absolute expression range 1 to 4
$ $ The exp expression cannot contain externally defined
$ $ symbols (appear in .extern pseudo-op).  The user
$ $ should verify that no externally defined symbols
$ $ are contained within the .byte/.vbyte exp arguments.
$ $$ORIGINAL UNIX MESSAGE:"019",".byte or .vbyte exp is externally defined \n",

20 "1252-020 Do not specify externally defined symbols as .short\n\
\texpression parameters.\n"
$ Do not translate .short.
$ $ Syntax error message for .short pseudo-op:
$ $ .short exp,exp,... exp=expression
$ $ The exp expression cannot contain externally defined
$ $ symbols (appear in .extern pseudo-op).  The user
$ $ should verify that no externally defined symbols
$ $ are contained within the .short exp arguments.
$ $$ORIGINAL UNIX MESSAGE:"020",".short exp is externally defined \n",

21 "1252-021 The expression must be absolute.\n"
$ $$The number must resolve into a finite value within
$ $$this assembly. In the RT Assembler Lang. Ref., absolute
$ $$expression is defined as a value independent of any possible
$ $$code relocation.  Absolute expressions must be one of the following
$ $$1)An integer or character constant; 2) A symbol set to an absolute
$ $$3)absolute<operator>absolute, where<operator> is any arithmetic
$ $$binary operator;4)-absolute;5) ~absolute;6)relocatable-relocatable,
$ $$where the two "relocatables" refer to the same assembler section
$ $ Syntax error message.  The expression that
$ $ appears on the current line must resolve
$ $ into an absolute expression, integer or
$ $ arithmetic combination that resolves in an
$ $ absolute expression.
$ $$ORIGINAL UNIX MESSAGE:"021","expr must be absolute\n",

22 "1252-022 The first parameter must resolve into an absolute expression\n\
\tfrom 1 through 4.\n"
$ $$N=absolute expression
$ $ Syntax error message.
$ $ .vbyte N,exp   N=absolute expression range 1 to 4
$ $ N must be an absolute expression ranging from
$ $ 1 to 4.  The user should verify that N resolves
$ $ into an expression ranging from 1 to 4.
$ $$ORIGINAL UNIX MESSAGE:"022","expr must be between 1 and 4\n",

23 "1252-023 The symbol %s is not defined.\n"
$ $ Syntax error message.  The symbol requires definition
$ $ before use, typically defined using a .extern,.csect,.set,
$ $ .comm,.lcomm pseudo-op or defined as a label.
$ $$ORIGINAL UNIX MESSAGE:"023","undefined symbol \"%s\"\n",

24 "1252-024 The .stab string must contain a : character.\n"
$ Do not translate : or .stab.
$ $ Syntax error message for .stabx pseudo-op:
$ $ .stabx strcon, exp1, exp2, exp3
$ $ The strcon (string constant ex. "anything") must
$ $ contain a : character for correct debugger syntax.
$ $ Verify that strcon contains a : character.
$ $ Debugger pseudo-ops are customarily used by compilers
$ $ and preprocessors, not general users.
$ $$ORIGINAL UNIX MESSAGE:"024",".stab string does not contain \":\"\n",

25 "1252-025 The register, base register, or mask parameter\n\
\tis not valid.\n\
\tThe register number is limited to the number of registers on your\n\
\tmachine.\n"
$ $ The register number is limited to the number of registers
$ $ on the particular machine.  On the RT, register numbers
$ $ are limited from 0 to 15 (16 general purpose registers).
$ $ This is different from one machine to another.  This
$ $ syntax error message indicates that the register
$ $ argument does not fall within the number of registers.
$ $$ORIGINAL UNIX MESSAGE:
$ $$"025","Invalid register, base register, or mask argument\n",

26 "1252-026 Cannot create a temporary file.\n\
\tCheck the /tmp directory permissions.\n"
$ Do not translate /tmp.
$ $ The temporary file is hardcoded under the /tmp directory.  There-
$ $ fore, "Check path name" might be confusing.  This customarily
$ $ indicates permissions problems of /tmp.
$ $$ORIGINAL UNIX MESSAGE:"026","Cannot create temporary file\n",

27 "1252-027 Warning: Aligning with zeroes:\n\
\tThe .short pseudo-op is not on the half word boundary.\n"
$ Do not translate .short or pseudo-op.
$ $$Assembler inserts 0s into the current location until the current
$ $$location is a 0,2,4,6,8,a,c,e,10,12,14,16,18,1a,1c,1e,20,22,24...
$ $$For example,
$ $$.short 4 puts the value 4 in two bytes at the current location in
$ $$the object file (.o) if the current location is on a halfword
$ $$boundary (end in 0,2,4,6,8,a,c,e).  If the .short 4 current location
$ $$is not on a halfword boundary, 0s are inserted by the assembler
$ $$until it is.
$ $ Warning messages are not displayed unless the -w option from
$ $ the command line indicate that the user wants to see these
$ $ messages.  This indicates that a .short pseudo-op exists that
$ $ is not aligned properly on an internal address (loc ctr)
$ $ that is even, (ends in 0,2,4,6,8,a,c,e).  The assembler
$ $ generates 0's to align the statement properly.  If the
$ $ user wants to control the alignment, a .align 1 statement
$ $ prior to the .short will perform the same function.  Also,
$ $ .byte 0 prior to the .short will perform the same function
$ $ as the assembler will internally.
$ $$ORIGINAL UNIX MESSAGE:"027",
$ $$"Warning - aligning with zeroes: .short not on half word boundary\n",

28 "1252-028 Cannot reopen the intermediate result file\n\
\tin the /tmp directory.\n\
\tMake sure that the size of the /tmp file system\n\
\tis sufficient to store the file, and\n\
\tcheck that the file system is not damaged.\n"
$ Do not translate /tmp.
$ $What is another way to say "integrity?"
$ $$correctness. validity.
$ $ Involves reopening the /tmp file originally created
$ $ to contain intermediate results.  This message would
$ $ indicate a system problem occurred during closing
$ $ the file and then opening the file again.  Possible
$ $ problems with flaky filesystem or /tmp filesystem not
$ $ large enough to contain intermediate file.
$ $$ORIGINAL UNIX MESSAGE:"028","Cannot reopen temporary file\n",

29 "1252-029 There is not enough memory available now.\n\
\tCannot allocate the text and data sections.\n\
\tTry again later or use local problem reporting procedures.\n"
$ $ INTERNAL ERROR message.  Memory management problem.
$ $ Possible unanticipated memory allocation problem.
$ $ Not enough main memory (malloc) or memory pointers
$ $ have become corrupted.
$ $$This is a memory management problem.
$ $$ORIGINAL UNIX MESSAGE:"029","error allocating sections\n",

30 "1252-030 Cannot create the file %s.\n\
\tCheck path name and permissions.\n"
$ $ This message indicates the assembler is unable
$ $ to create the output file (object file).
$ $ The output file name/path can be specified by
$ $ the user using the -o path/filename option from
$ $ the command line or a default name of a.out (current
$ $ directory) is used.
$ $ In this instance, more than likely a path/permissions
$ $ problem.  "Try again later" probably won't work.
$ $$ORIGINAL UNIX MESSAGE:"030","Cannot create %s\n",

31 "1252-031 There is not enough memory available now.\n\
\tCannot allocate the ESD section.\n\
\tTry again later or use local problem reporting procedures.\n"
$ Do not translate ESD.
$ $ INTERNAL ERROR message.  Memory management problem.
$ $ Possible unanticipated memory allocation problem.
$ $ Not enough main memory (malloc) or memory pointers
$ $ have become corrupted.
$ $$This is a memory management problem.
$ $$ORIGINAL UNIX MESSAGE:"031","error allocating ESD\n",

32 "1252-032 There is not enough memory available now.\n\
\tCannot allocate the RLD section.\n\
\tTry again later or use local problem reporting procedures.\n"
$ Do not translate RLD.
$ $ INTERNAL ERROR message.  Memory management problem.
$ $ Possible unanticipated memory allocation problem.
$ $ Not enough main memory (malloc) or memory pointers
$ $ have become corrupted.
$ $$This is a memory management problem.
$ $$ORIGINAL UNIX MESSAGE:"032","error allocating RLD\n",

33 "1252-033 There is not enough memory available now.\n\
\tCannot allocate the string section.\n\
\tTry again later or use local problem reporting procedures.\n"
$ $ INTERNAL ERROR message.  Memory management problem.
$ $ Possible unanticipated memory allocation problem.
$ $ Not enough main memory (malloc) or memory pointers
$ $ have become corrupted.
$ $$This is a memory management problem.
$ $$ORIGINAL UNIX MESSAGE:"033","error allocating STRING TABLE\n",

34 "1252-034 There is not enough memory available now.\n\
\tCannot allocate the line number section.\n\
\tTry again later or use local problem reporting procedures.\n"
$ $ INTERNAL ERROR message.  Memory management problem.
$ $ Possible unanticipated memory allocation problem.
$ $ Not enough main memory (malloc) or memory pointers
$ $ have become corrupted.
$ $$This is a memory management problem.
$ $$ORIGINAL UNIX MESSAGE:"034","error allocating LINENO\n",

35 "1252-035 Specify a file with the -%c flag.\n\
\tUsage: as -l[ListFile] -n Name -o ObjectFile\n\
\t[-w|-W] -x[XCrossFile] [InputFile]\n"
$ Do not translate -l, -n, -o, -w, -W, -X.
$ $$The -w and the -W flags are mutually exclusive.
$ $ Syntax error message. Command line options -n, -o
$ $ require a filename as
$ $ a parameter.  This filename is missing from the
$ $ command line.  The user must provide a filename
$ $ with command line options -n, -o.
$ $$ORIGINAL UNIX MESSAGE:
$ $$"035","Filename argument to -%c missing on Command Line\n",

36 "1252-036 %s is not a recognized flag.\n\
\tUsage: as -l[ListFile] -n Name -o ObjectFile\n\
\t[-w|-W] -x[XCrossFile] [InputFile]\n"
$ Do not translate as, -l, -n, -o, -w, -W, -X.
$ $$ORIGINAL UNIX MESSAGE:"036","Unknown keyword option %s on Command Line\n",

37 "1252-037 Only one input file is allowed.\n\
\tUsage: as -l[ListFile] -n Name -o ObjectFile\n\
\t[-w|-W] -x[XCrossFile] [InputFile]\n"
$ Do not translate as, -l, -n, -o, -w, -W, -X.
$ $$ORIGINAL UNIX MESSAGE:"037","Only one input file allowed\n",

38 "1252-038 Cannot open file %s.\n\
\tCheck path name and permissions.\n"
$ $ This covers filename.s, listfile and xcrossfile from the command line.
$ $$ORIGINAL UNIX MESSAGE:"038","Cannot open file %s\n",

39 "1252-039 The first .vbyte parameter must be an absolute value\n\
\tfrom 0 to 4.\n"
$ Do not translate .vbyte.
$ $$ORIGINAL UNIX MESSAGE:"039","illegal VBYTE expression\n",

40 "1252-040 The specified expression is not valid.\n\
\tMake sure that all symbols are defined.\n\
\tCheck the rules on symbols used in an arithmetic expression\n\
\tconcerning relocation.\n"
$ $$Verify that all symbols are defined.  Also, there
$ $$are some rules on which symbols can be used in an
$ $$arithmetic expression concerning relocation that, if violated,
$ $$will possibly result in this error.  Too numerous to mention
$ $$and are documented in Asm. Lang. Ref.
$ $ This indicate that the expression does not resolve into
$ $ E_ABS, E_REL, E_TREL, E_TOCOF, E_EXT, or E_REXT.
$ $ More than likely, the expression is E_UNK.
$ $$ORIGINAL UNIX MESSAGE:"040","illegal expression\n",

41 "1252-041 Cannot divide the value by 0\n\
\tduring any arithmetic divisions.\n"
$ $What does "Constant division by 0 mean?"
$ $$In finite mathematics, it is illegal to divide a constant by 0.
$ $$The original unix message would be helpful in context. 
$ $ Syntax error message.  During an arithmetic division
$ $ the divisor cannot be zero.  The user must insure
$ $ during any arithmetic divisions, the value is not
$ $ divided by zero.
$ $$ORIGINAL UNIX MESSAGE:"041","Constant division by zero\n",

42 "1252-042 The internal arithmetic operator is not known.\n\
\tDepending upon where you acquired this product,\n\
\tcontact either your service representative\n\
\tor your approved supplier.\n"
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $$This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $$A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $ INTERNAL ERROR message.  combine() has been called
$ $ with an arithmetic operator that is not supported.
$ $$ORIGINAL UNIX MESSAGE:"042","Internal error: unknown operator\n",

43 "1252-043 The relocatable assembler expression is not valid.\n\
\tCheck that the expressions can be combined.\n"
$ $Is there another word for "relocatable?" We try to stay away from words
$ $with prefixes.
$ $$"relocatable" is defined in the Asm.Lang.Ref.2.2.1 glossary section
$ $$as "A value, expression, or address is relocatable if it does
$ $$not have to be changed when the program is relocated.
$ $$Relocation represents the fact that programs are placed into
$ $$main memory by the loader to execute; and, symbols that represent
$ $$things have to provide information on where they are located
$ $$in a descriptive, as opposed to numerical way, to be used.
$ $$I think relocatable means something to assembler
$ $$programmers and probably has no really good substitution.
$ $ Syntax error message.  Some arithmetic combinations
$ $ are not valid. These customarily involve TOCOF, EXT,
$ $ REL, TREL, REXT relocatable expressions.  The specific
$ $ rules are described fully in the assembler manual.
$ $ The user must insure that when using arithmetic
$ $ operators, the expressions involved are combinable.
$ $ Ex.  TOCOF + TOCOF            (ILLEGAL COMBINATION)
$ $$ORIGINAL UNIX MESSAGE:"043","Invalid relocatable assembler expression\n",

44 "1252-044 The specified source character 0x%x does not have\n\
\tmeaning in the command context used.\n"
$ $ Syntax error message.  The character has no meaning
$ $ in the context in which it is used.
$ $ Ex. .long 3@1
$ $ The @ is not an arithmetic operator or an integer
$ $ digit, and has no meaning in the context in which
$ $ it is used.  This message usually catches type-os.
$ $ The user must insure all characters are valid and
$ $ have meaning in the context in which they are used.
$ $$ORIGINAL UNIX MESSAGE:"044","Invalid source character 0x%x\n",

45 "1252-045 Cannot open the list file %s.\n\
\tCheck the quality of the file system.\n"
$ $* Another word for "integrity?"
$ $$correctness. validity.
$ $ This occurs during pass2.  Indicates possible filesystem
$ $ problem or closing problem with the original listing
$ $ file.
$ $$ORIGINAL UNIX MESSAGE:"045","cannot open list file %s\n",

46 "1252-046 Warning: There are possible name conflicts for names\n\
\tthat are not unique during the bind process.\n\
\tNames in the .tc statements must have correct resolution\n\
\tof the addresses.\n"
$ Do not translate .tc.
$ $ Warning messages are not displayed unless the -w option from
$ $ the command line indicate that the user wants to see these
$ $ messages.  The assembler maintains unique names between labels
$ $ and csects, .i.e. xlabel is different than xlabel[pr].
$ $ This is not true with the binder.  A csect name in
$ $ a .tc statement might be resolved to a label name if
$ $ the names are not unique.  And, this is a runtime problem
$ $ that is difficult to track down.  The user must be
$ $ very careful with names in the .tc statements so
$ $ that the binder will resolve the addresses correctly.
$ $ The user should insure that the name is unique, especially
$ $ if there is no tc csect name given, .i.e [tc].
$ $ The user must evaluate intent and be aware of the intent
$ $ of the toc entries.
$ $$ORIGINAL UNIX MESSAGE:"046","cannot open temp source file %s\n",

47 "1252-047 There is a nesting underflow.\n\
\tCheck for missing .function, .bi or .bb pseudo-ops.\n"
$ Do not translate .function, .bi, .bb or pseudo-ops.
$ $$Refer to 1252-002 comments for nesting overflow.
$ $$In a nesting underflow, the statements have come too far out
$ $$of the nested functions.
$ $$Check for missing .function/.bi/.bb pseudo-ops.
$ $ This syntax error message will only be displayed if
$ $ debugger pseudo-ops are used.
$ $ .function/.bb/.bi (pseudo-ops) generates pointers
$ $ that are saved on a stack with a limiting size
$ $ of 100 pointers.  .ef/.eb/.ei functions then remove these
$ $ pointers from the stack.  If more .ef/.eb/.ei functions are
$ $ encountered that pointers on the stack, this syntax error
$ $ message will display.  They must have previously matching
$ $ .function/.bb/.bi pseudo-ops.  Rewriting the code to avoid
$ $ this problem is necessary.  Note, debugger pseudo-ops
$ $ are customarily generated by compilers, as opposed to
$ $ users.
$ $$ORIGINAL UNIX MESSAGE:"047","Nesting underflow\n",

48 "1252-048 Found a symbol type that is not valid\n\
\twhen building external symbols.\n\
\tDepending upon where you acquired this product,\n\
\tcontact either your service representative\n\
\tor your approved supplier.\n"
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $$This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $$A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $ INTERNAL ERROR message.  (Occurs in bldtables().)
$ $  Symbol does not have symbol type of one of the
$ $ following:  XTY_LD, XTY_SD, XTY_ER, XTY_CM.
$ $$ORIGINAL UNIX MESSAGE:
$ $$"048","invalid type encountered when building External Symbols\n",

49 "1252-049 There is not enough memory\n\
\tto contain all the hash strings.\n\
\tDepending upon where you acquired this product,\n\
\tcontact either your service representative\n\
\tor your approved supplier.\n"
$ A hash string is a matched pattern to verify that one data type equals
$ another data type.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $$This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $$A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $ INTERNAL ERROR message.   (Occurs in addHSHstr().)
$ $ Not enough memory has been allocate to contain
$ $ all the hash strings.
$ $$ORIGINAL UNIX MESSAGE:"049","HSH string table overflow\n",

50 "1252-050 There is not enough memory available now.\n\
\tCannot allocate the debug section.\n\
\tTry again later or use local problem reporting procedures.\n"
$ Do not translate debug.
$ $ INTERNAL ERROR message.  Memory management problem.
$ $ Possible unanticipated memory allocation problem.
$ $ Not enough main memory (malloc) or memory pointers
$ $ have become corrupted.
$ $$This is a memory management problem.
$ $$ORIGINAL UNIX MESSAGE:"050","error allocating DEBUG TABLE\n" ,

51 "1252-051 There is an sclass type of Number=%d\n\
\tthat is not valid.\n\
\tDepending upon where you acquired this product,\n\
\tcontact either your service representative\n\
\tor your approved supplier.\n"
$ Do not translate sclass.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $$This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $$A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $ INTERNAL ERROR message.  (Occurs in sort_csects().)
$ $ Csect storage class is not supported.
$ $$ORIGINAL UNIX MESSAGE:"051","invalid sclass type of num=%d encountered\n",

52 "1252-052 The specified .align parameter must be an absolute value\n\
\tfrom 0 to 12.\n"
$ Do not translate .align.
$ "resolves into" means "becomes" or "is set to."
$ $$For example,
$ $$z=b;
$ $$b=c;
$ $$c=4;
$ $$Eventually, z is set equal to 4; or, z resolves into 4.
$ $ Syntax error message.
$ $ .align N       N=absolute expression range 0 to 12
$ $ N must be an absolute expression ranging from
$ $ 0 to 12.  The user should verify that N resolves
$ $ into an expression ranging from 0 to 12.
$ $$ORIGINAL UNIX MESSAGE:"052","Invalid \".align\" argument\n",

53 "1252-053 Change the value of the .org parameter until\n\
\tit is contained in the current csect.\n"
$ Do not translate .org, csect.
$ $What does "out of" mean? What is recovery?
$ $$not in.  Change the value of the .org parameter until it is
$ $$contained in the current csect (section).  Each csect has
$ $$a length and location associated with it.
$ $ syntax error message.
$ $ .org exp
$ $ Exp must meet the following criteria:  positive(this
$ $ includes 0), result in an address contained in the current
$ $ csect, and be an external(E_EXT) or relocatable(E_REL)
$ $ expression.  The user must insure that these criteria
$ $ are met.
$ $$ORIGINAL UNIX MESSAGE:"053",".org argument out of current csect\n",

54 "1252-054 The register parameter in .using\n\
\tmust be absolute and must represent a register\n\
\ton the current machine.\n"
$ Do not translate .using.
$ $ syntax error message.
$ $ .using exp, R
$ $ R must be absolute and must evaluate to an integer from
$ $ 0 to the top register defined by the machine.
$ $ R represents the register to be used as the default
$ $ register for base register addressing.  The user
$ $ must insure that the value is absolute and represents
$ $ a register on the current machine.
$ $$ORIGINAL UNIX MESSAGE:"054","Invalid register number in .using\n",

55 "1252-055 There is a base address in .using that is not valid.\n\
\tThe base address must be a relocatable expression.\n"
$ Do not translate .using.
$ $$The base address must be a relocatable expression.
$ $ syntax error message.
$ $ .using exp, R
$ $ exp is invalid.  exp is a label or an expression involving
$ $ a label and represents the displacement or relative
$ $ offset into the program.  The value must be relocatable.
$ $ The value can involve a toc label (tocrelative=TREL),
$ $ a label/name that is relocatable (relocatable=REL),
$ $ or an external symbol DEFINED WITHIN THE CURRENT
$ $ ASSEMBLY as a csect name/toc entry.
$ $ The user must verify that the exp is
$ $ a relocatable expression.
$ $$ORIGINAL UNIX MESSAGE:"055","Invalid base address in .using\n",

56 "1252-056 Specify a .using argument that references\n\
\tonly the beginning of the toc section.\n\
\tThe argument cannot reference locations\n\
\tcontained within the toc section.\n"
$ Do not translate .using, toc.
$ $ syntax error message.
$ $ .using exp, R
$ $ If exp is tocrelative, the label resides within the
$ $ toc(label: .tc), then exp must be a label describing
$ $ the beginning of the toc, it can not point to .tc statements
$ $ within the toc.  The user must verify that if exp
$ $ is tocrelative that it describes the beginning of the toc.
$ $$ORIGINAL UNIX MESSAGE:"056","can only have a using on beginning of TOC\n",

57 "1252-057 The external expression is not valid.\n\
\tThe symbol cannot be external.\n\
\tIf external, the symbol must be defined within the assembly\n\
\tusing a .toc or a .csect entry.\n"
$ Do not translate .toc or .csect.
$ $ syntax error message.
$ $ .using exp, R
$ $ In general, exp cannot be external.  The exp can be
$ $ an external symbol if the symbol is a csect or toc
$ $ entry DEFINED WITHIN THE ASSEMBLY.  The user must
$ $ insure that the symbol is either not external
$ $ (.extern), or defined within the assembly using a
$ $ toc entry or csect entry.
$ $$ORIGINAL UNIX MESSAGE:"057","illegal external expression\n",

58 "1252-058 Warning: The label %1$s is aligned with csect %2$s.\n"
$ Do not translate csect.
$ $$The assembler is providing information about a condition the
$ $$programmer might not have wanted to do.
$ $$Assemblers allow the programmer to have a lot of freedom in
$ $$constructing code that a compiler won't allow.  However, this
$ $$freedom results in possible errors not being flagged that would
$ $$not be allowed in a higher level programming language.
$ $ Warning messages are not displayed unless the -w option from
$ $ the command line indicate that the user wants to see these
$ $ messages.  This indicates that a label might not
$ $ be aligned the way the user intended. If the label
$ $ should point to the top of the csect, it should be
$ $ contain within the csect, first line.   The user
$ $ should evaluate intent.
$ $$ORIGINAL UNIX MESSAGE:"058","Invalid base address in .using\n",
$ $$BECOMES
$ $$ORIGINAL UNIX MESSAGE:"143","Warning - label %s aligned with %s csect\n",

59 "1252-059 The register in .drop must be an absolute value\n\
\tthat is a valid register number.\n"
$ Do not translate .drop.
$ $ syntax error message.
$ $ .drop N      N=absolute expression representing a register
$ $ The user must insure that N is an absolute value
$ $ that is a valid register number.  The RT has 16
$ $ registers.  Therefore, a value ranging from 0
$ $ to 15 is a valid register number.  This range is
$ $ specific to the machine.
$ $$ORIGINAL UNIX MESSAGE:"059","Invalid register in .drop\n",

60 "1252-060 The register in .drop is not in use.\n\
\tDelete this line or insert a .using line\n\
\tprevious to this .drop line.\n"
$ Do not translate .drop or .using.
$ $ syntax error message.
$ $ .drop N      N=absolute expression representing a register
$ $ This message indicates that the register represented
$ $ by N was never used in a previous .using statement.
$ $ The user will either want to delete the line (indicating
$ $ that no .drop was necessary in the first place) or
$ $ insert the .using statement that should have been
$ $ previous to this .drop statement.
$ $$ORIGINAL UNIX MESSAGE:"060","Register in .drop not in use\n",

61 "1252-061 A statement within .toc scope is not valid.\n\
\tUse the .tc pseudo-op to define entries within .toc scope.\n"
$ Do not translate .toc, .tc.
$ $ COMMENT:      Could not find this message actually used.
$ $$ORIGINAL UNIX MESSAGE:"061","illegal or unknown displacement\n",

62 "1252-062 The alignment must be a value from 0 to 31.\n"
$ $ syntax error message.
$ $ .csect name[storageclass],expr.
$ $ (The csect name[storageclass] and expr are optional operands)
$ $ expr defines alignment for the top of the
$ $ csect defined by name[storageclass].  This
$ $ alignment must range between 0 and 31.  The
$ $ user must insure that expr ranges between 0 and 31.
$ $$ORIGINAL UNIX MESSAGE:"062","alignment must be between 0 and 31\n",

63 "1252-063 The name for csect is not valid.\n\
\tChange the csect name to a unique name\n\
\tthat has not been defined previously.\n"
$ Do not translate csect.
$ $What kind of name? Recovery?
$ $$csects have names associated with them.
$ $$For example,
$ $$.csect text[pr]
$ $$"text" is the csect name.
$ $$Change the csect name to a unique name that has not been
$ $$defined previously.
$ $$The assembler will differentiate csect with same name but with different
$ $$storage classes.
$ $$For example,
$ $$.csect text[pr]
$ $$.csect text[ro]
$ $$are two uniquely named csects in the assemblers view.  The ld (linkage
$ $$editor), however, is a different story.
$ $$As long as the name is not externalized with a .globl/.extern statement
$ $$the names are ok.
$ $ syntax error message.
$ $ .csect name[storageclass],expr.
$ $ (The csect name[storageclass] and expr are optional operands)
$ $ The name[storageclass] has been previously defined
$ $ as a different construct than csect name, or has
$ $ been redefined as a construct other than csect name.
$ $ The user should look for other places in the code
$ $ that this name[storageclass] has been defined/redefined.
$ $$ORIGINAL UNIX MESSAGE:"063","illegal name for csect\n",

64 "1252-064 The .comm size must be an absolute expression.\n"
$ Do not translate .comm.
$ $ syntax error message.
$ $ .comm name, exp [,N]
$ $ The exp operand must be an absolute expression.
$ $ The user must insure that exp is an absolute expression.
$ $$ORIGINAL UNIX MESSAGE:"064","Common size not absolute\n",

65 "1252-065 The specified operation is not valid.\n\
\tUse instructions and pseudo-ops defined for this machine.\n"
$ Do not translate pseudo-ops.
$ $$The operation is not defined as an instruction or pseudo-op in
$ $$the current instruction set.
$ $$The user must use instructions and pseudo-ops defined for this
$ $$machine.
$ $ syntax error message.  Previously supported instruction
$ $ is no longer supported.  The user cannot use
$ $ the instruction.
$ $$ORIGINAL UNIX MESSAGE:"065","Illegal operation\n",

66 "1252-066 There is not enough memory available now.\n\
\tCannot allocate the typchk section.\n\
\tTry again later or\n\
\tuse local problem reporting procedures.\n"
$ Do not translate typchk.
$ $ INTERNAL ERROR message.  Memory management problem.
$ $ Possible unanticipated memory allocation problem.
$ $ Not enough main memory (malloc) or memory pointers
$ $ have become corrupted.
$ $$This is a memory management problem.
$ $$ORIGINAL UNIX MESSAGE:"066","error allocating HASH (.hash) TABLE\n",

67 "1252-067 The specified common storage class is not valid.\n\
\tDepending upon where you acquired this product,\n\
\tcontact either your service representative\n\
\tor your approved supplier.\n"
$ Recovery? Assembler maintenance.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $$This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $$A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $ INTERNAL ERROR message.  The jcomm() class is not
$ $ XMC_RW or XMC_BS.  These values are specified in as0.y.
$ $$ORIGINAL UNIX MESSAGE:"067","Illegal common storage class\n",

68 "1252-068 The .hash string is set for symbol %s already.\n\
\tCheck that this is the only .hash statement\n\
\tassociated with the symbol name.\n"
$ Do not translate .hash.
$ $ syntax error message.
$ $ .hash name,strcon
$ $ name has already been assigned a strcon in a previous
$ $ .hash statement.  The user should verify that this
$ $ is the only .hash statement associated with name.
$ $$ORIGINAL UNIX MESSAGE:"068","hash already set for \"%s\"\n",

69 "1252-069 The character %c in the hash string is not valid.\n\
\tThe characters in the string must be in the set [0-9A-Fa-f].\n"
$ Do not translate hash string or [0-9A-Fa-f].
$ $ Is hash string=strcon operand?
$ $$YES, that's fine. strcon actually is derived from "string
$ $$constant".
$ $$Recovery for this would be:  The characters in the
$ $$hash string are required to be in the set [0-9A-Fa-f].
$ $ syntax error message.
$ $ .hash name,strcon
$ $ The character in the strcon operand are required
$ $ to be in the set [0-9A-Fa-f], and they represent
$ $ a hexadecimal hash code.
$ $ The user should insure that the strcon characters
$ $ are within this set.
$ $$ORIGINAL UNIX MESSAGE:"069","illegal character (%c) in hash string\n",

70 "1252-070 The specified symbol or symbol type\n\
\tfor the hash value is not valid.\n"
$ Do not translate hash value.
$ $ syntax error message.
$ $ .hash name, strcon
$ $ name is not a defined symbol.  The symbol must be defined
$ $ somewhere in the file.
$ $$ORIGINAL UNIX MESSAGE:
$ $$"070","illegal symbol or symbol type for hash value\n",

71 "1252-071 \n"
$ $ COMMENT:      Could not find this message actually used.
$ Do not translate.
$ $$ORIGINAL UNIX MESSAGE:"071","cannot assign function sclass\n",

72 "1252-072 \n"
$ $ COMMENT:      Could not find this message actually used.
$ Do not translate.
$ $$ORIGINAL UNIX MESSAGE:"072","symbol not located in symbol table\n",

73 "1252-073 There is not enough memory available now.\n\
\tCannot allocate a segment in memory.\n\
\tTry again later or use local problem reporting procedures.\n"
$ $$This message is generated in a variety of places in the
$ $$assembler software where memory is allocated in small
$ $$chunks.  Debug entry allocation is done on an individual
$ $$basis and generates this message when memory will not allocate.
$ $ This indicates a malloc/realloc problem.  Several
$ $ things could generate this type of error.  Not
$ $ enough main memory to allocate, corruption in
$ $ memory pointers, or corruption in the filesystem.
$ $$ORIGINAL UNIX MESSAGE:"073","Memory overflow\n",

74 "1252-074 The pseudo-op is not within the text section.\n\
\tThe .function, .bf, and .ef pseudo-ops must be contained\n\
\twithin a csect with one of the following storage classes:\n\
\tRO, PR, XO, SV, DB, GL, TI, or TB.\n"
$ Do not translate pseudo-op, RO, PR, XO, SV, DB, GL, TI, TB, .function, csect,
$ .bf, or .ef.
$ $What does "Within the scope of" mean?
$ $$scope is a c language concept defined in the C Lang. Guide and Ref.
$ $$as:  That part of a source program in which a variable can
$ $$communicate its value.  In this instance, the .function, .bf, and .ef
$ $$pseudo-ops must be within a text csect.
$ $ syntax error message.
$ $ .function name,expr,expr,expr
$ $ The .function pseudo-op must follow (or be in the
$ $ scope of) a csect with one of the following storage
$ $ classes:  RO, PR, XO, SV, DB, GL, TI, TB
$ $ The user should insure that the .function falls
$ $ within the scope of a text csect.
$ $$ORIGINAL UNIX MESSAGE:"074","pseudo-op not within text sect\n",

75 "1252-075 The specified number of parameters is not valid.\n"
$ $Will a usage statement show the correct number of parameters?
$ $$No, each instruction is specific to the number of parameters
$ $$that are required to make it correct.  The programmer will
$ $$have to verify with the documentation how many parameters
$ $$are correct for this particular instruction.
$ $ syntax error message for instructions.  The number
$ $ of arguments with the instruction is incorrect.
$ $ The user should verify that the right number of
$ $ arguments accompany this instruction.
$ $ COMMENT:      This message occurs during pass2.  More than likely,
$ $ the argument problem was previously found in pass 1.
$ $ Possibly the problem is internal.
$ $$ORIGINAL UNIX MESSAGE:"075","wrong number of arguments\n",

76 "1252-076 The .line pseudo-op must be contained \n\
\twithin a text or data .csect.\n"
$ Do not translate .line, pseudo-op, or .csect.
$ What does "within the scope of" mean.
$ $$Refer to 1252-074 comments for "within the scope of".
$ $ syntax error message.
$ $ .line N
$ $ This pseudo-op must be within a text or data
$ $ section.  The only instance of this would be
$ $ if the .line was contained in a .dsect.  The
$ $ user should verify that the .line is not contained
$ $ within the scope of a .dsect.
$ $$ORIGINAL UNIX MESSAGE:"076","unable to assign sect to linenumber\n",

77 "1252-077 The file table is full.\n\
\tDo not include more than 99 files\n\
\tin any single assembly source file.\n"
$ Do not translate file table.
$ $Is this something the user would include or the system would include?
$ $$The programmer.  Possibly a compiler that was using the assembler
$ $$as a back-end.
$ $ The .xline pseudo-ops indicate a filename along with
$ $ the number.  These pseudo-ops are generate with m4 -l
$ $ option.  MAX_FILE is defined as 99; therefore,
$ $ a maximum of 99 files may be included with m4 -l.
$ $ The user should insure that m4 has not included
$ $ more than 99 files in any single assembly source file.
$ $$ORIGINAL UNIX MESSAGE:"077","file_table full\n",

78 "1252-078 The bit mask parameter starting at %d is not valid.\n"
$ Do not translate bit mask.
$ $$The programmer should insure that this mask is correct,
$ $$resolves to something 32-bit with 1/0s.
$ $ syntax error message.  Rotate left instructions
$ $ have a bit mask argument that is incorrect.
$ $ rlxx R1,R2,R3,BM or rlxx R1,R2,R3,I4,I5
$ $ This message only occurs if the first format occurs.
$ $ In the second format the begin/end masks are listed
$ $ separately.  So, the user might have just failed
$ $ to list I5, thus generating this message.  BM is
$ $ a 32-bit mask argument that is used to modify the result
$ $ in some way specific to the instruction.  The user
$ $ should insure that this mask is correct, resolves
$ $ to something 32-bit with 1/0s.
$ $$ORIGINAL UNIX MESSAGE:"078","illegal bit mask starting at %d\n",

79 "1252-079 Found a type that is not valid when counting the RLDs.\n\
\tDepending upon where you acquired this product,\n\
\tcontact either your service representative\n\
\tor your approved supplier.\n"
$ Do not translate RLDs.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $$This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $$A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $ INTERNAL ERROR message.  In addrld(), the csect storage
$ $ class is not found.
$ $$ORIGINAL UNIX MESSAGE:"079","invalid type encountered when counting rlds\n"

80 "1252-080 The specified branch target\n\
\tmust be on a full word boundary.\n"
$ $ syntax error message.  Branch instructions have a target
$ $ or location to which the program logic should "jump".
$ $ These target addresses have to be on a full word boundary,
$ $ or addressable as a word(.i.e. ends in 0,4,8,c).
$ $ The user should insure that
$ $ the branch target is on a full word address(i.e. ends in
$ $ (0,4,8,c).  The listing indicates location counter addresses,
$ $ this is useful when trying to track down this sort of
$ $ problem.
$ $$ORIGINAL UNIX MESSAGE:"080","Branch target not on word boundary\n" ,

81 "1252-081 The instruction is not aligned properly.\n\
\tThe instruction requires machine specific alignment.\n"
$ Should this read, "Align the instruction on an even address?"
$ $$Or, "The instruction is not aligned properly\n"
$ $$This message is produced on both RT and 2ND GENERATION RISC platforms.
$ $$On the RT platform, the alignment must be halfword or even.
$ $$On the 2ND GENERATION RISC platform, the alignment must be fullword or
$ $$a multiple of four.  So,
$ $$we need something generic here.  The 2ND GENERATION RISC platform 
$ $$is the product.
$ $ syntax error message.  The instruction must be aligned
$ $ on at least an even address(i.e.location counter address
$ $ ends in 0,2,4,6,8,a,c,e).  When this message is
$ $ encountered, more than likely an instruction/pseudo-op
$ $ previous to it has modified the location counter to
$ $ result in an odd address.  The user should insure
$ $ that the instruction is on an even address.
$ $$ORIGINAL UNIX MESSAGE:"081","Misaligned instruction\n",

82 "1252-082 Use more parameters for the instruction.\n"
$ $$Each instruction is specific to the number of parameters
$ $$that are required to make it correct.  The programmer will
$ $$have to verify with the documentation how many parameters
$ $$are correct for this particular instruction.
$ $ This message checks EVERY INSTRUCTION
$ $ to insure that the correct number of arguments
$ $ are parsed by the assembler to generate the particular
$ $ instruction.  A usage statement would be worthless
$ $ due to the variety of instructions.  The user
$ $ should insure that the correct number of arguments
$ $ (in this case, there are too few) are given for
$ $ this instruction.
$ $$ORIGINAL UNIX MESSAGE:"082","Too few arguments\n",

83 "1252-083 Use fewer parameters for the instruction.\n"
$ $$Each instruction is specific to the number of parameters
$ $$that are required to make it correct.  The programmer will
$ $$have to verify with the documentation how many parameters
$ $$are correct for this particular instruction.
$ $ This message checks EVERY INSTRUCTION
$ $ to insure that the correct number of arguments
$ $ are parsed by the assembler to generate the particular
$ $ instruction.  A usage statement would be worthless
$ $ due to the variety of instructions.  The user
$ $ should insure that the correct number of arguments
$ $ (in this case, there are too many) are given for
$ $ this instruction.
$ $$ORIGINAL UNIX MESSAGE:"083","Too many arguments\n",

84 "1252-084 An internal operations error\n\
\toccurred during pass 1.\n\
\tDepending upon where you acquired this product,\n\
\tcontact either your service representative\n\
\tor your approved supplier.\n"
$ Pass 1 is the first round of the process.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $$This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $$A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $ INTERNAL ERROR message.  The instruction type (defined
$ $ in instrs) is not recognized/supported.  This check
$ $ is done in both ins1out()/ins2out().
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"084","Internal error: Pass 1 op botch\n",

85 "1252-085 Do not specify a branch, jump, trap,\n\
\tlps, mfia, svc, or wait instruction following\n\
\ta branch and execute instruction.\n"
$ Do not translate branch, jump, trap, lps, mfia, svc, or wait.
$ Branch and execute is the name of a type of branch instruction.
$ $$branch and execute is the name of a type of branch instruction
$ $$in which the instruction following the branch is executed.
$ $$Since execute is part of the instruction name, I would
$ $$not recommend that it be changed.
$ $ syntax error message.  The instruction following a branch
$ $ and execute instruction cannot be a branch instruction,
$ $ a jump instruction, a trap instruction, lps, mfia, svc
$ $ or wait.  The user should insure that the instruction
$ $ following the branch and execute is correct.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:
$ $$"085","illegal branch and execute subject instruction\n",

86 "1252-086 The target of the branch instruction\n\
\tmust be a relocatable or external expression.\n"
$ $$Refer to 1252-004 comments on relocatable.
$ $ syntax error message.  Only absolute branch
$ $ instructions can have absolute expression targets.
$ $ The user should replace the current branch instruction
$ $ with an absolute branch instruction, or replace
$ $ the absolute expression target with a relocatable
$ $ target.
$ $$ORIGINAL UNIX MESSAGE:"086","address cannot be absolute\n",

87 "1252-087 The target of the branch instruction\n\
\tmust be a relocatable or external expression.\n"
$ $$Refer to 1252-004 comments on relocatable.
$ $ syntax error message.  The target of the branch instruction
$ $ must be either relocatable or external.  The user
$ $ should insure that the target of this branch instruction
$ $ is either relocatable or external.
$ $$ORIGINAL UNIX MESSAGE:"087","illegal expression type for branch address\n",

88 "1252-088 The branch address is out of range.\n\
\tThe target address cannot exceed the ability\n\
\tof the instruction to represent the bit size of\n\
\tthe branch address value.\n"
$ $ syntax error message.  Branch instructions limit
$ $ there target address sizes to 32i-bits, 16-bits, and other
$ $ specific to the instruction sizes.  When the target
$ $ address value cannot be represented in the defined
$ $ limiting space (specific to the instruction), this
$ $ error message appears.  The user should insure that
$ $ the target address value does not exceed the instructions
$ $ ability to represent(bit size).
$ $$ORIGINAL UNIX MESSAGE:"088","branch address out of range\n",

89 "1252-089 The branch address must be on a half word boundary.\n"
$ $ syntax error message.  Branch instructions have a target,
$ $ or location to which the program logic should "jump".
$ $ These target addresses have to be on a half word boundary,
$ $ or addressable as a halfword(.i.e. ends in 0,2,4,6,8,a,c,e).
$ $ The user should insure that
$ $ the branch target is on a half word address(i.e. ends in
$ $ (0,2,4,6,8,a,c,e).
$ $ The listing indicates location counter addresses,
$ $ this is useful when trying to track down this sort of
$ $ problem.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"089","branch address not on halfword boundary\n",

90 "1252-090 The specified condition status bit must be\n\
\tfrom 0 to 7.\n"
$ $I1=specified condition status
$ $ syntax error message.
$ $ bb/bnb I1,A2
$ $ I1 must range from 0 to 7.  The user should insure
$ $ that I1 ranges from 0 to 7.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"090","Invalid condition status bit specified\n",

91 "1252-091 The immediate operand must be\n\
\tan absolute, non-relocatable expression.\n"
$ $$Immediate data is valid; Immediate data can be an
$ $$arithmetic constant, symbol, or absolute, non-relocatable expression.
$ $ syntax error message involving instructions with
$ $ immediate data.  Immediate data can be an arithmetic
$ $ constant, symbol, or absolute,non-relocatable.
$ $ In some instances, the size of the value is restricted.
$ $ This message indicated there is something wrong with
$ $ the immediate data.  The user should insure that
$ $ the immediate field contains a valid value.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"091","Invalid immediate operand\n",

92 "1252-092 The parameter cannot be a relocatable reference.\n"
$ $$Refer to 1252-004 comments on relocatable.
$ $$This message almost gives the impression that the programmer
$ $$can change the reference to be not relocatable
$ $$and still keep the same kind of reference.  The parameter
$ $$is INVALID.  It is invalid because it is a relocatable reference.
$ $$The programmer should change the reference, if this was not the
$ $$intent; or, use another instruction.
$ $ syntax error message.  Instruction argument is
$ $ relocatable when it should be constant,absolute,external.
$ $ A variety of instructions are checked in this way.
$ $ The user should verify that the arguments for the
$ $ instruction are valid.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"092","Invalid relocatable reference\n",

93 "1252-093 The instruction does not accept a relocatable displacement\n\
\tin the specified field.\n"
$ $$The user has used a relocatable displacement in the instruction
$ $$on the line that this message is given.  This instruction
$ $$does not accept this kind of input in this particular
$ $$field(parameter).
$ $ syntax error message.  Instruction displacement argument is
$ $ relocatable when it should be constant,absolute,external.
$ $ A variety of instructions are checked in this way.
$ $ The user should verify that the arguments for the
$ $ instruction are valid.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"093","Invalid relocatable displacement\n",

94 "1252-094 The instruction does not accept\n\
\ta relocatable expression in the specified field.\n"
$ $$The user has used a relocatable value in the expression in the instruction
$ $$syntax on the line that this message is given.  This instruction
$ $$does not accept this kind of input in this particular
$ $$field(parameter).
$ $ syntax error message.  Instruction expression argument is
$ $ relocatable when it should be constant,absolute,external.
$ $ A variety of instructions are checked in this way.
$ $ The user should verify that the arguments for the
$ $ instruction are valid.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"094","Invalid relocatable assembler expression\n",

95 "1252-095 The specified condition status bit must be\n\
\tfrom 0 to 7.\n"
$ $I1=condition status bit
$ $Why not valid?
$ $$Because it must range from 0 to 7.
$ $ syntax error message.
$ $ bb/bnb I1,A2
$ $ I1 must range from 0 to 7.  The user should insure
$ $ that I1 ranges from 0 to 7.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"095","Invalid condition status bit specified\n",

96 "1252-096 The specified branch instruction target address\n\
\tmust be an expression.\n"
$ $Why not valid?
$ $$Because it is not an expression.  An expression can be an
$ $$arithmetic collection of symbols and constants.
$ $$The 2.2.1 version of the Asm. Lang. Ref. defines expression
$ $$as:  A representation of a value.  For, example
$ $$variables and constants appearing alone or in combination with
$ $$operators.
$ $ syntax error message.  The branch instruction
$ $ target address is not properly constructed
$ $ for some reason, a displacement type addressing
$ $ as opposed to an expression.  The
$ $ user should verify, through current instruction
$ $ documentation, that the target address is correct.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"096","Invalid branch address\n",

97 "1252-097 The short displacement is out of range.\n\
\tChange the instruction or\n\
\treduce the value of the displacement argument.\n"
$ $What is short displacement? What is the range?
$ $$This message appears on RT platform only.
$ $$In the RT instruction set, there are long (4 byte)
$ $$and there are short(2 byte) instructions.
$ $$Short displacement describes a displacement for a
$ $$short instruction.
$ $$The assembler determines if the displacement given
$ $$is within the range acceptable by the short instructions.
$ $$EACH INSTRUCTION IS DIFFERENT.  The assembler
$ $$generates the range specific for the short instruction.
$ $ syntax error message.  Instruction which
$ $ incorporates the displacement value into
$ $ the instruction itself is unable to fit
$ $ the displacement argument into the size
$ $ allotted by the instruction.  The user
$ $ will have to either change the instruction
$ $ or reduce the value of the displacement argument.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"097","Short displacement out of range\n",

98 "1252-098 The displacement is not aligned correctly.\n\
\tChange the instruction or\n\
\tchange the value of the displacement argument.\n"
$ $ syntax error message.  Instruction which
$ $ incorporates the displacement value into
$ $ the instruction itself requires that the
$ $ displacement be aligned.  This message
$ $ indicates that the displacement value
$ $ does not align correctly. The user
$ $ will have to either change the instruction
$ $ or change the value of the displacement argument
$ $ to coincide with the instruction requirements.
$ $ The asm manual should provide
$ $ rules for the specific instruction.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"098","displacement not aligned properly\n",

99 "1252-099 The specified displacement is not valid.\n\
\tThe instruction displacement must be\n\
\trelocatable, absolute, or external.\n"
$ $ syntax error message.  The instruction displacement
$ $ must be either relocatable, absolute, or
$ $ external (csect/comm).  (possibly tocrelative depending
$ $ on machine platform).  The user must verify
$ $ that the displacement is valid for this instruction.
$ $$ORIGINAL UNIX MESSAGE:"099","Invalid displacement\n",

100 "1252-100 Either the displacement value or\n\
\tthe contents of the specified general purpose register, or both,\n\
\tdo not yield a valid address.\n"
$ Do not translate base or displacement.
$ $$base/displacement are also assembler language concepts.
$ $$not part of the assembler syntax.
$ $ Recovery:     syntax error message.  The instruction requires a
$ $ base/displacement argument.  The user should verify
$ $ that the base/displacement argument to the instruction
$ $ is formed correctly.
$ $$ORIGINAL UNIX MESSAGE:"100","invalid d(r) argument\n",

101 "1252-101 The specified condition status bit must be\n\
\tfrom 0 to 7.\n"
$ Do not translate condition status bit.
$ $ syntax error message.  Instruction argument ranges between
$ $ 0 and 7.  This message checks specifically jb, jnb.
$ $ This argument describes the condition
$ $ status bit.  The user should verify that its value
$ $ ranges between 0 and 7.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"101","Invalid condition status bit specified\n",

102 "1252-102 The target address must be greater than -256\n\
\tand less than 254.\n"
$ $ syntax error message.  Jump instructions require
$ $ that the target address be within the current
$ $ csect, (the value) is greater than -256, and
$ $ (the value) is less than 254.  The user should
$ $ verify that the value of the address conform to
$ $ these criteria.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"102","Jump target out of range\n",

103 "1252-103 The specified instruction is not supported by this machine.\n"
$ $$Do not use the instruction.  The programmer will
$ $$have to find an supported instruction in the machine
$ $$instruction set.
$ $ The instruction on the source line is not
$ $ processes by the assembler.  There are a variety
$ $ of reasons that mnemonics are not processed.  The
$ $ instruction might have been supported in V2 or
$ $ on another machine platform.  However, the
$ $ instruction is no longer valid and should not
$ $ be used by the programmer (user).
$ $$ORIGINAL UNIX MESSAGE:"103","Instruction not supported\n",

104 "1252-104 The %d parameter must be absolute.\n"
$ $ syntax error  message.  The instruction argument
$ $ must be absolute.  The user should verify that
$ $ the instruction argument is absolute(non-relocatable,
$ $ non-external).
$ $$2ND GENERATION RISC platform only.
$ $$ORIGINAL UNIX MESSAGE:"104","argument %d must be absolute\n",

105 "1252-105 The specified mask or the register parameter\n\
\tmust be from 0 to 15.\n"
$ $ syntax error message.  The instruction register argument
$ $ must be an expression or absolute and ,customarily, range
$ $ between 0 and 15.  The user should verify that
$ $ the register argument is valid, follows the criteria
$ $ given here and in the asm manual.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"105","Invalid mask or register argument\n",

106 "1252-106 The displacement must be\n\
\tgreater than -32768 and less than 32767.\n"
$ $$The programmer should insure that the displacement value
$ $$falls within these limits.
$ $$The limits are 32767 and -32768.
$ $ syntax error message.  Several types of instructions
$ $ are checked for a variety of ranges.  The specific
$ $ requirements for the instruction should be documented
$ $ in the asm language reference.  The user should
$ $ insure that the displacement value falls within
$ $ these limits.
$ $$ORIGINAL UNIX MESSAGE:"106","displacement out of range\n",

107 "1252-107 The parameter %d must be within range for the\n\
\tspecific instruction.\n"
$ $$The programmer should insure that the displacement value
$ $$falls within these limits.
$ $$These limits are specific to the instruction.  The programmer
$ $$will have to determine their values.
$ $ syntax error message.  The instruction parameter is
$ $ absolute, but out of range.  The range
$ $ is specific to the instruction and should be documented
$ $ in the asm language reference.  The user should insure that
$ $ the value is within range for the particular instruction.
$ $$2ND GENERATION RISC platform only.
$ $$ORIGINAL UNIX MESSAGE:"107","argument %d out of range\n",

108 "1252-108 Warning: The alignment for label %s is not valid.\n\
\tThe label requires machine specific alignment.\n"
$ $$If the label is in fact the label the programmer wanted to use,
$ $$an .align pseudo-op proceeding that label will force alignment.
$ $$Alignment on the RT platform is halfword, on the 2ND GENERATION RISC 
$ $$platform it is fullword.
$ $ Warning messages are not displayed unless the -w option from
$ $ the command line indicate that the user wants to see these
$ $ messages.  This indicates that a label is not aligned properly
$ $ to be the subject of a branch, either even address (loc ctr)
$ $ (ends in 0,2,4,6,8,a,c,e) or full word address (0,4,8,c).
$ $ user wants to control the alignment, a .align statement
$ $ prior to the label will perform the same function.  Also,
$ $ .byte 0, .short 0 statements padding prior to the label
$ $ will shift its alignment.
$ $$ORIGINAL UNIX MESSAGE:
$ $$"108","Warning - the alignment for label %s is incorrect\n" ,

109 "1252-109 Warning: Aligning with zeroes:\n\
\tThe .long pseudo-op is not on full word boundary.\n"
$ $$The assembler is using 0's to align the data.
$ $$If however, this is a text section and instructions
$ $$are generated that contain inserted 0's, there might
$ $$be a problem. The programmer should be aware of
$ $$the 0s if a runtime error occurs.
$ $$The situations are so varied, I don't think there is
$ $$just one answer.
$ $ Warning messages are not displayed unless the -w option from
$ $ the command line indicate that the user wants to see these
$ $ messages.  This indicates that a .long pseudo-op exits that
$ $ is not aligned properly on an internal address (loc ctr)
$ $ that is fullword, (ends in 0,4,8,c).  The assembler
$ $ generates 0's to align the statement properly.  If the
$ $ user wants to control the alignment, a .align 2 statement
$ $ prior to the .long will perform the same function.  Also,
$ $ .byte 0, .short 0 statements padding prior to the .long
$ $ will perform the same function
$ $ as the assembler will internally.
$ $ "1252-000 Warning: The alignment with zeroes:
$ $ .long is not on full word boundary.\n"
$ $$ORIGINAL UNIX MESSAGE:"109",
$ $$"Warning - aligning with zeroes:  not on full word boundary\n",
$ $$/*"Warning - aligning with zeroes: .long not on full word boundary\n",*/

110 "1252-110 Warning: Aligning with zeroes in program csect.\n"
$ $Does the user need some possible recovery here?
$ $$no, this is just to inform the user that the assembler is
$ $$using 0's to align the data.
$ $$If however, this is a text section and instructions
$ $$are generated that contain inserted 0's, there might
$ $$be a problem. The programmer should be aware of
$ $$the 0s if a runtime error occurs.
$ $$The situations are so varied, I don't think there is
$ $$just one answer.
$ $ Warning messages are not displayed unless the -w option from
$ $ the command line indicate that the user wants to see these
$ $ messages.  The assembler is aligning a statement located
$ $ in a csect of type [pr] or [gl].  The alignment of the
$ $ instruction is not on a halfword/fullword (depending on
$ $ platform) address.  The assembler pads with nops and 0s.
$ $ This is only a warning, and the code could possibly execute
$ $ without modification.  The user, if necessary, should
$ $ look for a possible reason why the alignment is not
$ $ on halfword/fullword (depending on platform).  This could
$ $ signal a possible pseudo-op or instruction in the wrong
$ $ place.
$ $$ORIGINAL UNIX MESSAGE:
$ $$"110","Warning - aligning with zeroes in program csect\n",

111 "1252-111 Warning: Csect alignment has changed.\n\
\tTo change alignment, check previous .csect statements.\n"
$ $What does the user do if a problem has occurred?
$ $$Modify there code so that the alignment of the csect
$ $$does not change.
$ $ Warning messages are not displayed unless the -w option from
$ $ the command line indicate that the user wants to see these
$ $ messages.  The top of the csect is aligned according to
$ $ a default (fullword) or a variable given by the user.
$ $ This warning indicates that the alignment that the
$ $ csect was originally created with change sometime later
$ $ in the source.  This might/might not be a problem
$ $ depending on the users intent.  The user should evaluate
$ $ whether a problem has occurred or not.
$ $$ORIGINAL UNIX MESSAGE:"111","Warning - Csect alignment has changed\n",

112 "1252-112 Warning: The %c instruction is not supported\n\
\tby this machine.\n"
$ $ Warning messages are not displayed unless the -w option from
$ $ the command line indicate that the user wants to see these
$ $ messages.  Several input formats for specific instructions
$ $ were in the past supported for whatever reason.  These
$ $ input formats are no longer used.  Since this type
$ $ of information is provided by the assembler, this is
$ $ more than likely an INTERNAL ERROR.  However, if the
$ $ instruction is not flagged before now, it will be flagged
$ $ by this warning message.  The user should not use this
$ $ instruction, and should delete it from the code.
$ $ If a new instruction is added as well as the new input format
$ $ but no code to process it in routine ins2out, this error
$ $ could happen.
$ $$2ND GENERATION RISC platform only.
$ $$ORIGINAL UNIX MESSAGE:
$ $$"112","Warning - illegal or not implemented yet \"%c\"\n",

113 "1252-113 Warning: It is possible to specify\n\
\tthe more efficient jump instruction\n\
\tinstead of the instruction that was specified.\n"
$ $ Warning messages are not displayed unless the -w option from
$ $ the command line indicate that the user wants to see these
$ $ messages.  This is only indicating to the user that
$ $ a more efficient jump instruction can be used in place
$ $ of the current instruction.  This is just information
$ $ to the user, current instruction will work.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"113","Warning - jump instruction can be used\n",

114 "1252-114 Warning: It is possible to use the short form\n\
\tof the specified instruction.\n"
$ $ Warning messages are not displayed unless the -w option from
$ $ the command line indicate that the user wants to see these
$ $ messages.  This is only indicating to the user that
$ $ a more efficient short form of the specific instruction
$ $ can be used in place
$ $ of the current instruction.  This is just information
$ $ to the user, current instruction will work.
$ $$RT platform only.
$ $$ORIGINAL UNIX MESSAGE:"114","Warning - short form can be used\n",

115 "1252-115 The sort failed with status %d.\n\
\tCheck the condition of the system sort command or\n\
\tuse local problem reporting procedures.\n"
$ $ System problem.  When the -x option is used from the
$ $  command line, the system sort routine is called.
$ $ If that call is unsuccessful, this message will
$ $ be displayed.  Either the sort utility is not available,
$ $ or a system problem has developed. The user should
$ $ check the condition of the system sort command, or
$ $ check the system itself (fsck).
$ $$ORIGINAL UNIX MESSAGE:"115","Sort failed with status %d\n",

116 "1252-116 There is a system error from %s.\n\
\tCheck the condition of the system sort command or\n\
\tuse local problem reporting procedures.\n"
$ %s is the sort command.
$ $ System problem.  When the -x option is used from the
$ $  command line, the system sort routine is called.
$ $ The assembler forks a process to call the sort
$ $ utility.  If this fork fails to exec the sort
$ $ routine this message will display.  Either the sort
$ $ utility is not available, or a system problem has
$ $ developed.  The user should check the condition of the
$ $ system sort command, or check the system itself (fsck).
$ $$ORIGINAL UNIX MESSAGE:"116","Fatal error from %s\n",

$ $ $$$$$$$$$$$$$ The following messages specify LISTING or STDERR formatting
117 "Assembler:\n"
$ $ "Assembler" name of program appears when the first error is encountered
$ $       This is not an error message.

118 "line %d: "
$ %d is the line number on which the error resides.
$ $ "line.." indicates line number on which error resides
$ $       This message is displayed prior to the error messages.  This
$ $       would make the display on the screen TOO LONG if modified
$ $       to any great extent.  If modification is necessary, a
$ $       newline should be inserted, so that the error message will
$ $       follow on the next line.

119 ".xref"
$ Do not translate .xref
$ $ ".xref" generates the xcrossreference file name,  filename.xref
120 ".lst"
$ Do not translate .lst
$ $ ".lst" generates the listing file name, filename.lst
121 "SYMBOL          FILE            CSECT                   LINENO        \n"),
$ If you must translate the headings in this message, use words the same size
$ or smaller and use the same spacing.
$ $ Xcrossref file header for xcrossref file
122 "\n %s                              "
$ %s is a file.
$ $$filename.
$ $ LISTFILE column/spacing
$ $ spacing for filename at top of listfile
123 "\n %s                              "
$ %s is a file.
$ $$filename.
$ $ LISTFILE column/spacing
$ $ spacing for filename at top of listfile
$ $ column headings
124 "\nFile# Line#  Name    Loc Ctr   Object Code         Source\n\n"
$ If you translate the headings in this message, use words the same size or
$ smaller and use the same spacing.
$ # is the abbreviation for Number.
$ Loc Ctr is the abbreviation for Location
$ Counter.
$ $ Loc Ctr is the location counter; do not increase the size of the header
$ $ names. spacing for filename at top of listfile
$ $ skips the first three columns
125 "                          "
$ Do not translate.
$ $ spacing for filename at top of listfile
$ $ skips the first three columns
126 "        "
$ Do not translate.
$ $ space before source line
127 "          | "
$ Do not translate.
$ $ space before source line
128 "       %.8x  "
$ Do not translate.
$ $ %.8x is replaced by a number, the location counter.
$ $ special cases
129 "                  "
$ Do not translate.
$ $ special cases
130 "        %.8x  "
$ Do not translate.
$ $ %.8x is replaced by a number, the location counter.
$ $ special cases

131 " %1$-6.6s %2$.8x  "
$ Do not translate.
$ $ %1$-6.6s is replaced by a name, the csect name.
$ $ %2$.8x is replaced by a number, the location counter.
$ $ special cases

132 "file#\tfile name\n"
$ If you translate these heading messages, use a word the same size or smaller.
$ # is the abbreviation for number.
$ $ filetable at end of listing
$ $ headings

133 "%1$3d\t%2$s\n"
$ Do not translate.
$ $ %1$3d is replaced by a number, the file number.
$ $ %2$s is replaced by a name, the file name.
$ $ filetable at end of listing
$ $ headings

134 "%1$-2d %2$6d | "
$ Do not translate.
$ $ %1$-2d is replaced by a number, file number (describes file).
$ $ %2$6d is replaced by a number, line number.
$ $ print object code
$ $ file no., line no.,

135 "        "
$ Do not translate.
$ $ print object code
$ $ file no., line no.,
136 "  ....  "
$ Do not translate.
$ $ print object code
$ $ file no., line no.,

137 "%-8.2x"
$ Do not translate.
$ $ %-8.2x is replaced by a number, object code for instruction.
$ $ print object code
$ $ file no., line no.,

138 "%-8.4x"
$ Do not translate.
$ $ %-8.4x is replaced by a number, object code for instruction.
$ $ print object code
$ $ file no., line no.,

139 "%-8.6x"
$ Do not translate.
$ $ %-8.6x is replaced by a number, object code for instruction.
$ $ print object code
$ $ file no., line no.,

140 "%.8x"
$ Do not translate.
$ $ %.8x is replaced by a number, object code for instruction.
$ $ print object code
$ $ file no., line no.,

141 "1252-141 There is an error in the collect pointer.\n\
\tUse local problem reporting procedures.\n"
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $$This is INTERNAL DEBUGGING ERORR FROM THE ASSEMBLER TO
$ $$A PROGRAMMER WHO IS MAINTAINING THE ASSEMBLER SOFTWARE.
$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ $ internal assembler error in check_zero routine
$ $$ORIGINAL UNIX MESSAGE:"141","error occurred in collect pointer\n",

142 "1252-142 Syntax error.\n"
$ $ error message returned from parsing error when no other error is found
$ $       This message covers both pseudo-ops and instructions, therefore
$ $       a usage statement would be useless.  The user needs to determine
$ $       intent and source line construction, then consult the
$ $       asm language reference to correct the source line.
$ $$ORIGINAL UNIX MESSAGE:"144","Error In Syntax \n",

143 "1252-143 The .function size must be an absolute expression.\n"
$ Do not translate .function.
$ $ size argument to .function pseudo-op must be an absolutute.

144 "1252-144 Warning:  Any initialized data in %s csect of\n\
BS or UC storage class is ignored but\n\
\trequired to establish length.\n"
$ Do not translate csect.
$ Do not translate BS.
$ Do not translate UC.
$ $ Warning message indicating that the statements in the csect
$ $ are used to calculate length and are not used to initialize data.

145 "\nFile# Line#  Name    Loc Ctr   Object Code  PowerPC     Source\n\n" 
$ If you translate the headings in this message, use words the same size or
$ smaller and use the same spacing.
$ # is the abbreviation for Number.
$ Loc Ctr is the abbreviation for Location
$ Counter.
$ $ Loc Ctr is the location counter; do not increase the size of the header
$ $ names. spacing for filename at top of listfile
$ $ skips the first three columns

146 "\nFile# Line#  Name    Loc Ctr   Object Code  POWER       Source\n\n" 
$ If you translate the headings in this message, use words the same size or
$ smaller and use the same spacing.
$ # is the abbreviation for Number.
$ Loc Ctr is the abbreviation for Location
$ Counter.
$ $ Loc Ctr is the location counter; do not increase the size of the header
$ $ names. spacing for filename at top of listfile

147 "1252-147 Invalid .machine assembly mode operand: %s\n\
\tValid values are:"
$ Do not translate .machine.
$ $ When ".machine" is used in the source program, 
$ $ it indicates the assembly
$ $ value. This message indicates a undefined value was used.

148 "1252-148 Invalid .source language identifier operand: %s\n"
$ Do not translate .source.
$ $ When ".source" pseudo-op is used in the source
$ $ program, it indicates the source language type 
$ $ ( e.g. C, Fortran, etc.). This message indicates
$ $ an invalid source language type was used.

149  "1252-149 Instruction %1$s is not implemented in the current assembly mode %2$s.\n"
$ $ instructions that are not in the intersection 
$ $ of POWER and PowerPC are only implemented in a limited 
$ $ assembly modes. This message means that the instruction 
$ $ in the source program is not supported in the indicated
$ $ assembly mode.

150 "1252-150 The first operand value of %d is not valid for PowerPC.\n\
\tA BO field of 6, 7, 14, 15, or greater than 20 is not valid.\n"
$ Do not translate PowerPC.
$ Do not transalte BO.
$ $ In Branch Conditional instructions,
$ $ the first operand is BO field.  If the input
$ $ value is outside the required values, this message will be 
$ $ generated.

151 "1252-151 This instruction form is not valid for PowerPC.\n\
\tThe register used in operand two must not be zero and\n\
\tmust not be the same as the register used in operand one.\n"
$ Do not translate PowerPC.
$ $ In Update Form of Fixed-Point Load 
$ $ instructions, PowerPC architecture requires that 
$ $ RA not be equal to zero and RA not be equal
$ $ to RT. If the requirements are violated, this message
$ $ will be generated.

152 "1252-152 Internal error related to the source program domain.\n\
\tDepending upon where you acquired this product, contact\n\
\tyour service representative or your approved supplier.\n"
$ $ This message indicates an internal code bug of the Assembler.
$ $ Any invalid instruction in a source program will be caught in
$ $ the earlier error check. Therefore, if any invalid instruction
$ $ passes the error check and creates a invalid source program
$ $ domain, there must be bugs in the Assembler.

153  "1252-153 Warning: Instruction %s functions differently between POWER and PowerPC.\n"
$ Do not translate POWER.
$ Do not translate PowerPC.
$ $ Warning messages are not displayed unless the -w option from
$ $ the command line indicate that the user wants to see these
$ $ messages. 
$ $ There are certain instructions that have the same opcode
$ $ in POWER and PowerPC architectures, but are functionally 
$ $ defined in different ways. This message is used to 
$ $ give the warning if the assembly mode is "com" and 
$ $ these instructions are used.

154 "1252-154 The second operand is not valid. For 32-bit\n\
\timplementations, the second operand must have a value of zero.\n"
$ $ In the fixed-point compare instructions, the value in the L
$ $ field must be zero. For "mtsri" instruction, if it is used
$ $ in the PowerPC assembly mode type, the second operand ( i.e.
$ $ the RA ) must be zero. Otherwise, the instruction form
$ $ is invalid.

155 "1252-155 Displacement must be divisible by 4.\n"
$ $ If an instruction has DS form, its 16-bit signed displacement 
$ $ value must be divisible by 4, otherwise, this message 
$ $ is generated.  

156 "1252-156 The sum of operands 3 and 4 must be less than 33.\n"
$ $ When some extended mnemonics for Word Rotate and shift 
$ $ instructions are converted to the base instruction
$ $ The values of argment 3 and 4 are added to calculate the SH field,
$ $ MB or ME field. Since these fields are 5-bit in length,  
$ $ then the sum of argment 3 and 4 must not be greater than 
$ $ 32. 

157 "1252-157 The value of operand 3 must be greater\n\
\tthan or equal to the value of operand 4.\n"
$ $ When some extended mnemonics for Word Rotate and shift
$ $ instructions are converted to the base instruction,
$ $ The value of operand 4 is subtracted from the value of
$ $ operand 3 to get ME or MB field. The result must be positive. 
$ $ Otherwise, this message is generated.

158 "1252-158 Warning: Special-purpose register number 6 is used\n\
\tto designate the DEC register when the assembly mode is %s.\n"
$  Do not translate DEC 
$ $ This is a warning message reported when "mfdec" instructions is used
$ $ and the assembly mode is "any" . DEC encoding in "mfdec"
$ $ instruction is 6 for POWER and 22 for PowerPC. When the assembly
$ $ mode is "any" or default ( i.e. "com" is used as the mode value)
$ $ the POWER encoding number is used to generate the object code.
$ $ This warning message is telling the user the fact.

159 "1252-159 The d(r) format is not valid for operand %d.\n"
$ Do not translate d(r).
$ $ The message indicates an assembly programming error. The d(r) 
$ $ format is used in the place that a register number is required.

160  "1252-160 Warning: A hash code value should be 10 bytes long.\n"
$ $ When the .hash pseudo-op is used, the second operand, StringConstant,
$ $ gives the actual hash code value. This value should contains a 2-byte
$ $ language ID, a 4-byte general hash, and a 4-byte language hash. So
$ $ The hash code value should be 10-byte long. If the value length
$ $ is not 10-byte and '-w' flag is used, this warning will appear.

161 "1252-161 A system problem occurred while processing file %s\n"
$ $ Problem developed dynamically with system i/o.  This is
$ $ a message produced by the assembler indicating
$ $ fwrite, putc, or fclose error.

162 "1252-162 Invalid -m flag assembly mode operand: %s.\n\
\tValid values are:"
$ Do not translate -m.
$ $ When an invalid assembly mode is entered in the command line,
$ $ this message is reported. The Assembler will also list the valid
$ $ assembly mode  values, but they are not part of this message.

163 "1252-163 The first operand's value (%d) is not valid for PowerPC.\n\
\tThe third bit of the BO field must be one for\n\
\tthe Branch-Conditional-to-Count-Register instruction.\n"
$ Do not translate PowerPC.
$ Do not translate BO.
$ $ In Branch Conditional to Count Register instructions, 
$ $ if the third bit of the BO field is zero, the instruction
$ $ form is invalid and this message will be generated.

164 "1252-164 This instructions form is not valid for PowerPC.\n\
\tRA, and RB if present in the instruction, cannot be in the range\n\
\t of registers to be loaded. Also, RA=RT=0 is not allowed.\n"
$ Do not translate PowerPC.
$ DO not translate RA.
$ DO not translate RB.
$ DO not translate RT.
$ $ In Multiple Register Load instructions, PowerPC
$ $ requires that RA, and RB if present in the instruction
$ $ format, not be in the range of registers to be loaded.
$ $ Also RA=RT=0 is not allowed.
$ $ If the requirements are violated, this message
$ $ will be generated.

165 "1252-165 The value of the first operand must be zero for PowerPC.\n"
$ Do not translate PowerPC.
$ $ In system call instructions, the first operand is SV field. 
$ $ It must be zero. Otherwise this message will be generated.

166 "1252-166 This instruction form is not valid for PowerPC.\n\
\tThe register used in operand two must not be zero.\n"
$ Do not translate PowerPC.
$ $ For update form of Fixed-point store instructions and Floating-point
$ $ load and store instructions, PowerPC requires RA != 0
$ $ Otherwise the instruction form is invalid. 

167 "1252-167 Specify a name with the -%c flag.\n"
$ $ Syntax error message. Command line options -n, -o
$ $ require a filename as a parameter. The option -m 
$ $ requires a mode name as a parameter. The required name
$ $ is missing from the
$ $ command line.  The user must provide a filename
$ $ for command line options -n or -o; and provide a mode 
$ $ name for option -m.
$ $ This message replaces message 035.
$ $$ORIGINAL UNIX MESSAGE:
$ $$"035","Filename argument to -%c missing on Command Line\n",

168 "1252-168 %s is not a recognized flag.\n"
$ $ An invalid option flag was entered on the 
$ $ command line.
$ $ This  message replaces message 036.
$ $$ORIGINAL UNIX MESSAGE:"036","Unknown keyword option %s on Command Line\n",

169 "1252-169 Only one input file is allowed.\n"
$ $ On the command line, only one input source file is 
$ $ allowed. 
$ $ This message replaces message 037.
$ $$ORIGINAL UNIX MESSAGE:"037","Only one input file allowed\n"

170 "1252-170 Usage: as -l[ListFile] -s[ListFile] -n Name -o ObjectFile\n\
\t\t\t[-w|-W] -x[XCrossFile] -u -m ModeName [InputFile]\n"
$ Do not translate as, -l, -s, -n, -o, -w, -W, -u, -x, -u, -m
$ $ This is a usage message. It shows the correct syntax of
$ $ the assembler command  line.
$ $ ListFile is an abbreviation for "Listing File"
$ $ ObjectFile is an abbreviation for "Object File"
$ $ XCrossFile is an abbreviation for "Symbol Cross-reference File"
$ $ InputFile is an abbreviation for "Input File"

171 "1252-171 The displacement must be greater than or equal to\n\
\t%1$d and less than or equal to %2$d.\n"
$ $$The programmer should insure that the displacement value
$ $$falls within these limits.
$ $ For 16-bit displacement, the limits are 32767 and -32768.
$ $ syntax error message.  Several types of instructions
$ $ are checked for a variety of ranges. 
$ $ This message replaces message 106.
$ $$ORIGINAL UNIX MESSAGE:"106","displacement out of range\n"


172 "1252-172 The .extern symbol is not valid.\n\
\tCheck that the .extern name is a relocatable expression.\n"
$ Do not translate .extern.
$ $ The .extern name must be a relocatable expression.
$ $ This syntax error message appears when the
$ $ .extern name is absolute(constant/integer),
$ $ tocrelative(.tc label/name)
$ $ tocofrelative(.tocof label/name), or unknow(undefined
$ $ in pass 2); because, these are NON-relocatable expressions.
$ $ .dsect names or labels contained within a .dsect 
$ $ are NOT relocatable.  Also, .set names are NOT relocatable.
$ $ The user must verify that the .globl
$ $ name is a relocatable expression.
$ $ If not defined, the name is assumed external.
$ $ Relocatable expressions include label names, .lcomm/
$ $ .comm names, and .csect names.

173 "1252-173 Warning: The immediate value for instruction %1$s is %2$d\n\
\tIt may not be portable to a 64-bit machine if this value is to be treated\n\
\tas an unsigned value.\n"
$ $ The addis and lis immediate value field is defined as SI which should be
$ $ a valid value range of ( -32768 to 32767). However to keep the
$ $ compatibility with cau instruction, this restriction is expanded to
$ $ (-65536 tp 65535). It should have no problem for a 32-bit machine
$ $ because there is no way to go for the sign bit. It will have
$ $ problem for 64-bit machine because sign extension will propagate 
$ $ across the upper 32 bits of the register.

174 "1252-174 Too many .machine \"push\" instructions without \n\
\tcorresponding .machine \"pop\" instructions.\n"
$ Do not translate .machine
$ Do not translate pop
$ Do not translate push
$ $ The assembly stack has the maximun length of 100. If more than 100
$ $ push commands are issued without a pop, this message is reported.

175 "1252-175 A .machine \"pop\" is seen without a matching \n\
\t.machine \"push\".\n"
$ Do not translate .machine
$ Do not translate pop
$ Do not translate push
$ $ If the assembly stack is empty and a pop operation is issued, this
$ $ message is reported.

176 "1252-176  The .ref pseudo-op cannot appear in section %s.\n"
$ Do not translate .ref.
$ $ the .ref pseudo-op can not appear in a dsect 
$ $ or a csect with a storage mapping class of BS and UC. 
$ $ otherwise, this message will report

177 "1252-177 The operand of the .ref %s is not a relocatable symbol.\n"
$  Do not translate .ref.
$ $ If the operand of .ref is a non-relocatable item:
$ $ dsect names and labels; csect names and labels 
$ $ with with a storage mapping class of BS and UC; 
$ $ .set operand which represents a non-relocatable
$ $ item; or some constant values,  this
$ $ message will report.

178 "1252-178 The maximum number of sections or symbols that an expression\n\
\tcan refer to has been exceeded.\n"
$ $ The maximum number of sections or symbols that an expression can refer 
$ $ is 50. This message will be reported if more than 50 sections
$ $ or more than 50 symbols are referred in an expression.

179 "\nFile# Line#  Mode Name    Loc Ctr   Object Code         Source\n\n"
$ If you translate the headings in this message, use words the same size or
$ smaller and use the same spacing.
$ # is the abbreviation for Number.
$ Loc Ctr is the abbreviation for Location
$ Counter.
$ $ Loc Ctr is the location counter; do not increase the size of the header
$ $ names. spacing for filename at top of listfile
$ $ skips the first three columns
$ $ This message replaces message 124

180 "\nFile# Line#  Mode Name    Loc Ctr   Object Code  PowerPC     Source\n\n"
$ Do not translate PowerPC
$ If you translate the headings in this message, use words the same size or
$ smaller and use the same spacing.
$ # is the abbreviation for Number.
$ Loc Ctr is the abbreviation for Location
$ Counter.
$ $ Loc Ctr is the location counter; do not increase the size of the header
$ $ names. spacing for filename at top of listfile
$ $ skips the first three columns
$ $ This message replaces message 145

181 "\nFile# Line#  Mode Name    Loc Ctr   Object Code  POWER       Source\n\n"
$ Do not translate POWER 
$ If you translate the headings in this message, use words the same size or
$ smaller and use the same spacing.
$ # is the abbreviation for Number.
$ Loc Ctr is the abbreviation for Location
$ Counter.
$ $ Loc Ctr is the location counter; do not increase the size of the header
$ $ names. spacing for filename at top of listfile
$ $ skips the first three columns
$ $ This message replaces message 146

182 "1252-182 Warning: Storage mapping class %s is not valid for .comm\n\
\tpseudo-op. RW is used as the storage mapping class for the object code.\n"
$ Do not translate .comm
$ $ valid storage mapping classes are TD, RW, BS and UC for 
$ $ .comm pseudo-op. If other valid values are used, this 
$ $ message will be reported and RW is used for the common block.

183 "1252-183 TD csect only allowed inside \".toc\" scope\n"
$ Do not translate TD
$ Do not translate csect
$ DO not transalte .toc
$ $ if a csect with a SMC as TD is used without issuing
$ $ a .toc first, this message will be reported.

184 "1252-184 TOC anchor must be defined to use a TOC-relative\n\
\treference to %s. Include a .toc pseudo op in the source.\n"
$ Do not translate TOC
$ $ if the TOC anchor did not exist and a TOC-relative reference
$ $ is used, this error will be reported. 
$ $ This situation happens when an external TD symbol is
$ $ defined using .extern..[TD] and this symbol is used 
$ $ as a displacement in a D-form instruction  but there is
$ $ no .toc in the source program.

185 "1252-185 Warning: Operand is missing from pseudo-op.\n"
$ $ if the required operand in the certain pseudo-op: 
$ $ .long, .short, .byte, .vbyte or .tc is missed, 
$ $ this warning message will be reported.  
