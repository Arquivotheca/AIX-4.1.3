*/* @(#)62	1.6  src/bos/usr/ccs/bin/as/POWER/instrs.ops.ppc_pw, cmdas, bos411, 9428A410j 3/10/94 10:31:55*/
*/*
* * COMPONENT_NAME: (CMDAS) Assembler and Macroprocessor 
* *
* * FUNCTIONS:  instrs.ops.ppc_pw
*                                                                     
*         V4.1 instrustion set of the intersection of POWER and PowerPC    
*         architectures.  It also contains the cross reference        
*         mnemonics for both architecture if they share the same      
*         opcode.                                                     
*                                                                     
* *       Refer to "instrs.ops.forms" for the summary of all the
* *       form definitions and the input and output format descriptions.
*
* * ORIGINS:  3, 27
* *
* * This module contains IBM CONFIDENTIAL code. -- (IBM
* * Confidential Restricted when combined with the aggregated
* * modules for this product)
* *                  SOURCE MATERIALS
* * (C) COPYRIGHT International Business Machines Corp. 1985, 1994
* * All Rights Reserved
* *
* * US Government Users Restricted Rights - Use, duplication or
* * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
* */
***********************************************************************
*    Instruction Definition format:
*
*    mn_PPC  if  of  opc-exopc-rc/lk-ov-frt-fra-ab-frb  mn_PW
*
*   where
*      mn_PPC = op code mnenmonic for PowerPC architecture.
*      if = input-format descriptor for each operand of instruction
*      of = output-format descriptor for placing operands into the
*           generated instruction
*      op  = opcode in decimal (0-63) bits 0-5 of instruction
*      ext = extended op code in decimal - bits 22-30 of inst
*      rc/lk = Rc or LK bit (0/1) - bit 31 of instruction
*              (Rc=record bit, LK=link bit)
*      ov  = OV bit (0/1) - bit 21 of instruction
*              (enable overflow)
*      frt = fixed operand 1 field in decimal (0-31) - bits 6-10
*      fra = fixed operand 2 field in decimal (0-31) - bits 11-15
*      ab  = AA bit (0/1) - bit 30 of instruction ... overlays
*              exopc field (ab=Absolute/relative)
*      frb = fixed operand 3 field in decimal (0-31) - bits 16-20
*      mn_PW  = POWER mnemonics that shares the same opcode with
*                PowerPC.
* ---------------------------------------------------------------------
*| op  | frt | fra | frb |ov|            ext                    |rc/lk |
* ---------------------------------------------------------------------
* 0     6     11    16    21 22                            | ab | 31
*                                                           ----
*                                                           30
*
***********************************************************************
#    V4.0  *** Version Id for assembler listing                       *
*               CHAR(6) no imbedded blanks                            *
*
*   Note that Version ID only exists here because this file is 
*   likely to be used by every target environment. 
*   When concatenating the input file, this file should always be
*   the first one.
***********************************************************************
*** - *** Type indicator: Bit map for POWER and PowerPC intersection
*                          instructions is 0x807F 
% 32895
***********************************************************************
*
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*  D-Form ( output format ) instructions  
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*
***********************************************************************
*  D-Form instructions                                                *
***********************************************************************
*
*   Instruction Format: D-FORM    (Displacement ..signed..)
*
*       ------------------------------------------------
*      |OPCODE|   OP1   |   RA   |          D           |
*       ------------------------------------------------
*       0    5 6      10 11    15 16                  31
*
*                 OP1 = RT | RS | FRT | FRS
*
*   Assembler Format:
*
*       mnemonic  OP1,D(RA|0)
*
***********************************************************************
*
**********************************
**** /*** Storage Access ***/ ****
**********************************
*       mnem  |input     |out |op code value
*22    lbz    rt,d(ra)       Load Byte and Zero
       lbz        rs       ds   34
*2A    lha    rt,d(ra)       Load Half Algebraic
       lha        rs       ds   42
*28    lhz    rt,d(ra)       Load Half and Zero
       lhz        rs       ds   40
*20    l      rt,d(ra)       Load
       lwz          rs       ds   32  l
*26    stb    rs,d(ra)       Store Byte
       stb        rs       ds   38
*2C    sth    rs,d(ra)       Store Half
       sth        rs       ds   44
*24    st     rs,d(ra)       Store
       stw         rs       ds   36  st
*23    lbzu   rt,d(ra)       Load Byte and Zero with Update
       lbzu       rB       ds   35
*2B    lhau   rt,d(ra)       Load Half Algebraic with Update
       lhau       rB       ds   43
*29    lhzu   rt,d(ra)       Load Half and Zero with Update
       lhzu       rB       ds   41
*21    lu     rt,d(ra)       Load with Update
       lwzu         rB       ds   33  lu
*27    stbu   rs,d(ra)       Store Byte with Update
       stbu       rA       ds   39
*2D    sthu   rs,d(ra)       Store Half with Update
       sthu       rA       ds   45
*25    stu    rs,d(ra)       Store and Update Address
       stwu        rA       ds   37  stu
************************************
**** /*** Rotate and Shift ***/ ****
************************************
*2E    lm     rt,d(ra)       Load Multiple
       lmw         rC       ds   46  lm
*2F    stm    rs,d(ra)       Store Multiple
       stmw        rs       ds   47  stm
*************************************************
**** /*** Floating Point Load and Store ***/ ****
*************************************************
*30    lfs    frt,d(ra)      Load Floating Point Single
       lfs        rs       ds   48
*32    lfd    frt,d(ra)      Load Floating Point Double
       lfd        rs       ds   50
*31    lfsu   frt,d(ra)      Load FP Single with Update
       lfsu       rA       ds   49
*33    lfdu   frt,d(ra)      Load FP Double with Update
       lfdu       rA       ds   51
*34    stfs   frs,d(ra)      Store Floating Point Single
       stfs       rs       ds   52
*36    stfd   frs,d(ra)      Store Floating Point Double
       stfd       rs       ds   54
*35    stfsu  frs,d(ra)      Store FP Single with Update
       stfsu      rA       ds   53
*37    stfdu  frs,d(ra)      Store FP Double with Update
       stfdu      rA       ds   55
*
***************************************************
**** /*** Instruction Address Computation ***/ ****
***************************************************
*0E    cal    rt,d(ra)       Compute Address Lower
       cal        rs       ds   14
***********************************************************************
*       SI-Form instructions
***********************************************************************
*
*       Instruction Format: SI-FORM  (Signed Immediate)
*
*       ------------------------------------------------
*      |OPCODE|   OP1   |   RA   |         SI           |
*       ------------------------------------------------
*       0    5 6      10 11    15 16                  31
*
*                 OP1 = RT | TO | BF
*                 SI  = D
*
*   Asm Formats:
*
*       mnemonic  OP1,RA,SI
*
***********************************************************************
****************************************
**** /*** Arithmetic & Compare ***/ ****
****************************************
*       mnem  |input     |out |op code value
*0E    addi    rt,ra,si      Add immediate
       addi        rri       di   14
*** extended MN for addi
*0E    li     rt,i           Load Immediate
       li         ri         dt   14  lil
**    lil    rt,i    Load Immediate Lower is extended MN for cal
*
*** extended MN for addi
       la         rs       ds   14
       subi       rr7      dm   14
*
*0F    addis    rt,ra,ui       Add immediate shifted
       addis        rrI      di   15
*** extended MN for addis
       lis          rI       dt   15
       subis        rr7      dm   15
*
*0C    addic     rt,ra,si       Add Immediate (no cr set)
       addic         rri      di   12  ai
*** extended MN for addic, which is Xref of si ( Extended MN of ai)
*0C    subic     rt,ra,si       Subtract Immediate (no cr set)
       subic         rr7      dm   12  si
*0D    addic.    rt,ra,si       Add Immediate and Record
       addic.        rri      di   13  ai.
*** extended MN for addic., which is Xref of si.( Extended MN of ai.)
*0D    subic.    rt,ra,si       Subtract Immediate and Record
       subic.         rr7      dm   13  si.
*08    sfi    rt,ra,si       Subtract from Immediate
       subfic       rri      di   08  sfi
*07    muli   rt,ra,si       Multiply Immediate
       mulli       rri      di   07  muli
*
*0B    cmpi   bf,ra,si       Compare Immediate (POWER format)
*0B    cmpi   bf,l,ra,si     Compare Immediate (PowerPC format)
       cmpi       f?&bri      da   11
*
*** extended MN for cmpi
*0B    cmpwi   bf,ra,si       Compare Immediate (PowerPC format)
*0B    cmpwi   ra,si          Compare Immediate (PowerPC format)
       cmpwi      ?&fri      dh   11
*********************************************
**** /*** Supervisor Linkage & Trap ***/ ****
*********************************************
*       mnem  |input     |out |op code value
*03    ti     to,ra,i        Trap Immediate
       twi         tri      di   03  ti
*** Extended MN for twi
       twlgti      ri       dz   03-000-0-0-01  tlgti
       twllti      ri       dz   03-000-0-0-02  tllti
       tweqi       ri       dz   03-000-0-0-04  teqi
       twlgei      ri       dz   03-000-0-0-05  tlgei
       twllei      ri       dz   03-000-0-0-06  tllei
       twgti       ri       dz   03-000-0-0-08  tgti
       twgei       ri       dz   03-000-0-0-12  tgei
       twlti       ri       dz   03-000-0-0-16  tlti
       twlei       ri       dz   03-000-0-0-20  tlei
       twnei       ri       dz   03-000-0-0-24  tnei
*
       twnli       ri       dz   03-000-0-0-12  tnli
       twngi       ri       dz   03-000-0-0-20  tngi
       twlnli      ri       dz   03-000-0-0-05  tlnli
       twlngi      ri       dz   03-000-0-0-06  tlngi
*
       twlnei      ri       dz   03-000-0-0-03  tlnei
***********************************************************************
*       UI-Form instructions
***********************************************************************
*
*       Instruction Format: UI-FORM  (Unsigned Immediate)
*
*       ------------------------------------------------
*      |OPCODE|  OP1    |   RA   |         UI           |
*       ------------------------------------------------
*       0    5 6      10 11    15 16                  31
*
*                 UI = UL
*                 OP1 = RT | BF
*
*   Asm Formats:
*
*       mnemonic  RT,RA,UI
*
***********************************************************************
***************************************************
**** /*** Instruction Address Computation ***/ ****
***************************************************
*       mnem  |input     |out |op code value
*0F    cau    rt,ra,ui       Compute Address Upper
       cau        rru      du   15
**  extended MN for cau
*0F    liu    rt,ui          Load Immediate Upper
       liu        ru       dt   15
***************************************************
**** /*** Compare ***/ ****
***************************************************
*0A    cmpli  bf,ra,ui        Compare Logical Immediate (POWER format)
*0A    cmpli  bf,l,ra,ui      Compare Logical Immediate (PowerPC format)
       cmpli      f?&bru      da   10
*
*** extended MN for cmpli
*0A    cmplwi  bf,ra,ui        Compare Logical Immediate (PowerPC format)
*0A    cmplwi  ra,ui           Compare Logical Immediate (PowerPC format)
       cmplwi     ?&fru      dh   10
*
***********************************************************************
*       UL-Form instructions
***********************************************************************
*
*       Instruction Format: UL-FORM  (Unsigned Logical Immediate)
*
*       ------------------------------------------------
*      |OPCODE|   RS    |   RA   |         UL           |
*       ------------------------------------------------
*       0    5 6      10 11    15 16                  31
*
*                 UL = UL
*
*   Asm Formats:
*
*       mnemonic  RA,RS,UL
*
*       NOTE: *** Bits 11-15 (RA) is the first assembler operand
*
***********************************************************************
***************************
**** /*** Logical ***/ ****
***************************
*       mnem  |input     |out |op code value
*1C    andil  ra,rs,ul       AND Immediate Lower
       andi.     rru      dr   28  andil.
*1D    andiu  ra,rs,ul       AND Immediate Upper
       andis.     rru      dr   29  andiu.
*18    oril   ra,rs,ul       OR Immediate Lower
       ori       rru      dr   24  oril
*** extended MN for ori
       nop        n       x0   24
*19    oriu   ra,rs,ul       OR Immediate Upper
       oris       rru      dr   25  oriu
*1A    xoril  ra,rs,ul       XOR Immediate Lower
       xori      rru      dr   26  xoril
*1B    xoriu  ra,rs,ul       XOR Immediate Upper
       xoris      rru      dr   27  xoriu
*
***********************************************************************
*       DS-Form instructions
***********************************************************************
*
*       Instruction Format: DS-FORM  (Disp .. signed, 4 divisible )
*
*       ---------------------------------------------------------
*       |OPCODE|   OP1  |   RA  |         D               | XO  |
*       ---------------------------------------------------------
*       0     5 6     10 11   15 16                     29 30  31
*
*              OP1 = FRT | FRS  
*
*   Assembler Format:
*
*       mnemonic  OP1,D(RA|0)
*
***********************************************************************
*       SC-Form instructions
***********************************************************************
*
*       Instruction Format: SC-FORM  (System Call)
*
*       ------------------------------------------------------
*      |OPCODE| / / / / | / / / /|         BD           |AR|LK|
*       ------------------------------------------------------
*       0    5 6      10 11    15 16                  29 30 31
*
*                                 ----------------------
*       .........................|  FL1  |  LEV   | FL2 |.....
*                                 ----------------------
*                                 16   19 20    26 27 29
*
*   Asm Formats:
*
*       mnemonic  BD
*       mnemonic  LEV,FL1,FL2
*
***********************************************************************
*********************************************
**** /*** Supervisor Linkage  ***/ ****
*********************************************
*11    svca     bd             Supervisor Call (AR=1 LK=0)
       svca      v        dc   17-000-0-0-0-0-1
*
*       mnem  |input     |out |op code value
*11    sc                      Supervisor Call (AR=1 LK=0)
       sc        n        x0   17-000-0-0-0-0-1
*
***********************************************************************
*       B-Form instructions
***********************************************************************
*
*       Instruction Format: B-FORM  (Branch Displacement)
*
*       ------------------------------------------------------
*      |OPCODE|   BO    |   BI   |         BD           |AR|LK|
*       ------------------------------------------------------
*       0    5 6      10 11    15 16                  29 30 31
*
*                 BD = d
*
*   Asm Formats:
*
*       mnemonic  BO,BI,BD
*       ext mnem  BI,BD
*       ext mnem  BD
*
*       Note: *** BO = type,  BI = condition,  BD = branch displacement
*
***********************************************************************
****************************
**** /*** Branches ***/ ****
****************************
*       mnem  |input     |out |op code value
*10    bc     BO,BI,d        Branch Condition Relative        (AR=0 LK=0)
       bc         ocd      db   16-000
       bc+	ocd	dk	16-000
       bc-	ocd	dl	16-000
*10    bcl    BO,BI,d        Branch Condition and Link Rel    (AR=0 LK=1)
       bcl        ocd      db   16-000-1
       bcl+	ocd	dk	16-000-1
       bcl-	ocd	dl	16-000-1
*10    bca    BO,BI,d        Branch Condition Absolute        (AR=1 LK=0)
       bca        ocp      dp   16-000-0-0-0-0-1
       bca+	ocp	dk	16-000-0-0-0-0-1
       bca-	ocp	dl	16-000-0-0-0-0-1
*10    bcla   BO,BI,d        Branch Condition and link Abs    (AR=1 LK=1)
       bcla       ocp      dp   16-000-1-0-0-0-1
       bcla+	ocp	dk	16-000-1-0-0-0-1
       bcla-	ocp	dl	16-000-1-0-0-0-1
*
*       Extended Branch Condition Mnemonics
*
*       Many extended mnemonics which have implied and/or optional field
*
*      bxxxx  BI,d        BO implied
*      bxxxx  <BI>,d      BO implied, BI optional, implied 0 if omitted
*      bxxxx  d           BO and BI implied
*
*       All extended branch ops formed using Cohen's algorithm of 3/11/8
*
*----- Simple Branch ---------   
*
******* Branch Relative
*
*       Branch and Decrement Count Register Relative
*
*10    bdz    BI,d    Decrement CTR and Branch if CTR = 0         (AR=0 LK=0)
*10    bdz    d       Decrement CTR and Branch if CTR = 0         (AR=0 LK=0)
       bdz        y?0cd        df   16-000-0-0-18-00
       bdz+	y?0cd	dg	16-000-0-0-18-00
       bdz-	y?0cd	dj	16-000-0-0-18-00
*
*10    bdn    BI,d    Decrement CTR and Branch if CTR ^=0          (AR=0 LK=0)
*10    bdn    d       Decrement CTR and Branch if CTR ^=0          (AR=0 LK=0)
       bdnz        y?0cd        df   16-000-0-0-16-00  bdn
       bdnz+	y?0cd	dg	16-000-0-0-16-00
       bdnz-	y?0cd	dj	16-000-0-0-16-00
*
*10    bdnzt    BI,d   branch if ctr !=0 and cond. TRUE     (AR=0 LK=0)
*10    bdnzt       d   branch if ctr !=0 and cond. TRUE     (AR=0 LK=0)
       bdnzt      y?0cd       df   16-000-0-0-08-00
       bdnzt+	y?0cd	dg	16-000-0-0-08-00
       bdnzt-	y?0cd	dj	16-000-0-0-08-00
*10    bdnzf    BI,d   branch if ctr !=0 and cond. FALSE    (AR=0 LK=0)
*10    bdnzf       d   branch if ctr !=0 and cond. FALSE    (AR=0 LK=0)
       bdnzf      y?0cd       df   16-000-0-0-00-00
       bdnzf+	y?0cd	dg	16-000-0-0-00-00
       bdnzf-	y?0cd	dj	16-000-0-0-00-00
*10    bdzt    BI,d   branch if ctr ==0 and cond. TRUE      (AR=0 LK=0)
*10    bdzt       d   branch if ctr ==0 and cond. TRUE      (AR=0 LK=0)
       bdzt      y?0cd       df   16-000-0-0-10-00
       bdzt+	y?0cd	dg	16-000-0-0-10-00
       bdzt-	y?0cd	dj	16-000-0-0-10-00
*10    bdzf    BI,d   branch if ctr ==0 and cond. FALSE     (AR=0 LK=0)
*10    bdzf       d   branch if ctr ==0 and cond. FALSE     (AR=0 LK=0)
       bdzf      y?0cd       df   16-000-0-0-02-00
       bdzf+	y?0cd	dg	16-000-0-0-02-00
       bdzf-	y?0cd	dj	16-000-0-0-02-00
*
*
*       Branch on Condition Register Bit Relative
*10    bbt    BI,d      Branch if Condition Bit True            (AR=0 LK=0)
*10    bbt    d         Branch if Condition Bit True            (AR=0 LK=0)
       bt        y?0cd       df   16-000-0-0-12-00  bbt
       bt+	y?0cd	dg	16-000-0-0-12-00
       bt-	y?0cd	dj	16-000-0-0-12-00
*10    bbf    BI,d      Branch if Condition Bit False           (AR=0 LK=0)
*10    bbf    d         Branch if Condition Bit False           (AR=0 LK=0)
       bf        y?0cd       df   16-000-0-0-04-00  bbf
       bf+	y?0cd	dg	16-000-0-0-04-00
       bf-	y?0cd	dj	16-000-0-0-04-00
*
*    Branch and Decrement Count Register and Link bit set Relative
*10    bdzl   BI,d           Decrement CTR and Branch if CTR = 0 (AR=0 LK=1)
*10    bdzl   d              Decrement CTR and Branch if CTR = 0 (AR=0 LK=1)
       bdzl       y?0cd        df   16-000-1-0-18-00
       bdzl+	y?0cd	dg	16-000-1-0-18-00
       bdzl-	y?0cd	dj	16-000-1-0-18-00
*10    bdnl   BI,d           Decrement CTR and Branch if CTR ^=0 (AR=0 LK=1)
*10    bdnl   d              Decrement CTR and Branch if CTR ^=0 (AR=0 LK=1)
       bdnzl       y?0cd        df   16-000-1-0-16-00  bdnl
       bdnzl+	y?0cd	dg	16-000-1-0-16-00
       bdnzl-	y?0cd	dj	16-000-1-0-16-00
*
*10    bdnztl   BI,d           CTR !=0 and Cond. TRUE         (AR=0 LK=1)
*10    bdnztl      d           CTR !=0 and Cond. TRUE         (AR=0 LK=1)
       bdnztl       y?0cd       df   16-000-1-0-08-00
       bdnztl+	y?0cd	dg	16-000-1-0-08-00
       bdnztl-	y?0cd	dj	16-000-1-0-08-00
*10    bdnzfl   BI,d           CTR != 0 and Cond. FALSE       (AR=0 LK=1)
*10    bdnzfl      d           CTR != 0 and Cond. FALSE       (AR=0 LK=1)
       bdnzfl       y?0cd       df   16-000-1-0-00-00
       bdnzfl+	y?0cd	dg	16-000-1-0-00-00
       bdnzfl-	y?0cd	dj	16-000-1-0-00-00
*10    bdztl   BI,d           CTR ==0 and Cond. TRUE         (AR=0 LK=1)
*10    bdztl      d           CTR ==0 and Cond. TRUE         (AR=0 LK=1)
       bdztl       y?0cd       df   16-000-1-0-10-00
       bdztl+	y?0cd	dg	16-000-1-0-10-00
       bdztl-	y?0cd	dj	16-000-1-0-10-00
*10    bdzfl   BI,d           CTR == 0 and Cond. FALSE       (AR=0 LK=1)
*10    bdzfl      d           CTR == 0 and Cond. FALSE       (AR=0 LK=1)
       bdzfl       y?0cd       df   16-000-1-0-02-00
       bdzfl+	y?0cd	dg	16-000-1-0-02-00
       bdzfl-	y?0cd	dj	16-000-1-0-02-00
*
*
*       Branch on Condition Register Bit and Link bit set  Relative
*10    bbtl   BI,d           Branch if Condition Bit True     (AR=0 LK=1)
       btl       y?0cd       df   16-000-1-0-12-00  bbtl
       btl+	y?0cd	dg	16-000-1-0-12-00
       btl-	y?0cd	dj	16-000-1-0-12-00
*10    bbfl   BI,d           Branch if Condition Bit False    (AR=0 LK=1)
       bfl       y?0cd       df   16-000-1-0-04-00  bbfl
       bfl+	y?0cd	dg	16-000-1-0-04-00
       bfl-	y?0cd	dj	16-000-1-0-04-00
*
*******  Branch Absolute
*
*       Branch and Decrement Count Register Absolute
*
*10    bdza   BI,d           Decrement CTR and Branch if CTR = 0 (AR=1 LK=0)
*10    bdza   d              Decrement CTR and Branch if CTR = 0 (AR=1 LK=0)
       bdza       y?2cp        dn   16-000-0-0-18-00-1
       bdza+	y?2cp	dg	16-000-0-0-18-00-1
       bdza-	y?2cp	dj	16-000-0-0-18-00-1
*10    bdna   BI,d           Decrement CTR and Branch if CTR ^=0 (AR=1 LK=0)
*10    bdna   d              Decrement CTR and Branch if CTR ^=0 (AR=1 LK=0)
       bdnza       y?2cp        dn   16-000-0-0-16-00-1  bdna
       bdnza+	y?2cp	dg	16-000-0-0-16-00-1
       bdnza-	y?2cp	dj	16-000-0-0-16-00-1
*
*10    bdnzta   BI,d          CTR != 0 and Cond. TRUE      (AR=1 LK=0)
*10    bdnzta      d          CTR != 0 and Cond. TRUE      (AR=1 LK=0)
       bdnzta       y?2cp       dn   16-000-0-0-08-00-1
       bdnzta+	y?2cp	dg	16-000-0-0-08-00-1
       bdnzta-	y?2cp	dj	16-000-0-0-08-00-1
*10    bdnzfa   BI,d           CTR != 0 and Cond. False    (AR=1 LK=0)
*10    bdnzfa      d           CTR != 0 and Cond. False    (AR=1 LK=0)
       bdnzfa       y?2cp       dn   16-000-0-0-00-00-1
       bdnzfa+	y?2cp	dg	16-000-0-0-00-00-1
       bdnzfa-	y?2cp	dj	16-000-0-0-00-00-1
*10    bdzta   BI,d           CTR == 0 and Cond. is True   (AR=1 LK=0)
*10    bdzta      d           CTR == 0 and Cond. is True   (AR=1 LK=0)
       bdzta       y?2cp       dn   16-000-0-0-10-00-1
       bdzta+	y?2cp	dg	16-000-0-0-10-00-1
       bdzta-	y?2cp	dj	16-000-0-0-10-00-1
*10    bdzfa   BI,d           CTR == 0 and Cond. False     (AR=1 LK=0)
*10    bdzfa      d           CTR == 0 and Cond. False     (AR=1 LK=0)
       bdzfa       y?2cp       dn   16-000-0-0-02-00-1
       bdzfa+	y?2cp	dg	16-000-0-0-02-00-1
       bdzfa-	y?2cp	dj	16-000-0-0-02-00-1
*
*
*       Branch on Condition Register Bit Absolute
*10    bbta   BI,d           Branch if Condition Bit True        (AR=1 LK=0)
*10    bbta   d              Branch if Condition Bit True        (AR=1 LK=0)
       bta       y?2cp       dn   16-000-0-0-12-00-1  bbta
       bta+	y?2cp	dg	16-000-0-0-12-00-1
       bta-	y?2cp	dj	16-000-0-0-12-00-1
*10    bbfa   BI,d           Branch if Condition Bit False       (AR=1 LK=0)
*10    bbfa   d              Branch if Condition Bit False       (AR=1 LK=0)
       bfa       y?2cp       dn   16-000-0-0-04-00-1  bbfa
       bfa+	y?2cp	dg	16-000-0-0-04-00-1
       bfa-	y?2cp	dj	16-000-0-0-04-00-1
*
*       Branch and Decrement Count Register and Link Absolute
*10    bdzla  BI,d           Decrement CTR and Branch if CTR = 0 (AR=1 LK=1)
*10    bdzla  d              Decrement CTR and Branch if CTR = 0 (AR=1 LK=1)
       bdzla      y?2cp        dn   16-000-1-0-18-00-1
       bdzla+	y?2cp	dg	16-000-1-0-18-00-1
       bdzla-	y?2cp	dj	16-000-1-0-18-00-1
*10    bdnla  BI,d           Decrement CTR and Branch if CTR ^=0 (AR=1 LK=1)
*10    bdnla  d              Decrement CTR and Branch if CTR ^=0 (AR=1 LK=1)
       bdnzla      y?2cp        dn   16-000-1-0-16-00-1  bdnla
       bdnzla+	y?2cp	dg	16-000-1-0-16-00-1
       bdnzla-	y?2cp	dj	16-000-1-0-16-00-1
*
*10    bdnztla   BI,d           CTR != 0 and Cond. is True    (AR=1 LK=1)
*10    bdnztla      d           CTR != 0 and Cond. is True    (AR=1 LK=1)
       bdnztla       y?2cp       dn   16-000-1-0-08-00-1
       bdnztla+	y?2cp	dg	16-000-1-0-08-00-1
       bdnztla-	y?2cp	dj	16-000-1-0-08-00-1
*10    bdnzfla   BI,d           CTR != 0 and Cond. False      (AR=1 LK=1)
*10    bdnzfla      d           CTR != 0 and Cond. False      (AR=1 LK=1)
       bdnzfla       y?2cp       dn   16-000-1-0-00-00-1
       bdnzfla+	y?2cp	dg	16-000-1-0-00-00-1
       bdnzfla-	y?2cp	dj	16-000-1-0-00-00-1
*10    bdztla   BI,d           CTR == 0 and Cond. is True     (AR=1 LK=1)
*10    bdztla      d           CTR == 0 and Cond. is True     (AR=1 LK=1)
       bdztla       y?2cp       dn   16-000-1-0-10-00-1
       bdztla+	y?2cp	dg	16-000-1-0-10-00-1
       bdztla-	y?2cp	dj	16-000-1-0-10-00-1
*10    bdzfla   BI,d           CTR == 0 and Cond. False       (AR=1 LK=1)
*10    bdzfla      d           CTR == 0 and Cond. False       (AR=1 LK=1)
       bdzfla       y?2cp       dn   16-000-1-0-02-00-1
       bdzfla+	y?2cp	dg	16-000-1-0-02-00-1
       bdzfla-	y?2cp	dj	16-000-1-0-02-00-1
*
*
*       Branch on Condition Register Bit and Link Absolute
*10    bbtla  BI,d           Branch if Condition Bit True     (AR=1 LK=1)
*10    bbtla  d              Branch if Condition Bit True     (AR=1 LK=1)
       btla      y?2cp       dn   16-000-1-0-12-00-1  bbtla
       btla+	y?2cp	dg	16-000-1-0-12-00-1
       btla-	y?2cp	dj	16-000-1-0-12-00-1
*10    bbfla  BI,d           Branch if Condition Bit False    (AR=1 LK=1)
*10    bbfla  d              Branch if Condition Bit False    (AR=1 LK=1)
       bfla      y?2cp       dn   16-000-1-0-04-00-1  bbfla
       bfla+	y?2cp	dg	16-000-1-0-04-00-1
       bfla-	y?2cp	dj	16-000-1-0-04-00-1
*
*------- Branch Incorporating conditions ---------
*
*................ BO field is 12 ( Branch if condition true ) or
*................ BO field is 4  (Branch if Condition false )
*
*       Branch Relative
*
*       Branch on Condition Relative
*10    blt    CRi,d          Branch Less Than                 (AR=0 LK=0)
*10    blt    d              Branch Less Than                 (AR=0 LK=0)
       blt        y?0fd    de   16-000-0-0-12-00
       blt+	y?0fd	dg	16-000-0-0-12-00
       blt-	y?0fd	dj	16-000-0-0-12-00
*10    bnl    CRi,d          Branch Not Less Than             (AR=0 LK=0)
*10    bnl    d              Branch Not Less Than             (AR=0 LK=0)
       bnl        y?0fd    de   16-000-0-0-04-00
       bnl+	y?0fd	dg	16-000-0-0-04-00
       bnl-	y?0fd	dj	16-000-0-0-04-00
*10    bge    CRi,d          Branch Not Less Than             (AR=0 LK=0)
*10    bge    d              Branch Not Less Than             (AR=0 LK=0)
       bge        y?0fd    de   16-000-0-0-04-00
       bge+	y?0fd	dg	16-000-0-0-04-00
       bge-	y?0fd	dj	16-000-0-0-04-00
*10    bgt    CRi,d          Branch Greater Than              (AR=0 LK=0)
*10    bgt    d              Branch Greater Than              (AR=0 LK=0)
       bgt        y?0fd    de   16-000-0-0-12-01
       bgt+	y?0fd	dg	16-000-0-0-12-01
       bgt-	y?0fd	dj	16-000-0-0-12-01
*10    bng    CRi,d          Branch Not Greater Than          (AR=0 LK=0)
*10    bng    d              Branch Not Greater Than          (AR=0 LK=0)
       bng        y?0fd    de   16-000-0-0-04-01
       bng+	y?0fd	dg	16-000-0-0-04-01
       bng-	y?0fd	dj	16-000-0-0-04-01
*10    ble    CRi,d          Branch Not Greater Than          (AR=0 LK=0)
*10    ble    d              Branch Not Greater Than          (AR=0 LK=0)
       ble        y?0fd    de   16-000-0-0-04-01
       ble+	y?0fd	dg	16-000-0-0-04-01
       ble-	y?0fd	dj	16-000-0-0-04-01
*10    beq    d              Branch Equal                     (AR=0 LK=0)
*10    beq    CRi,d          Branch Equal                     (AR=0 LK=0)
       beq        y?0fd    de   16-000-0-0-12-02
       beq+	y?0fd	dg	16-000-0-0-12-02
       beq-	y?0fd	dj	16-000-0-0-12-02
*10    bne    d              Branch Not Equal                 (AR=0 LK=0)
*10    bne    CRi,d          Branch Not Equal                 (AR=0 LK=0)
       bne        y?0fd    de   16-000-0-0-04-02
       bne+	y?0fd	dg	16-000-0-0-04-02
       bne-	y?0fd	dj	16-000-0-0-04-02
*10    bso    d              Branch Summary Overflow          (AR=0 LK=0)
*10    bso    CRi,d          Branch Summary Overflow          (AR=0 LK=0)
       bso        y?0fd    de   16-000-0-0-12-03
       bso+	y?0fd	dg	16-000-0-0-12-03
       bso-	y?0fd	dj	16-000-0-0-12-03
*10    bns    d              Branch Not Summary Overflow      (AR=0 LK=0)
*10    bns    CRi,d          Branch Not Summary Overflow      (AR=0 LK=0)
       bns        y?0fd    de   16-000-0-0-04-03
       bns+	y?0fd	dg	16-000-0-0-04-03
       bns-	y?0fd	dj	16-000-0-0-04-03
*
*10    bz     d              Branch Zero                      (AR=0 LK=0)
*10    bz     CRi,d          Branch Zero                      (AR=0 LK=0)
       bz         y?0fd    de   16-000-0-0-12-02
       bz+	y?0fd	dg	16-000-0-0-12-02
       bz-	y?0fd	dj	16-000-0-0-12-02
*10    bnz    d              Branch Not Zero                  (AR=0 LK=0)
*10    bnz    CRi,d          Branch Not Zero                  (AR=0 LK=0)
       bnz        y?0fd    de   16-000-0-0-04-02
       bnz+	y?0fd	dg	16-000-0-0-04-02
       bnz-	y?0fd	dj	16-000-0-0-04-02
**
*
*10    bun    d              Branch unordered          (AR=0 LK=0)
*10    bun    CRi,d          Branch unordered          (AR=0 LK=0)
       bun        y?0fd    de   16-000-0-0-12-03
       bun+	y?0fd	dg	16-000-0-0-12-03
       bun-	y?0fd	dj	16-000-0-0-12-03
*10    bnu    d              Branch Not unordered       (AR=0 LK=0)
*10    bnu    CRi,d          Branch Not unordered       (AR=0 LK=0)
       bnu        y?0fd    de   16-000-0-0-04-03
       bnu+	y?0fd	dg	16-000-0-0-04-03
       bnu-	y?0fd	dj	16-000-0-0-04-03
*
*
*       Branch on Condition and Link Relative
*10    bltl   d              Branch Less Than and Link        (AR=0 LK=1)
*10    bltl   CRi,d          Branch Less Than and Link        (AR=0 LK=1)
       bltl       y?0fd    de   16-000-1-0-12-00
       bltl+	y?0fd	dg	16-000-1-0-12-00
       bltl-	y?0fd	dj	16-000-1-0-12-00
*10    bnll   d              Branch Not Less Than and Link    (AR=0 LK=1)
*10    bnll   CRi,d          Branch Not Less Than and Link    (AR=0 LK=1)
       bnll       y?0fd    de   16-000-1-0-04-00
       bnll+	y?0fd	dg	16-000-1-0-04-00
       bnll-	y?0fd	dj	16-000-1-0-04-00
*10    bgel   d              Branch Not Less Than and Link    (AR=0 LK=1)
*10    bgel   CRi,d          Branch Not Less Than and Link    (AR=0 LK=1)
       bgel       y?0fd    de   16-000-1-0-04-00
       bgel+	y?0fd	dg	16-000-1-0-04-00
       bgel-	y?0fd	dj	16-000-1-0-04-00
*10    bgtl   d              Branch Greater Than and Link     (AR=0 LK=1)
*10    bgtl   CRi,d          Branch Greater Than and Link     (AR=0 LK=1)
       bgtl       y?0fd    de   16-000-1-0-12-01
       bgtl+	y?0fd	dg	16-000-1-0-12-01
       bgtl-	y?0fd	dj	16-000-1-0-12-01
*10    bngl   d              Branch Not Greater Than and Link (AR=0 LK=1)
*10    bngl   CRi,d          Branch Not Greater Than and Link (AR=0 LK=1)
       bngl       y?0fd    de   16-000-1-0-04-01
       bngl+	y?0fd	dg	16-000-1-0-04-01
       bngl-	y?0fd	dj	16-000-1-0-04-01
*10    blel   d              Branch Not Greater Than and Link (AR=0 LK=1)
*10    blel   CRi,d          Branch Not Greater Than and Link (AR=0 LK=1)
       blel       y?0fd    de   16-000-1-0-04-01
       blel+	y?0fd	dg	16-000-1-0-04-01
       blel-	y?0fd	dj	16-000-1-0-04-01
*10    beql   d              Branch Equal and Link            (AR=0 LK=1)
*10    beql   CRi,d          Branch Equal and Link            (AR=0 LK=1)
       beql       y?0fd    de   16-000-1-0-12-02
       beql+	y?0fd	dg	16-000-1-0-12-02
       beql-	y?0fd	dj	16-000-1-0-12-02
*10    bnel   d              Branch Not Equal and Link        (AR=0 LK=1)
*10    bnel   CRi,d          Branch Not Equal and Link        (AR=0 LK=1)
       bnel       y?0fd    de   16-000-1-0-04-02
       bnel+	y?0fd	dg	16-000-1-0-04-02
       bnel-	y?0fd	dj	16-000-1-0-04-02
*10    bsol   d              Branch Summary Overflow and Link (AR=0 LK=1)
*10    bsol   CRi,d          Branch Summary Overflow and Link (AR=0 LK=1)
       bsol       y?0fd    de   16-000-1-0-12-03
       bsol+	y?0fd	dg	16-000-1-0-12-03
       bsol-	y?0fd	dj	16-000-1-0-12-03
*10    bnsl   d              Branch Not Summary Overflow and L(AR=0 LK=1)
*10    bnsl   CRi,d          Branch Not Summary Overflow and L(AR=0 LK=1)
       bnsl       y?0fd    de   16-000-1-0-04-03
       bnsl+	y?0fd	dg	16-000-1-0-04-03
       bnsl-	y?0fd	dj	16-000-1-0-04-03
*
*10    bzl    d              Branch Zero and Link             (AR=0 LK=1)
*10    bzl    CRi,d          Branch Zero and Link             (AR=0 LK=1)
       bzl        y?0fd    de   16-000-1-0-12-02
       bzl+	y?0fd	dg	16-000-1-0-12-02
       bzl-	y?0fd	dj	16-000-1-0-12-02
*10    bnzl   d              Branch Not Zero and Link         (AR=0 LK=1)
*10    bnzl   CRi,d          Branch Not Zero and Link         (AR=0 LK=1)
       bnzl       y?0fd    de   16-000-1-0-04-02
       bnzl+	y?0fd	dg	16-000-1-0-04-02
       bnzl-	y?0fd	dj	16-000-1-0-04-02
*
*10    bunl   d              Branch unordered and Link (AR=0 LK=1)
*10    bunl   CRi,d          Branch unordered and Link (AR=0 LK=1)
       bunl       y?0fd    de   16-000-1-0-12-03
       bunl+	y?0fd	dg	16-000-1-0-12-03
       bunl-	y?0fd	dj	16-000-1-0-12-03
*10    bnul   d              Branch Not unordered and L(AR=0 LK=1)
*10    bnul   CRi,d          Branch Not unordered and L(AR=0 LK=1)
       bnul        y?0fd   de   16-000-1-0-04-03
       bnul+	y?0fd	dg	16-000-1-0-04-03
       bnul-	y?0fd	dj	16-000-1-0-04-03
*
*       Branch Absolute
*
*       Branch on Condition Absolute
*10    blta   d              Branch Less Than                 (AR=1 LK=0)
*10    blta   CRi,d          Branch Less Than                 (AR=1 LK=0)
       blta       y?2fp    do   16-000-0-0-12-00-1
       blta+	y?2fp	dg	16-000-0-0-12-00-1
       blta-	y?2fp	dj	16-000-0-0-12-00-1
*10    bnla   d              Branch Not Less Than             (AR=1 LK=0)
*10    bnla   CRi,d          Branch Not Less Than             (AR=1 LK=0)
       bnla       y?2fp    do   16-000-0-0-04-00-1
       bnla+	y?2fp	dg	16-000-0-0-04-00-1
       bnla-	y?2fp	dj	16-000-0-0-04-00-1
*10    bgea   d              Branch Not Less Than             (AR=1 LK=0)
*10    bgea   CRi,d          Branch Not Less Than             (AR=1 LK=0)
       bgea       y?2fp    do   16-000-0-0-04-00-1
       bgea+	y?2fp	dg	16-000-0-0-04-00-1
       bgea-	y?2fp	dj	16-000-0-0-04-00-1
*10    bgta   d              Branch Greater Than              (AR=1 LK=0)
*10    bgta   CRi,d          Branch Greater Than              (AR=1 LK=0)
       bgta       y?2fp    do   16-000-0-0-12-01-1
       bgta+	y?2fp	dg	16-000-0-0-12-01-1
       bgta-	y?2fp	dj	16-000-0-0-12-01-1
*10    bnga   d              Branch Not Greater Than          (AR=1 LK=0)
*10    bnga   CRi,d          Branch Not Greater Than          (AR=1 LK=0)
       bnga       y?2fp    do   16-000-0-0-04-01-1
       bnga+	y?2fp	dg	16-000-0-0-04-01-1
       bnga-	y?2fp	dj	16-000-0-0-04-01-1
*10    blea   d              Branch Not Greater Than          (AR=1 LK=0)
*10    blea   CRi,d          Branch Not Greater Than          (AR=1 LK=0)
       blea       y?2fp    do   16-000-0-0-04-01-1
       blea+	y?2fp	dg	16-000-0-0-04-01-1
       blea-	y?2fp	dj	16-000-0-0-04-01-1
*10    beqa   d              Branch Equal                     (AR=1 LK=0)
*10    beqa   CRi,d          Branch Equal                     (AR=1 LK=0)
       beqa       y?2fp    do   16-000-0-0-12-02-1
       beqa+	y?2fp	dg	16-000-0-0-12-02-1
       beqa-	y?2fp	dj	16-000-0-0-12-02-1
*10    bnea   d              Branch Not Equal                 (AR=1 LK=0)
*10    bnea   CRi,d          Branch Not Equal                 (AR=1 LK=0)
       bnea       y?2fp    do   16-000-0-0-04-02-1
       bnea+	y?2fp	dg	16-000-0-0-04-02-1
       bnea-	y?2fp	dj	16-000-0-0-04-02-1
*10    bsoa   d              Branch Summary Overflow          (AR=1 LK=0)
*10    bsoa   CRi,d          Branch Summary Overflow          (AR=1 LK=0)
       bsoa       y?2fp    do   16-000-0-0-12-03-1
       bsoa+	y?2fp	dg	16-000-0-0-12-03-1
       bsoa-	y?2fp	dj	16-000-0-0-12-03-1
*10    bnsa   d              Branch Not Summary Overflow      (AR=1 LK=0)
*10    bnsa   CRi,d          Branch Not Summary Overflow      (AR=1 LK=0)
       bnsa       y?2fp    do   16-000-0-0-04-03-1
       bnsa+	y?2fp	dg	16-000-0-0-04-03-1
       bnsa-	y?2fp	dj	16-000-0-0-04-03-1
*
*10    bza    d              Branch Zero                      (AR=1 LK=0)
*10    bza    CRi,d          Branch Zero                      (AR=1 LK=0)
       bza        y?2fp    do   16-000-0-0-12-02-1
       bza+	y?2fp	dg	16-000-0-0-12-02-1
       bza-	y?2fp	dj	16-000-0-0-12-02-1
*10    bnza   d              Branch Not Zero                  (AR=1 LK=0)
*10    bnza   CRi,d          Branch Not Zero                  (AR=1 LK=0)
       bnza       y?2fp    do   16-000-0-0-04-02-1
       bnza+	y?2fp	dg	16-000-0-0-04-02-1
       bnza-	y?2fp	dj	16-000-0-0-04-02-1
**
*
*10    buna   d              Branch unordered           (AR=1 LK=0)
*10    buna   CRi,d          Branch unordered           (AR=1 LK=0)
       buna       y?2fp    do   16-000-0-0-12-03-1
       buna+	y?2fp	dg	16-000-0-0-12-03-1
       buna-	y?2fp	dj	16-000-0-0-12-03-1
*10    bnua   d              Branch Not unordered       (AR=1 LK=0)
*10    bnua   CRi,d          Branch Not unordered       (AR=1 LK=0)
       bnua       y?2fp    do   16-000-0-0-04-03-1
       bnua+	y?2fp	dg	16-000-0-0-04-03-1
       bnua-	y?2fp	dj	16-000-0-0-04-03-1
*
*
*       Branch on Condition and Link Absolute
*10    bltla  d              Branch Less Than and Link        (AR=1 LK=1)
*10    bltla  CRi,d          Branch Less Than and Link        (AR=1 LK=1)
       bltla      y?2fp    do   16-000-1-0-12-00-1
       bltla+	y?2fp	dg	16-000-1-0-12-00-1
       bltla-	y?2fp	dj	16-000-1-0-12-00-1
*10    bnlla  d              Branch Not Less Than and Link    (AR=1 LK=1)
*10    bnlla  CRi,d          Branch Not Less Than and Link    (AR=1 LK=1)
       bnlla      y?2fp    do   16-000-1-0-04-00-1
       bnlla+	y?2fp	dg	16-000-1-0-04-00-1
       bnlla-	y?2fp	dj	16-000-1-0-04-00-1
*10    bgela  d              Branch Not Less Than and Link    (AR=1 LK=1)
*10    bgela  CRi,d          Branch Not Less Than and Link    (AR=1 LK=1)
       bgela      y?2fp    do   16-000-1-0-04-00-1
       bgela+	y?2fp	dg	16-000-1-0-04-00-1
       bgela-	y?2fp	dj	16-000-1-0-04-00-1
*10    bgtla  d              Branch Greater Than and Link     (AR=1 LK=1)
*10    bgtla  CRi,d          Branch Greater Than and Link     (AR=1 LK=1)
       bgtla      y?2fp    do   16-000-1-0-12-01-1
       bgtla+	y?2fp	dg	16-000-1-0-12-01-1
       bgtla-	y?2fp	dj	16-000-1-0-12-01-1
*10    bngla  d              Branch Not Greater Than and Link (AR=1 LK=1)
*10    bngla  CRi,d          Branch Not Greater Than and Link (AR=1 LK=1)
       bngla      y?2fp    do   16-000-1-0-04-01-1
       bngla+	y?2fp	dg	16-000-1-0-04-01-1
       bngla-	y?2fp	dj	16-000-1-0-04-01-1
*10    blela  d              Branch Not Greater Than and Link (AR=1 LK=1)
*10    blela  CRi,d          Branch Not Greater Than and Link (AR=1 LK=1)
       blela      y?2fp    do   16-000-1-0-04-01-1
       blela+	y?2fp	dg	16-000-1-0-04-01-1
       blela-	y?2fp	dj	16-000-1-0-04-01-1
*10    beqla  d              Branch Equal and Link            (AR=1 LK=1)
*10    beqla  CRi,d          Branch Equal and Link            (AR=1 LK=1)
       beqla      y?2fp    do   16-000-1-0-12-02-1
       beqla+	y?2fp	dg	16-000-1-0-12-02-1
       beqla-	y?2fp	dj	16-000-1-0-12-02-1
*10    bnela  d              Branch Not Equal and Link        (AR=1 LK=1)
*10    bnela  CRi,d          Branch Not Equal and Link        (AR=1 LK=1)
       bnela      y?2fp    do   16-000-1-0-04-02-1
       bnela+	y?2fp	dg	16-000-1-0-04-02-1
       bnela-	y?2fp	dj	16-000-1-0-04-02-1
*10    bsola  d              Branch Summary Overflow and Link (AR=1 LK=1)
*10    bsola  CRi,d          Branch Summary Overflow and Link (AR=1 LK=1)
       bsola      y?2fp    do   16-000-1-0-12-03-1
       bsola+	y?2fp	dg	16-000-1-0-12-03-1
       bsola-	y?2fp	dj	16-000-1-0-12-03-1
*10    bnsla  d              Branch Not Summary Overflow and L(AR=1 LK=1)
*10    bnsla  CRi,d          Branch Not Summary Overflow and L(AR=1 LK=1)
       bnsla      y?2fp    do   16-000-1-0-04-03-1
       bnsla+	y?2fp	dg	16-000-1-0-04-03-1
       bnsla-	y?2fp	dj	16-000-1-0-04-03-1
*
*10    bzla   d              Branch Zero and Link             (AR=1 LK=1)
*10    bzla   CRi,d          Branch Zero and Link             (AR=1 LK=1)
       bzla       y?2fp    do   16-000-1-0-12-02-1
       bzla+	y?2fp	dg	16-000-1-0-12-02-1
       bzla-	y?2fp	dj	16-000-1-0-12-02-1
*10    bnzla  d              Branch Not Zero and Link         (AR=1 LK=1)
*10    bnzla  CRi,d          Branch Not Zero and Link         (AR=1 LK=1)
       bnzla      y?2fp    do   16-000-1-0-04-02-1
       bnzla+	y?2fp	dg	16-000-1-0-04-02-1
       bnzla-	y?2fp	dj	16-000-1-0-04-02-1
*
*10    bunla  d              Branch unordered and Link (AR=1 LK=1)
*10    bunla  CRi,d          Branch unordered and Link (AR=1 LK=1)
       bunla      y?2fp    do   16-000-1-0-12-03-1
       bunla+	y?2fp	dg	16-000-1-0-12-03-1
       bunla-	y?2fp	dj	16-000-1-0-12-03-1
*10    bnula  d              Branch Not unordered and L(AR=1 LK=1)
*10    bnula  CRi,d          Branch Not Unordered and L(AR=1 LK=1)
       bnula      y?2fp    do   16-000-1-0-04-03-1
       bnula+	y?2fp	dg	16-000-1-0-04-03-1
       bnula-	y?2fp	dj	16-000-1-0-04-03-1
*
*................ BO field is 10 ( Decrement the CTR, branch if CTR = 0 
*                      and the condition if TRUE )
*
*10    bdzlt  d    Decrement CTR and Branch CTR = 0 and less than   (AR=0 LK=0)
       bdzlt      0        de   16-000-0-0-10-00
       bdzlt+	0	dg	16-000-0-0-10-00
       bdzlt-	0	dj	16-000-0-0-10-00
*10    bdzgt  d    Decrement CTR and Branch CTR = 0 and greater than(AR=0 LK=0)
       bdzgt      0        de   16-000-0-0-10-01
       bdzgt+	0	dg	16-000-0-0-10-01
       bdzgt-	0	dj	16-000-0-0-10-01
*10    bdzeq  d    Decrement CTR and Branch CTR = 0 and equal to    (AR=0 LK=0)
       bdzeq      0        de   16-000-0-0-10-02
       bdzeq+	0	dg	16-000-0-0-10-02
       bdzeq-	0	dj	16-000-0-0-10-02
*10    bdzso  d    Decrement CTR and Branch CTR = 0 and summary over(AR=0 LK=0)
       bdzso      0        de   16-000-0-0-10-03
       bdzso+	0	dg	16-000-0-0-10-03
       bdzso-	0	dj	16-000-0-0-10-03
*
*................ BO field is 02 ( Decrement the CTR, branch if CTR = 0 
*                      and the condition if FALSE )
*
*10    bdzle  d    Decrement CTR and Branch CTR = 0 and less/equal  (AR=0 LK=0)
*                                                   ( Not greater than )
       bdzle      0        de   16-000-0-0-02-01
       bdzle+	0	dg	16-000-0-0-02-01
       bdzle-	0	dj	16-000-0-0-02-01
*10    bdzge  d    Decrement CTR and Branch CTR = 0 and greater/equa(AR=0 LK=0)
*                                                   ( Not less than )
       bdzge      0        de   16-000-0-0-02-00
       bdzge+	0	dg	16-000-0-0-02-00
       bdzge-	0	dj	16-000-0-0-02-00
*10    bdzne  d    Decrement CTR and Branch CTR = 0 and not equal   (AR=0 LK=0)
       bdzne      0        de   16-000-0-0-02-02
       bdzne+	0	dg	16-000-0-0-02-02
       bdzne-	0	dj	16-000-0-0-02-02
*10    bdzns  d    Decrement CTR and Branch CTR = 0 and not summ ove(AR=0 LK=0)
       bdzns      0        de   16-000-0-0-02-03
       bdzns+	0	dg	16-000-0-0-02-03
       bdzns-	0	dj	16-000-0-0-02-03
*
*................ BO field is 08 ( Decrement the CTR, branch if CTR != 0 
*                      and the condition if TRUE )
*
*10    bdnlt  d    Decrement CTR and Branch CTR ^=0 and less than   (AR=0 LK=0)
       bdnlt      0        de   16-000-0-0-08-00
       bdnlt+	0	dg	16-000-0-0-08-00
       bdnlt-	0	dj	16-000-0-0-08-00
*10    bdngt  d    Decrement CTR and Branch CTR ^=0 and greater than(AR=0 LK=0)
       bdngt      0        de   16-000-0-0-08-01
       bdngt+	0	dg	16-000-0-0-08-01
       bdngt-	0	dj	16-000-0-0-08-01
*10    bdneq  d    Decrement CTR and Branch CTR ^=0 and equal       (AR=0 LK=0)
       bdneq      0        de   16-000-0-0-08-02
       bdneq+	0	dg	16-000-0-0-08-02
       bdneq-	0	dj	16-000-0-0-08-02
*10    bdnso  d    Decrement CTR and Branch CTR ^=0 and summary over(AR=0 LK=0)
       bdnso      0        de   16-000-0-0-08-03
       bdnso+	0	dg	16-000-0-0-08-03
       bdnso-	0	dj	16-000-0-0-08-03
*
*................ BO field is 00 ( Decrement the CTR, branch if CTR != 0 
*                      and the condition if FLASE )
*
*10    bdnle  d    Decrement CTR and Branch CTR ^=0 and less/equal  (AR=0 LK=0)
*                                                   ( Not greater than )
       bdnle      0        de   16-000-0-0-00-01
       bdnle+	0	dg	16-000-0-0-00-01
       bdnle-	0	dj	16-000-0-0-00-01
*10    bdnge  d    Decrement CTR and Branch CTR ^=0 and greater/equa(AR=0 LK=0)
*                                                   ( Not less than )
       bdnge      0        de   16-000-0-0-00-00
       bdnge+	0	dg	16-000-0-0-00-00
       bdnge-	0	dj	16-000-0-0-00-00
*10    bdnne  d    Decrement CTR and Branch CTR ^=0 and not equal   (AR=0 LK=0)
       bdnne      0        de   16-000-0-0-00-02
       bdnne+	0	dg	16-000-0-0-00-02
       bdnne-	0	dj	16-000-0-0-00-02
*10    bdnns  d    Decrement CTR and Branch CTR ^=0 and not summ ove(AR=0 LK=0)
       bdnns      0        de   16-000-0-0-00-03
       bdnns+	0	dg	16-000-0-0-00-03
       bdnns-	0	dj	16-000-0-0-00-03
*
*
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*       X-Form  (output format) instructions
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*
***********************************************************************
*       X-Form instructions
***********************************************************************
*
*       Instruction Format: X-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  OP1  |  OP2  |  OP3  |       EO       |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21            30 31
*
*              OP1 = RT | RS | FRT | FRS | BF
*              OP2 = RA | FRA
*              OP3 = RB | FRB | NB
*
*   Asm Formats:
*
*       mnemonic  OP1,OP2,OP3         ----- RC=0
*       mnemonic. OP1,OP2,OP3         ----- RC=1
*
***********************************************************************
*
**********************************
**** /*** Storage Access ***/ ****
**********************************
*Opcode = 1F
*       mnem  |input     |out |op code value
*057   lbzx   rt,ra,rb       Load Byte indexed
       lbzx       rrr      x7   31-087
*157   lhax   rt,ra,rb       Load Half Algebraic indexed
       lhax       rrr      x7   31-343
*117   lhzx    rt,ra,rb       Load Half and Zero indexed
       lhzx       rrr      x7   31-279
*316   lhbrx  rt,ra,rb       Load Half Byte Reverse indexed
       lhbrx      rrr      x7   31-790
*017   lx     rt,ra,rb       Load indexed
       lwzx         rrr      x7   31-023  lx
*216   lbrx   rt,ra,rb       Load Byte Reverse indexed
       lwbrx       rrr      x7   31-534  lbrx
*0D7   stbx   rs,ra,rb       Store Byte indexed
       stbx       rrr      x7   31-215
*197   sthx   rs,ra,rb       Store Half indexed
       sthx       rrr      x7   31-407
*396   sthbrx rs,ra,rb       Store Half Byte Reverse indexed
       sthbrx     rrr      x7   31-918
*097   stx    rs,ra,rb       Store indexed
       stwx        rrr      x7   31-151  stx
*296   stbrx  rs,ra,rb       Store Byte Reverse indexed
       stwbrx      rrr      x7   31-662  stbrx
*
*077   lbzux  rt,ra,rb       Load Byte and Zero with Update indexed
       lbzux      rrr      xt   31-119
*177   lhaux  rt,ra,rb       Load Half Algebraic with Update indexed
       lhaux      rrr      xt   31-375
*137   lhzux  rt,ra,rb       Load Half and Zero with Update indexed
       lhzux      rrr      xt   31-311
*037   lux    rt,ra,rb       Load with Update indexed
       lwzux        rrr      xt   31-055  lux
*0F7   stbux  rs,ra,rb       Store Byte with Update indexed
       stbux      rrr      xs   31-247
*1B7*  sthux  rs,ra,rb       Store Half with Update indexed
       sthux      rrr      xs   31-439
*0B7   stux   rs,ra,rb       Store with Update indexed
       stwux       rrr      xs   31-183  stux
****************************************
**** /***    Compares          ***/ ****
****************************************
*       mnem  |input     |out |op code value
*020   cmpl   bf,ra,rb       Compare Logical (POWER format)
*020   cmpl   bf,l,ra,rb     Compare Logical (PowerPC format)
       cmpl       f?&brr      xa   31-032
*** extended MN for cmpl
*020   cmplw  bf,ra,rb       Compare Logical (PowerPC format)
*020   cmplw  ra,rb          Compare Logical (PowerPC format)
       cmplw      ?&frr       xh   31-032
*
*000   cmp    bf,ra,rb       Compare (POWER format)
*000   cmp    bf,l,ra,rb     Compare (PowerPC format)
       cmp        f?&brr      xa   31-000
*** extended MN for cmp
*000   cmpw   bf,ra,rb       Compare (PowerPC format)
*000   cmpw   ra,rb          Compare (PowerPC format)
       cmpw       ?&frr      xh   31-000
*********************************************************
**** /*** Floating Point Arithmetic and Compare ***/ ****
*********************************************************
*Opcode 3F
*       mnem  |input     |out |op code value
*000   fcmpu  bf,fra,frb     Floating Compare
       fcmpu      frr      x7   63-000
*000   fcmpo  bf,fra,frb     Floating Compare
       fcmpo      frr      x7   63-032
************************************
**** /*** Rotate and Shift ***/ ****
************************************
*Opcode 1F
*       mnem  |input     |out |op code value
*215   lsx    rt,ra,rb       Load String
       lswx        rrr      xu   31-533
       lsx        rrr      xu   31-533
*255   lsi    rt,ra,nb       Load String Immediate
       lswi        rrm      xq   31-597  lsi
*295   stsx   rs,ra,rb       Store String
       stswx       rrr      x7   31-661  stsx
*2d5   stsi   rs,ra,nb       Store String Immediate
       stswi       rrm      x7   31-725  stsi
*************************************************
**** /*** Floating Point Load and Store ***/ ****
*************************************************
*       mnem  |input     |out |op code value
*Opcode 1F
*217   lfsx   frt,ra,rb      Load Float Single indexed
       lfsx       rrr      x7   31-535
*257   lfdx   frt,ra,rb      Load Float Double indexed
       lfdx       rrr      x7   31-599
*237   lfsux  frt,ra,rb      Load Float Single with Update indexed
       lfsux      rrr      xs   31-567
*277   lfdux  frt,ra,rb      Load Float Double with Update indexed
       lfdux      rrr      xs   31-631
*297   stfsx  frs,ra,rb      Store Float Single indexed
       stfsx      rrr      x7   31-663
*2D7   stfdx  frs,ra,rb      Store Float Double indexed
       stfdx      rrr      x7   31-727
*2B7   stfsux frs,ra,rb      Store Float Single with Update indexed
       stfsux     rrr      xs   31-695
*2F7   stfdux frs,ra,rb      Store Float Double with Update indexed
       stfdux     rrr      xs   31-759
*********************************************
**** /*** Supervisor Linkage & Trap ***/ ****
*********************************************
*       mnem  |input     |out |op code value
*Opcode = 1F
*004   t      to,ra,rb       Trap
       tw          trr      x7   31-004  t
*** Extended MN for tw
       twlgt       rr       x3   31-004-0-0-01  tlgt
       twllt       rr       x3   31-004-0-0-02  tllt
       tweq        rr       x3   31-004-0-0-04  teq
       twlge       rr       x3   31-004-0-0-05  tlge
       twlle       rr       x3   31-004-0-0-06  tlle
       twgt        rr       x3   31-004-0-0-08  tgt
       twge        rr       x3   31-004-0-0-12  tge
       twlt        rr       x3   31-004-0-0-16  tlt
       twle        rr       x3   31-004-0-0-20  tle
       twne        rr       x3   31-004-0-0-24  tne
*
       twlnl       rr       x3   31-004-0-0-05  tlnl
       twlng       rr       x3   31-004-0-0-06  tlng
       twnl        rr       x3   31-004-0-0-12  tnl
       twng        rr       x3   31-004-0-0-20  tng
*
       twlne       rr       x3   31-004-0-0-03  tlne
*
       trap        n        x0   31-004-0-0-31
*
*0D3   mtsr   sr,ra          Move to segment register
       mtsr       er       xe   31-210
*0B2   mtsri  rs,ra,rb       Move to Segment Register Indirect
       mtsri      rrr      xo   31-242
***********************************************************************
*       XO-Form instructions
***********************************************************************
*
*       Instruction Format: XO-FORM
*
*       ----------------------------------------------------
*      |OPCODE|  OP1  |  OP2  |  OP3  |OV|      EO       |Rc|
*       ----------------------------------------------------
*       0    5 6    10 11   15 16   20 21 22           30 31
*
*              OP1 = RT
*              OP2 = RA
*              OP3 = RB
*              OV  = OV Bit
*
*
*   Asm Formats:
*
*       mnemonic   OP1,OP2,OP3        ---- OV=0 Rc=0
*       mnemonic.  OP1,OP2,OP3        ---- OV=0 Rc=1
*       mnemonicO  OP1,OP2,OP3        ---- OV=1 Rc=0
*       mnemonicO. OP1,OP2,OP3        ---- OV=1 Rc=1
*
***********************************************************************
*
****************************************
**** /*** Arithmetic & Compare ***/ ****
****************************************
*       mnem  |input     |out |op code value
*00A   a      rt,ra,rb       Add
*00A   a.     rt,ra,rb       Add (Rc=1)
*00A   ao     rt,ra,rb       Add and Set Overflow
*00A   ao.    rt,ra,rb       Add and Set Overflow (Rc=1)
       addc          rrr      x7   31-010  a
       addc.         rrr      x7   31-010-1  a.
       addco         rrr      x7   31-010-0-1  ao
       addco.        rrr      x7   31-010-1-1  ao.
*08A   ae     rt,ra,rb       Add Extended
*08A   ae.    rt,ra,rb       Add Extended (Rc=1)
*08A   aeo    rt,ra,rb       Add Extended and set Overflow
*08A   aeo.   rt,ra,rb       Add Extended and set Overflow (Rc=1)
       adde         rrr      x7   31-138  ae
       adde.        rrr      x7   31-138-1  ae.
       addeo        rrr      x7   31-138-0-1  aeo
       addeo.       rrr      x7   31-138-1-1  aeo.
*008   sf     rt,ra,rb       Subtract From
*008   sf.    rt,ra,rb       Subtract From (Rc=1)
*008   sfo    rt,ra,rb       Subtract From and set Overflow
*008   sfo.   rt,ra,rb       Subtract From and set Overflow (Rc=1)
       subfc         rrr      x7   31-008  sf
       subfc.        rrr      x7   31-008-1  sf.
       subfco        rrr      x7   31-008-0-1  sfo
       subfco.       rrr      x7   31-008-1-1  sfo.
***  extended MN for subfc
       subc          rrr      xg   31-008
       subc.         rrr      xg   31-008-1
       subco         rrr      xg   31-008-0-1
       subco.        rrr      xg   31-008-1-1
*
*088   sfe    rt,ra,rb       Subtract From Extended
*088   sfe.   rt,ra,rb       Subtract From Extended (Rc=1)
*088   sfeo   rt,ra,rb       Subtract From Extended and set Overflow
*088   sfeo.  rt,ra,rb       Subtract From Extended and set Ovfl (Rc=1)
       subfe        rrr      x7   31-136  sfe
       subfe.       rrr      x7   31-136-1  sfe.
       subfeo       rrr      x7   31-136-0-1  sfeo
       subfeo.      rrr      x7   31-136-1-1  sfeo.
*10B   muls   rt,ra,rb       Multiply
*10B   muls.  rt,ra,rb       Multiply (Rc=1)
*10B   mulso  rt,ra,rb       Multiply and set Overflow
*10B   mulso. rt,ra,rb       Multiply and set Overflow (Rc=1)
       mullw       rrr      x7   31-235  muls
       mullw.      rrr      x7   31-235-1  muls.
       mullwo      rrr      x7   31-235-0-1  mulso
       mullwo.     rrr      x7   31-235-1-1  mulso.
***************************************************
**** /*** Instruction Address Computation ***/ ****
***************************************************
*       mnem  |input     |out |op code value
*10A   cax    rt,ra,rb       Compute Address indexed
       add        rrr      x7   31-266  cax
       add.       rrr      x7   31-266-1  cax.
       addo       rrr      x7   31-266-0-1  caxo
       addo.      rrr      x7   31-266-1-1  caxo.
*
***********************************************************************
*       XO2-Form instructions
***********************************************************************
*
*       Instruction Format: XO2-FORM
*
*       ----------------------------------------------------
*      |OPCODE|  OP1  |  OP2  | / / / |OV|      EO       |Rc|
*       ----------------------------------------------------
*       0    5 6    10 11   15 16   20 21 22           30 31
*
*              OP1 = RT
*              OP2 = RA
*              OV  = OV Bit
*
*
*   Asm Formats:
*
*       mnemonic   OP1,OP2            ---- OV=0 Rc=0
*       mnemonic.  OP1,OP2            ---- OV=0 Rc=1
*       mnemonicO  OP1,OP2            ---- OV=1 Rc=0
*       mnemonicO. OP1,OP2            ---- OV=1 Rc=1
*
***********************************************************************
*
****************************************
**** /*** Arithmetic & Compare ***/ ****
****************************************
*       mnem  |input     |out |op code value
*0EA   ame    rt,ra          Add to Minus One Extended
*0EA   ame.   rt,ra          Add to Minus One Extended (Rc=1)
*0EA   ameo   rt,ra          Add to Minus One Extended and set ovfl
*0EA   ameo.  rt,ra          Add to Minus One Extended set Ovfl (Rc=1)
       addme        rr       x6   31-234  ame
       addme.       rr       x6   31-234-1  ame.
       addmeo       rr       x6   31-234-0-1  ameo
       addmeo.      rr       x6   31-234-1-1  ameo.
*0CA   aze    rt,ra          Add to Zero Extended
*0CA   aze.   rt,ra          Add to Zero Extended (Rc=1)
*0CA   azeo   rt,ra          Add to Zero Extended and set Overflow
*0CA   azeo.  rt,ra          Add to Zero Extended set Overflow (Rc=1)
       addze        rr       x6   31-202  aze
       addze.       rr       x6   31-202-1  aze.
       addzeo       rr       x6   31-202-0-1  azeo
       addzeo.      rr       x6   31-202-1-1  azeo.
*
*0E8   sfme   rt,ra          Subtract From Minus One Extended
*0E8   sfme.  rt,ra          Subtract From Minus One Extended (Rc=1)
*0E8   sfmeo  rt,ra          Subtract From Minus One Extended set Ovfl
*0E8   sfmeo. rt,ra          Subtract From Minus One Extended Ovfl (Rc=1)
       subfme       rr       x6   31-232  sfme
       subfme.      rr       x6   31-232-1  sfme.
       subfmeo      rr       x6   31-232-0-1  sfmeo
       subfmeo.     rr       x6   31-232-1-1  sfmeo.
*0C8   sfze   rt,ra          Subtract from Zero Extended
*0C8   sfze.  rt,ra          Subtract from Zero Extended (Rc=1)
*0C8   sfzeo  rt,ra          Subtract from Zero Extended and set Ovfl
*0C8   sfzeo. rt,ra          Subtract from Zero Extended set Ovfl (Rc=1)
       subfze       rr       x6   31-200  sfze
       subfze.      rr       x6   31-200-1  sfze.
       subfzeo      rr       x6   31-200-0-1  sfzeo
       subfzeo.     rr       x6   31-200-1-1  sfzeo.
*068   neg    rt,ra          Negate
*068   neg.   rt,ra          Negate (Rc=1)
*068   nego   rt,ra          Negate and set Overflow
*068   nego.  rt,ra          Negate and set Overflow (Rc=1)
       neg        rr       x6   31-104
       neg.       rr       x6   31-104-1
       nego       rr       x6   31-104-0-1
       nego.      rr       x6   31-104-1-1
***********************************************************************
*       XR-Form instructions
***********************************************************************
*
*       Instruction Format: XR-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  OP1  |  OP2  |  OP3  |       EO       |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21            30 31
*
*              OP1 = RS
*              OP2 = RA
*              OP3 = RB | SH
*
*   Asm Formats:
*
*       mnemonic  OP2,OP1,OP3         ----- RC=0
*       mnemonic. OP2,OP1,OP3         ----- RC=1
*
*       Note: *** OP2 is the first assembler operand.
*
***********************************************************************
*
***************************
**** /*** Logical ***/ ****
***************************
*       mnem  |input     |out |op code value
*01C   and    ra,rs,rb       AND
*01C   and.   ra,rs,rb       AND (Rc=1)
       and        rrr      xf   31-028
       and.       rrr      xf   31-028-1
*1BC   or     ra,rs,rb       OR
*1BC   or.    ra,rs,rb       OR (Rc=1)
       or         rrr      xf   31-444
       or.        rrr      xf   31-444-1
* extended MN of or
*1BC   mr     ra,rs          Move Register (OR)
       mr         rr       xr   31-444
*1BC   mr.    ra,rs          Move Register (and Test) (OR)
       mr.        rr       xr   31-444-1
*13C   xor    ra,rs,rb       XOR
*13C   xor.   ra,rs,rb       XOR (Rc=1)
       xor        rrr      xf   31-316
       xor.       rrr      xf   31-316-1
*11C   eqv    ra,rs,rb       Equivalent (XNOR)
*11C   eqv.   ra,rs,rb       Equivalent (XNOR) (Rc=1)
       eqv        rrr      xf   31-284
       eqv.       rrr      xf   31-284-1
*03C   andc   ra,rs,rb       AND with Complement
*03C   andc.  ra,rs,rb       AND with Complement (Rc=1)
       andc       rrr      xf   31-060
       andc.      rrr      xf   31-060-1
*19C   orc    ra,rs,rb       OR with Complement
*19C   orc.   ra,rs,rb       OR with Complement (Rc=1)
       orc        rrr      xf   31-412
       orc.       rrr      xf   31-412-1
*07C   nor    ra,rs,rb       NOT OR
*07C   nor.   ra,rs,rb       NOT OR (Rc=1)
       nor        rrr      xf   31-124
       nor.       rrr      xf   31-124-1
*** extended MN for nor
*07C   not    ra,rs       NOT OR
*07C   not.   ra,rs       NOT OR (Rc=1)
       not        rr       xr   31-124
       not.       rr       xr   31-124-1
*
*1DC   nand   ra,rs,rb       NOT AND
*1DC   nand.  ra,rs,rb       NOT AND (Rc=1)
       nand       rrr      xf   31-476
       nand.      rrr      xf   31-476-1
************************************
**** /*** Rotate and Shift ***/ ****
************************************
*       mnem  |input     |out |op code value
*018   sl     ra,rs,rb       Shift Left
*018   sl.    ra,rs,rb       Shift Left (Rc=1)
       slw         rrr      xf   31-024  sl
       slw.        rrr      xf   31-024-1  sl.
*218   sr     ra,rs,rb       Shift Right
*218   sr.    ra,rs,rb       Shift Right (Rc=1)
       srw         rrr      xf   31-536  sr
       srw.        rrr      xf   31-536-1  sr.
*338   srai   ra,rs,sh       Shift Right Algebraic Immediate
*338   srai.  ra,rs,sh       Shift Right Algebraic Immediate (Rc=1)
       srawi       rrt      xf   31-824  srai
       srawi.      rrt      xf   31-824-1  srai.
*318   sra    ra,rs,rb       Shift Right Algebraic
*318   sra.   ra,rs,rb       Shift Right Algebraic (Rc=1)
       sraw        rrr      xf   31-792  sra
       sraw.       rrr      xf   31-792-1  sra.
***********************************************************************
*       XR2-Form instructions
***********************************************************************
*
*       Instruction Format: XR2-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  OP1  |  OP2  | / / / |       EO       |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21            30 31
*
*              OP1 = RS
*              OP2 = RA
*
*   Asm Formats:
*
*       mnemonic  OP2,OP1             ----- RC=0
*       mnemonic. OP2,OP1             ----- RC=1
*
*       Note: *** OP2 is the first assembler operand.
*
***********************************************************************
*
***************************
**** /*** Logical ***/ ****
***************************
*       mnem  |input     |out |op code value
*01A   cntlz  ra,rs          Count Leading Zeros
*01A   cntlz. ra,rs          Count Leading Zeros (Rc=1)
       cntlzw      rr       xe   31-026  cntlz
       cntlzw.     rr       xe   31-026-1  cntlz.
* 
***************************************************
**** /*** Instruction Address Computation ***/ ****
***************************************************
*Opcode 1F
*       mnem  |input     |out |op code value
*39A   exts   ra,rs          Extend Sign
*39A   exts.  ra,rs          Extend Sign (Rc=1)
       extsh       rr       xe   31-922  exts
       extsh.      rr       xe   31-922-1  exts.
*
***********************************************************************
*       XBC-Form instructions ( One of XL-Form )
***********************************************************************
*
*       Instruction Format: XBC-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  BO   |  BI   | / / / |       EO       |LK |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21            30 31
*
*
*   Asm Formats:
*
*       mnemonic  BO,BI               ----- LK=0
*       mnemonic  BO,BI               ----- LK=1
*       ext mnem  BI                  ----- LK=0
*       ext mnem  BI                  ----- LK=1
*       ext mnem                      ----- LK=0
*       ext mnem                      ----- LK=1
*
***********************************************************************
*
****************************
**** /*** Branches ***/ ****
****************************
*
*       mnem  |input     |out |op code value
*010   bcr    bo,bi          Branch Condition Register (via link)  (LK=0)
       bclr        oc       x6   19-016  bcr
       bclr+	oc	xk	19-016
       bclr-	oc	xl	19-016
*010   bcrl   bo,bi          Branch Condition Register and Link    (LK=1)
       bclrl       oc       x6   19-016-1  bcrl
       bclrl+	oc	xk	19-016-1
       bclrl-	oc	xl	19-016-1
*
*010   bcc    bo,bi          Branch Condition Register (via count) (LK=0)
       bcctr        Oc       x6   19-528  bcc
       bcctr+	Oc	xk	19-528
       bcctr-	Oc	xl	19-528
*010   bccl   bo,bi          Branch Condition Register and Link    (LK=1)
       bcctrl       Oc       x6   19-528-1  bccl
       bcctrl+	Oc	xk	19-528-1
       bcctrl-	Oc	xl	19-528-1
*
*
*       Extended Branch Register Mnemonics
*         Instructions which specify the Link register as the branch
*           register have  r  as the suffix (BGTR, BZR, etc).
*         Instructions which specify the Count register as the branch
*           register have  c  as the suffix (BGTC, BZC, etc).
*
*
*      bxxxx  BI             Many extended mnemonics which combine
*      bxxxx  <BI>           the type and cond fields
*      bxxxx                 the type and cond fields
*
*       All extended branch ops formed using Cohen's algorithm of 3/11/8
*
**------  Simple Branch (Only BO field incorporated in mnemonics ) ------------
*
*       Branch via Link Register
*010   br      n         Branch Unconditionally (via link reg)        (LK=0)
       blr         n        x0   19-016-0-0-20  br
*
*       Branch via Link Register on Bit in Condition Register
*010   bbtr   bi         Branch if Condition Bit True             (LK=0)
*010   bbtr   n          Branch if Condition Bit True             (LK=0)
       btlr       ?!1c        x2   19-016-0-0-12-00  bbtr
       btlr+	?!1c	x2	19-016-0-0-13-00
       btlr-	?!1c	x2	19-016-0-0-12-00
*010   bbfr   bi         Branch if Condition Bit False            (LK=0)
*010   bbfr   n          Branch if Condition Bit False            (LK=0)
       bflr       ?!1c        x2   19-016-0-0-04-00  bbfr
       bflr+	?!1c	x2	19-016-0-0-05-00
       bflr-	?!1c	x2	19-016-0-0-04-00
*
*       Branch via Link Register and Decrement Count Register
*10    bdzr   bi             Decrement CTR and Branch CTR = 0      (LK=0)
*10    bdzr   n              Decrement CTR and Branch CTR = 0      (LK=0)
       bdzlr       ?!1c        x2   19-016-0-0-18-00  bdzr
       bdzlr+	?!1c	x2	19-016-0-0-19-00
       bdzlr-	?!1c	x2	19-016-0-0-18-00
*10    bdnr   bi              Decrement CTR and Branch CTR ^=0      (LK=0)
*10    bdnr   n              Decrement CTR and Branch CTR ^=0      (LK=0)
       bdnzlr      ?!1c        x2   19-016-0-0-16-00  bdnr
       bdnzlr+	?!1c	x2	19-016-0-0-17-00
       bdnzlr-	?!1c	x2	19-016-0-0-16-00
*
*013   bdnztlr   bi        CTR !=0 and Cond. TRUE              (LK=0)
*013   bdnztlr   n        CTR !=0 and Cond. TRUE              (LK=0)
       bdnztlr       ?!1c        x2   19-016-0-0-08-00
       bdnztlr+	?!1c	x2	19-016-0-0-09-00
       bdnztlr-	?!1c	x2	19-016-0-0-08-00
*013   bdnzflr   bi        CTR !=0 and Cond. FALSE              (LK=0)
*013   bdnzflr   n        CTR !=0 and Cond. FALSE              (LK=0)
       bdnzflr       ?!1c        x2   19-016-0-0-00-00
       bdnzflr+	?!1c	x2	19-016-0-0-01-00
       bdnzflr-	?!1c	x2	19-016-0-0-00-00
*013   bdztlr   bi        CTR ==0 and Cond. TRUE              (LK=0)
*013   bdztlr   n        CTR ==0 and Cond. TRUE              (LK=0)
       bdztlr       ?!1c        x2   19-016-0-0-10-00
       bdztlr+	?!1c	x2	19-016-0-0-11-00
       bdztlr-	?!1c	x2	19-016-0-0-10-00
*013   bdzflr   bi        CTR ==0 and Cond. FALSE              (LK=0)
*013   bdzflr   n        CTR ==0 and Cond. FALSE              (LK=0)
       bdzflr       ?!1c        x2   19-016-0-0-02-00
       bdzflr+	?!1c	x2	19-016-0-0-03-00
       bdzflr-	?!1c	x2	19-016-0-0-02-00
*
*       Branch via Count Register
*010   bctr              Branch Unconditionally (via count reg)       (LK=0)
       bctr       n        x0   19-528-0-0-20
*
*       Branch via Count Register on Bit in Condition Register
*010   bbtc   bi          Branch  if Condition Bit True               (LK=0)
*010   bbtc   n           Branch  if Condition Bit True               (LK=0)
       btctr       ?!1c        x2   19-528-0-0-12-00  bbtc
       btctr+	?!1c	x2	19-528-0-0-13-00
       btctr-	?!1c	x2	19-528-0-0-12-00
*010   bbfc   bi             Branch  if Condition Bit False           (LK=0)
*010   bbfc   n             Branch  if Condition Bit False            (LK=0)
       bfctr       ?!1c        x2   19-528-0-0-04-00  bbfc
       bfctr+	?!1c	x2	19-528-0-0-05-00
       bfctr-	?!1c	x2	19-528-0-0-04-00
*
*
*       Branch via Link Register and Link Bit set to 1
*010   brl             Branch Unconditionally and Link (via link reg)   (LK=1)
       blrl        n        x0   19-016-1-0-20  brl
*
*010   bbtrl  bi       Branch if Condition Bit True and Link     (LK=1)
*010   bbtrl  n       Branch if Condition Bit True and Link     (LK=1)
       btlrl      ?!1c        x2   19-016-1-0-12-00  bbtrl
       btlrl+	?!1c	x2	19-016-1-0-13-00
       btlrl-	?!1c	x2	19-016-1-0-12-00
*010   bbfrl  bi       Branch if Condition Bit False and Link    (LK=1)
*010   bbfrl  n       Branch if Condition Bit False and Link    (LK=1)
       bflrl      ?!1c        x2   19-016-1-0-04-00  bbfrl
       bflrl+	?!1c	x2	19-016-1-0-05-00
       bflrl-	?!1c	x2	19-016-1-0-04-00
*
*       Branch via Link Register and Link and Decrement Count Register
*10    bdzrl  bi           Decrement CTR and Branch if CTR = 0      (LK=1)
*10    bdzrl  n           Decrement CTR and Branch if CTR = 0      (LK=1)
       bdzlrl      ?!1c        x2   19-016-1-0-18-00  bdzrl
       bdzlrl+	?!1c	x2	19-016-1-0-19-00
       bdzlrl-	?!1c	x2	19-016-1-0-18-00
*10    bdnrl  bi              Decrement CTR and Branch if CTR ^=0      (LK=1)
*10    bdnrl  n              Decrement CTR and Branch if CTR ^=0      (LK=1)
       bdnzlrl     ?!1c        x2   19-016-1-0-16-00  bdnrl
       bdnzlrl+	?!1c	x2	19-016-1-0-17-00
       bdnzlrl-	?!1c	x2	19-016-1-0-16-00
*
*013   bdnztlrl  bi             CTR != 0 and Cond. TRUE    (LK=1)
*013   bdnztlrl  n             CTR != 0 and Cond. TRUE    (LK=1)
       bdnztlrl      ?!1c        x2   19-016-1-0-08-00
       bdnztlrl+	?!1c	x2	19-016-1-0-09-00
       bdnztlrl-	?!1c	x2	19-016-1-0-08-00
*013   bdnzflrl  bi             CTR != 0 and Cond. FLASE    (LK=1)
*013   bdnzflrl  n             CTR != 0 and Cond. FLASE    (LK=1)
       bdnzflrl      ?!1c        x2   19-016-1-0-00-00
       bdnzflrl+	?!1c	x2	19-016-1-0-01-00
       bdnzflrl-	?!1c	x2	19-016-1-0-00-00
*013   bdztlrl  bi             CTR == 0 and Cond. TRUE    (LK=1)
*013   bdztlrl  n             CTR == 0 and Cond. TRUE    (LK=1)
       bdztlrl      ?!1c        x2   19-016-1-0-10-00
       bdztlrl+	?!1c	x2	19-016-1-0-11-00
       bdztlrl-	?!1c	x2	19-016-1-0-10-00
*013   bdzflrl  bi             CTR == 0 and Cond. FLASE    (LK=1)
*013   bdzflrl  n             CTR == 0 and Cond. FLASE    (LK=1)
       bdzflrl      ?!1c        x2   19-016-1-0-02-00
       bdzflrl+	?!1c	x2	19-016-1-0-03-00
       bdzflrl-	?!1c	x2	19-016-1-0-02-00
*
*
*       Branch via Count Register and Link and Decrement Count Register
*         None of these forms are valid instructions.
*
*       Branch via Count Register and Link Bit set to 1
*010   bctrl                 Branch Unconditionally and Link (via ctr) (LK=1)
       bctrl      n        x0   19-528-1-0-20
*
*       Branch via Count Register and Link, on Bit in Condition Register
*010   bbtcl  bi             Branch if Condition Bit True and Link     (LK=1)
*010   bbtcl  n              Branch if Condition Bit True and Link     (LK=1)
       btctrl      ?!1c        x2   19-528-1-0-12-00  bbtcl
       btctrl+	?!1c	x2	19-528-1-0-13-00
       btctrl-	?!1c	x2	19-528-1-0-12-00
*010   bbfcl  bi             Branch if Condition Bit False and Link    (LK=1)
*010   bbfcl  n              Branch if Condition Bit False and Link    (LK=1)
       bfctrl      ?!1c        x2   19-528-1-0-04-00  bbfcl
       bfctrl+	?!1c	x2	19-528-1-0-05-00
       bfctrl-	?!1c	x2	19-528-1-0-04-00
*
*
**---------   Branch incorporating conditions ----------
*
*       Branch via Link Register on Condition
*010   bltr                  Branch Less Than Register             (LK=0)
*010   bltr   CRi            Branch Less Than Register             (LK=0)
       bltlr       ?!1f     q2   19-016-0-0-12-00  bltr
       bltlr+	?!1f	q2	19-016-0-0-13-00
       bltlr-	?!1f	q2	19-016-0-0-12-00
*010   bnlr                  Branch Not Less Than Register         (LK=0)
*010   bnlr   CRi            Branch Not Less Than Register         (LK=0)
       bnllr       ?!1f     q2   19-016-0-0-04-00  bnlr
       bnllr+	?!1f	q2	19-016-0-0-05-00
       bnllr-	?!1f	q2	19-016-0-0-04-00
*010   bger                  Branch Not Less Than Register         (LK=0)
*010   bger   CRi            Branch Not Less Than Register         (LK=0)
       bgelr       ?!1f     q2   19-016-0-0-04-00  bger
       bgelr+	?!1f	q2	19-016-0-0-05-00
       bgelr-	?!1f	q2	19-016-0-0-04-00
*010   bgtr                  Branch Greater Than Register          (LK=0)
*010   bgtr   CRi            Branch Greater Than Register          (LK=0)
       bgtlr       ?!1f     q2   19-016-0-0-12-01  bgtr
       bgtlr+	?!1f	q2	19-016-0-0-13-01
       bgtlr-	?!1f	q2	19-016-0-0-12-01
*010   bngr                  Branch Not Greater Than Register      (LK=0)
*010   bngr   CRi            Branch Not Greater Than Register      (LK=0)
       bnglr       ?!1f     q2   19-016-0-0-04-01  bngr
       bnglr+	?!1f	q2	19-016-0-0-05-01
       bnglr-	?!1f	q2	19-016-0-0-04-01
*010   bler                  Branch Not Greater Than Register      (LK=0)
*010   bler   CRi            Branch Not Greater Than Register      (LK=0)
       blelr       ?!1f     q2   19-016-0-0-04-01  bler
       blelr+	?!1f	q2	19-016-0-0-05-01
       blelr-	?!1f	q2	19-016-0-0-04-01
*010   beqr                  Branch Equal Register                 (LK=0)
*010   beqr   CRi            Branch Equal Register                 (LK=0)
       beqlr       ?!1f     q2   19-016-0-0-12-02  beqr
       beqlr+	?!1f	q2	19-016-0-0-13-02
       beqlr-	?!1f	q2	19-016-0-0-12-02
*010   bner                  Branch Not Equal Register             (LK=0)
*010   bner   CRi            Branch Not Equal Register             (LK=0)
       bnelr       ?!1f     q2   19-016-0-0-04-02  bner
       bnelr+	?!1f	q2	19-016-0-0-05-02
       bnelr-	?!1f	q2	19-016-0-0-04-02
*010   bsor                  Branch Summary Overflow Register      (LK=0)
*010   bsor   CRi            Branch Summary Overflow Register      (LK=0)
       bsolr       ?!1f     q2   19-016-0-0-12-03  bsor
       bsolr+	?!1f	q2	19-016-0-0-13-03
       bsolr-	?!1f	q2	19-016-0-0-12-03
*010   bnsr                  Branch Not Summary Overflow Reg       (LK=0)
*010   bnsr   CRi            Branch Not Summary Overflow Reg       (LK=0)
       bnslr       ?!1f     q2   19-016-0-0-04-03  bnsr
       bnslr+	?!1f	q2	19-016-0-0-05-03
       bnslr-	?!1f	q2	19-016-0-0-04-03
*
*010   bzr                   Branch Equal Register                 (LK=0)
*010   bzr    CRi            Branch Equal Register                 (LK=0)
       bzlr        ?!1f     q2   19-016-0-0-12-02   bzr
       bzlr+	?!1f	q2	19-016-0-0-13-02
       bzlr-	?!1f	q2	19-016-0-0-12-02
*010   bnzr                  Branch Not Equal Register             (LK=0)
*010   bnzr   CRi            Branch Not Equal Register             (LK=0)
       bnzlr       ?!1f     q2   19-016-0-0-04-02  bnzr
       bnzlr+	?!1f	q2	19-016-0-0-05-02
       bnzlr-	?!1f	q2	19-016-0-0-04-02
*
*013   bunlr                  Branch unordered Register      (LK=0)
*013   bunlr   CRi            Branch unordered Register      (LK=0)
       bunlr       ?!1f     q2   19-016-0-0-12-03  bunr
       bunlr+	?!1f	q2	19-016-0-0-13-03
       bunlr-	?!1f	q2	19-016-0-0-12-03
*013   bnulr                  Branch Not unordered Reg       (LK=0)
*013   bnulr   CRi            Branch Not unordered Reg       (LK=0)
       bnulr       ?!1f     q2   19-016-0-0-04-03  bnur
       bnulr+	?!1f	q2	19-016-0-0-05-03
       bnulr-	?!1f	q2	19-016-0-0-04-03
*
*
*       Branch via Count Register on Condition
*010   bltc                  Branch Less Than Register             (LK=0)
*010   bltc   CRi            Branch Less Than Register             (LK=0)
       bltctr       ?!1f     q2   19-528-0-0-12-00  bltc
       bltctr+	?!1f	q2	19-528-0-0-13-00
       bltctr-	?!1f	q2	19-528-0-0-12-00
*010   bnlc                  Branch Not Less Than Register         (LK=0)
*010   bnlc   CRi            Branch Not Less Than Register         (LK=0)
       bnlctr       ?!1f     q2   19-528-0-0-04-00  bnlc
       bnlctr+	?!1f	q2	19-528-0-0-05-00
       bnlctr-	?!1f	q2	19-528-0-0-04-00
*010   bgec                  Branch Not Less Than Register         (LK=0)
*010   bgec   CRi            Branch Not Less Than Register         (LK=0)
       bgectr       ?!1f     q2   19-528-0-0-04-00  bgec
       bgectr+	?!1f	q2	19-528-0-0-05-00
       bgectr-	?!1f	q2	19-528-0-0-04-00
*010   bgtc                  Branch Greater Than Register          (LK=0)
*010   bgtc   CRi            Branch Greater Than Register          (LK=0)
       bgtctr       ?!1f     q2   19-528-0-0-12-01  bgtc
       bgtctr+	?!1f	q2	19-528-0-0-13-01
       bgtctr-	?!1f	q2	19-528-0-0-12-01
*010   bngc                  Branch Not Greater Than Register      (LK=0)
*010   bngc   CRi            Branch Not Greater Than Register      (LK=0)
       bngctr       ?!1f     q2   19-528-0-0-04-01  bngc
       bngctr+	?!1f	q2	19-528-0-0-05-01
       bngctr-	?!1f	q2	19-528-0-0-04-01
*010   blec                  Branch Not Greater Than Register      (LK=0)
*010   blec   CRi            Branch Not Greater Than Register      (LK=0)
       blectr       ?!1f     q2   19-528-0-0-04-01  blec
       blectr+	?!1f	q2	19-528-0-0-05-01
       blectr-	?!1f	q2	19-528-0-0-04-01
*010   beqc                  Branch Equal Register                 (LK=0)
*010   beqc   CRi            Branch Equal Register                 (LK=0)
       beqctr       ?!1f     q2   19-528-0-0-12-02  beqc
       beqctr+	?!1f	q2	19-528-0-0-13-02
       beqctr-	?!1f	q2	19-528-0-0-12-02
*010   bnec                  Branch Not Equal Register             (LK=0)
*010   bnec   CRi            Branch Not Equal Register             (LK=0)
       bnectr       ?!1f     q2   19-528-0-0-04-02  bnec
       bnectr+	?!1f	q2	19-528-0-0-05-02
       bnectr-	?!1f	q2	19-528-0-0-04-02
*010   bsoc                  Branch Summary Overflow Register      (LK=0)
*010   bsoc   CRi            Branch Summary Overflow Register      (LK=0)
       bsoctr       ?!1f     q2   19-528-0-0-12-03  bsoc
       bsoctr+	?!1f	q2	19-528-0-0-13-03
       bsoctr-	?!1f	q2	19-528-0-0-12-03
*010   bnsc                  Branch Not Summary Overflow Reg       (LK=0)
*010   bnsc   CRi            Branch Not Summary Overflow Reg       (LK=0)
       bnsctr       ?!1f     q2   19-528-0-0-04-03  bnsc
       bnsctr+	?!1f	q2	19-528-0-0-05-03
       bnsctr-	?!1f	q2	19-528-0-0-04-03
*
*010   bzc                   Branch Equal Register                 (LK=0)
*010   bzc    CRi            Branch Equal Register                 (LK=0)
       bzctr        ?!1f     q2   19-528-0-0-12-02  bzc
       bzctr+	?!1f	q2	19-528-0-0-13-02
       bzctr-	?!1f	q2	19-528-0-0-12-02
*010   bnzc                  Branch Not Equal Register             (LK=0)
*010   bnzc   CRi            Branch Not Equal Register             (LK=0)
       bnzctr       ?!1f     q2   19-528-0-0-04-02  bnzc
       bnzctr+	?!1f	q2	19-528-0-0-05-02
       bnzctr-	?!1f	q2	19-528-0-0-04-02
*
*013   bunctr                  Branch unordered Register      (LK=0)
*013   bunctr   CRi            Branch unordered Register      (LK=0)
       bunctr       ?!1f     q2   19-528-0-0-12-03  bunc
       bunctr+	?!1f	q2	19-528-0-0-13-03
       bunctr-	?!1f	q2	19-528-0-0-12-03
*013   bnuctr                  Branch Not unordered Reg       (LK=0)
*013   bnuctr   CRi            Branch Not unordered Reg       (LK=0)
       bnuctr       ?!1f     q2   19-528-0-0-04-03  bnuc
       bnuctr+	?!1f	q2	19-528-0-0-05-03
       bnuctr-	?!1f	q2	19-528-0-0-04-03
*
*
*       Branch via Link Register and Link, on Condition
*010   bltrl                 Branch Less Than Register             (LK=1)
*010   bltrl  CRi            Branch Less Than Register             (LK=1)
       bltlrl      ?!1f     q2   19-016-1-0-12-00  bltrl
       bltlrl+	?!1f	q2	19-016-1-0-13-00
       bltlrl-	?!1f	q2	19-016-1-0-12-00
*010   bnlrl                 Branch Not Less Than Register         (LK=1)
*010   bnlrl  CRi            Branch Not Less Than Register         (LK=1)
       bnllrl      ?!1f     q2   19-016-1-0-04-00  bnlrl
       bnllrl+	?!1f	q2	19-016-1-0-05-00
       bnllrl-	?!1f	q2	19-016-1-0-04-00
*010   bgerl                 Branch Not Less Than Register         (LK=1)
*010   bgerl  CRi            Branch Not Less Than Register         (LK=1)
       bgelrl      ?!1f     q2   19-016-1-0-04-00  bgerl
       bgelrl+	?!1f	q2	19-016-1-0-05-00
       bgelrl-	?!1f	q2	19-016-1-0-04-00
*010   bgtrl                 Branch Greater Than Register          (LK=1)
*010   bgtrl  CRi            Branch Greater Than Register          (LK=1)
       bgtlrl      ?!1f     q2   19-016-1-0-12-01  bgtrl
       bgtlrl+	?!1f	q2	19-016-1-0-13-01
       bgtlrl-	?!1f	q2	19-016-1-0-12-01
*010   bngrl                 Branch Not Greater Than Register      (LK=1)
*010   bngrl  CRi            Branch Not Greater Than Register      (LK=1)
       bnglrl      ?!1f     q2   19-016-1-0-04-01  bngrl
       bnglrl+	?!1f	q2	19-016-1-0-05-01
       bnglrl-	?!1f	q2	19-016-1-0-04-01
*010   blerl                 Branch Not Greater Than Register      (LK=1)
*010   blerl  CRi            Branch Not Greater Than Register      (LK=1)
       blelrl      ?!1f     q2   19-016-1-0-04-01  blerl
       blelrl+	?!1f	q2	19-016-1-0-05-01
       blelrl-	?!1f	q2	19-016-1-0-04-01
*010   beqrl                 Branch Equal Register                 (LK=1)
*010   beqrl  CRi            Branch Equal Register                 (LK=1)
       beqlrl      ?!1f     q2   19-016-1-0-12-02  beqrl
       beqlrl+	?!1f	q2	19-016-1-0-13-02
       beqlrl-	?!1f	q2	19-016-1-0-12-02
*010   bnerl                 Branch Not Equal Register             (LK=1)
*010   bnerl  CRi            Branch Not Equal Register             (LK=1)
       bnelrl      ?!1f     q2   19-016-1-0-04-02  bnerl
       bnelrl+	?!1f	q2	19-016-1-0-05-02
       bnelrl-	?!1f	q2	19-016-1-0-04-02
*010   bsorl                 Branch Summary Overflow Register      (LK=1)
*010   bsorl  CRi            Branch Summary Overflow Register      (LK=1)
       bsolrl      ?!1f     q2   19-016-1-0-12-03  bsorl
       bsolrl+	?!1f	q2	19-016-1-0-13-03
       bsolrl-	?!1f	q2	19-016-1-0-12-03
*010   bnsrl                 Branch Not Summary Overflow Reg       (LK=1)
*010   bnsrl  CRi            Branch Not Summary Overflow Reg       (LK=1)
       bnslrl      ?!1f     q2   19-016-1-0-04-03  bnsrl
       bnslrl+	?!1f	q2	19-016-1-0-05-03
       bnslrl-	?!1f	q2	19-016-1-0-04-03
*
*010   bzrl                  Branch Equal Register                 (LK=1)
*010   bzrl   CRi            Branch Equal Register                 (LK=1)
       bzlrl       ?!1f     q2   19-016-1-0-12-02  bzrl
       bzlrl+	?!1f	q2	19-016-1-0-13-02
       bzlrl-	?!1f	q2	19-016-1-0-12-02
*010   bnzrl                 Branch Not Equal Register             (LK=1)
*010   bnzrl  CRi            Branch Not Equal Register             (LK=1)
       bnzlrl      ?!1f     q2   19-016-1-0-04-02  bnzrl
       bnzlrl+	?!1f	q2	19-016-1-0-05-02
       bnzlrl-	?!1f	q2	19-016-1-0-04-02
*
*013   bunlrl                 Branch Unordered Register      (LK=1)
*013   bunlrl  CRi            Branch Unordered Register      (LK=1)
       bunlrl      ?!1f     q2   19-016-1-0-12-03  bunrl
       bunlrl+	?!1f	q2	19-016-1-0-13-03
       bunlrl-	?!1f	q2	19-016-1-0-12-03
*013   bnulrl                 Branch Not Unordered Reg       (LK=1)
*013   bnulrl  CRi            Branch Not Unordered Reg       (LK=1)
       bnulrl      ?!1f     q2   19-016-1-0-04-03  bnurl
       bnulrl+	?!1f	q2	19-016-1-0-05-03
       bnulrl-	?!1f	q2	19-016-1-0-04-03
*
*
*       Branch via Count Register and Link, on Condition
*010   bltcl                 Branch Less Than Register             (LK=1)
*010   bltcl  CRi            Branch Less Than Register             (LK=1)
       bltctrl      ?!1f     q2   19-528-1-0-12-00  bltcl
       bltctrl+	?!1f	q2	19-528-1-0-13-00
       bltctrl-	?!1f	q2	19-528-1-0-12-00
*010   bnlcl                 Branch Not Less Than Register         (LK=1)
*010   bnlcl  CRi            Branch Not Less Than Register         (LK=1)
       bnlctrl      ?!1f     q2   19-528-1-0-04-00  bnlcl
       bnlctrl+	?!1f	q2	19-528-1-0-05-00
       bnlctrl-	?!1f	q2	19-528-1-0-04-00
*010   bgecl                 Branch Not Less Than Register         (LK=1)
*010   bgecl  CRi            Branch Not Less Than Register         (LK=1)
       bgectrl      ?!1f     q2   19-528-1-0-04-00  bgecl
       bgectrl+	?!1f	q2	19-528-1-0-05-00
       bgectrl-	?!1f	q2	19-528-1-0-04-00
*010   bgtcl                 Branch Greater Than Register          (LK=1)
*010   bgtcl  CRi            Branch Greater Than Register          (LK=1)
       bgtctrl      ?!1f     q2   19-528-1-0-12-01  bgtcl
       bgtctrl+	?!1f	q2	19-528-1-0-13-01
       bgtctrl-	?!1f	q2	19-528-1-0-12-01
*010   bngcl                 Branch Not Greater Than Register      (LK=1)
*010   bngcl  CRi            Branch Not Greater Than Register      (LK=1)
       bngctrl      ?!1f     q2   19-528-1-0-04-01  bngcl
       bngctrl+	?!1f	q2	19-528-1-0-05-01
       bngctrl-	?!1f	q2	19-528-1-0-04-01
*010   blecl                 Branch Not Greater Than Register      (LK=1)
*010   blecl  CRi            Branch Not Greater Than Register      (LK=1)
       blectrl      ?!1f     q2   19-528-1-0-04-01  blecl
       blectrl+	?!1f	q2	19-528-1-0-05-01
       blectrl-	?!1f	q2	19-528-1-0-04-01
*010   beqcl                 Branch Equal Register                 (LK=1)
*010   beqcl  CRi            Branch Equal Register                 (LK=1)
       beqctrl      ?!1f     q2   19-528-1-0-12-02  beqcl
       beqctrl+	?!1f	q2	19-528-1-0-13-02
       beqctrl-	?!1f	q2	19-528-1-0-12-02
*010   bnecl                 Branch Not Equal Register             (LK=1)
*010   bnecl  CRi            Branch Not Equal Register             (LK=1)
       bnectrl      ?!1f     q2   19-528-1-0-04-02  bnecl
       bnectrl+	?!1f	q2	19-528-1-0-05-02
       bnectrl-	?!1f	q2	19-528-1-0-04-02
*010   bsocl                 Branch Summary Overflow Register      (LK=1)
*010   bsocl  CRi            Branch Summary Overflow Register      (LK=1)
       bsoctrl      ?!1f     q2   19-528-1-0-12-03  bsocl
       bsoctrl+	?!1f	q2	19-528-1-0-13-03
       bsoctrl-	?!1f	q2	19-528-1-0-12-03
*010   bnscl                 Branch Not Summary Overflow Reg       (LK=1)
*010   bnscl  CRi            Branch Not Summary Overflow Reg       (LK=1)
       bnsctrl      ?!1f     q2   19-528-1-0-04-03  bnscl
       bnsctrl+	?!1f	q2	19-528-1-0-05-03
       bnsctrl-	?!1f	q2	19-528-1-0-04-03
*
*010   bzcl                  Branch Equal Register                 (LK=1)
*010   bzcl   CRi            Branch Equal Register                 (LK=1)
       bzctrl       ?!1f     q2   19-528-1-0-12-02  bzcl
       bzctrl+	?!1f	q2	19-528-1-0-13-02
       bzctrl-	?!1f	q2	19-528-1-0-12-02
*010   bnzcl                 Branch Not Equal Register             (LK=1)
*010   bnzcl  CRi            Branch Not Equal Register             (LK=1)
       bnzctrl      ?!1f     q2   19-528-1-0-04-02  bnzcl
       bnzctrl+	?!1f	q2	19-528-1-0-05-02
       bnzctrl-	?!1f	q2	19-528-1-0-04-02
*
*013   bunctrl                 Branch Unordered Register      (LK=1)
*013   bunctrl  CRi            Branch Unordered Register      (LK=1)
       bunctrl      ?!1f     q2   19-528-1-0-12-03  buncl
       bunctrl+	?!1f	q2	19-528-1-0-13-03
       bunctrl-	?!1f	q2	19-528-1-0-12-03
*013   bnuctrl                 Branch Not Unordered Reg       (LK=1)
*013   bnuctrl  CRi            Branch Not Unordered Reg       (LK=1)
       bnuctrl      ?!1f     q2   19-528-1-0-04-03  bnucl
       bnuctrl+	?!1f	q2	19-528-1-0-05-03
       bnuctrl-	?!1f	q2	19-528-1-0-04-03
*
*
***********************************************************************
*       XBX-Form instructions ( One of XL-Form )
***********************************************************************
*
*       Instruction Format: XBX-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  BT   |  BA   |  BB   |       EO       |LK |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21            30 31
*
*
*   Asm Formats:
*
*       mnemonic  BT,BA,BB            ----- LK=0
*       mnemonic. BT,BA,BB            ----- LK=1
*
***********************************************************************
*
**************************************
**** /*** Logical on CR Bits ***/ ****
**************************************
*       mnem  |input     |out |op code value
*121   creqv  bt,ba,bb       Condition Register Equivalent
       creqv      ccc      x7   19-289
*** extended MN for creqv, Condition Reg. set
       crset      c        xd   19-289
*
*0C1   crxor  bt,ba,bb       Condition Register Exclusive OR
       crxor      ccc      x7   19-193
*** extended MN for crxor, Condition Reg. clear
       crclr      c        xd   19-193
*
*101   crand  bt,ba,bb       Condition Register AND
       crand      ccc      x7   19-257
*
*1C1   cror   bt,ba,bb       Condition Register OR
       cror       ccc      x7   19-449
*** extended MN for cror, Condition Reg. move
       crmove     cc       xb   19-449
*
*081   crandc bt,ba,bb       Condition Register AND with Complement
       crandc     ccc      x7   19-129
*1A1   crorc  bt,ba,bb       Condition Register OR with Complement
       crorc      ccc      x7   19-417
*
*021   crnor  bt,ba,bb       Condition Register NOT OR
       crnor      ccc      x7   19-033
*** extended MN for crnor, Condition Reg. not
       crnot      cc       xb   19-033
*
*0E1   crnand bt,ba,bb       Condition Register NOT AND
       crnand     ccc      x7   19-225
*
***********************************************************************
*       XM1-Form instructions ( external XFL-Form )
***********************************************************************
*
*       Instruction Format: XM1-FORM
*
*       ---------------------------------------------------
*      |OPCODE|/|     FM    |/|  FRB  |       EO       |Rc |
*       ---------------------------------------------------
*       0    5 6 7       14 15 16   20 21            30 31
*
*   Asm Formats:
*
*       mnemonic  FM,FRB              ----- RC=0
*       mnemonic. FM,FRB              ----- RC=1
*
***********************************************************************
*
*********************************************************
**** /*** Floating Point Status and Control Reg ***/ ****
*********************************************************
*Opcode 3F
*       mnem  |input     |out |op code value
*2C7   mtfsf  fm,frb         Move to FPSCR field
       mtfsf      wr       xm   63-711
       mtfsf.     wr       xm   63-711-1
** extended MN of mtfsf
*2C7   mtfs   frb            Move to FPSCR ( mtfsf ext )
       mtfs       r        x1   63-711-0-0-15-30-0-0
       mtfs.      r        x1   63-711-1-0-15-30-0-0
***********************************************************************
*       XM2-Form instructions ( external XFX-Form )
***********************************************************************
*
*       Instruction Format: XM2-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  RS   |/|   FM     |/|       EO       |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11 12     21 20 21            30 31
*
*
*   Asm Formats:
*
*       mnemonic  FM,RS               ----- RC=0
*       mnemonic. FM,RS               ----- RC=1
*
*       NOTE: *** Bits 11-20 (FM) is the first assembler operand
*
***********************************************************************
*
****************************************************
**** /*** Special Purpose Register Control ***/ ****
****************************************************
*       mnem  |input     |out |op code value
*Opcode 1F
*090   mtcrf  fm,rs          Move to Condition Register Fields
       mtcrf      wr       xc   31-144
*090   mtcr   rs             Move to Condition Register (mtcrf ext)
       mtcr       r        x4   31-144-0-0-0-15-0-30
***********************************************************************
*       XZ-Form instructions
***********************************************************************
*
*       Instruction Format: XZ-FORM
*
*       ---------------------------------------------------
*      |OPCODE| / / / | / / / | / / / |       EO       |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21            30 31
*
*
*   Asm Formats:
*
*       mnemonic                      ----- RC=0
*       mnemonic.                     ----- RC=1
*
***********************************************************************
*
***********************************
**** /*** Storage Control ***/ ****
***********************************
*Opcode 1F
*       mnem  |input     |out |op code value
*256   dcs                   Data cache synchronize
       sync        n        x0   31-598
       dcs        n        x0   31-598
***********************************************************************
*       XZL-Form instructions ( One of XL-Form )
***********************************************************************
*
*       Instruction Format: XZL-FORM
*
*       ---------------------------------------------------
*      |OPCODE| / / / | / / / | / / / |       EO       |LK |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21            30 31
*
*
*   Asm Formats:
*
*       mnemonic                      ----- LK=0
*       mnemonic.                     ----- LK=1
*
***********************************************************************
*
***********************************
**** /*** Storage Control ***/ ****
***********************************
*       mnem  |input     |out |op code value
*Opcode 13
*092   ics                   Instruction cache synchronize
       isync        n        x0   19-150
       ics        n        x0   19-150
*
**********************************************
**** /*** Machine State Modification ***/ ****
**********************************************
*       mnem  |input     |out |op code value
*032   rfi                   Return From Interrupt
       rfi        n        x0   19-050
*
***********************************************************************
*       X1-Form instructions
***********************************************************************
*
*       Instruction Format: X1-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  OP1  | / / / | / / / |       EO       |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21            30 31
*
*              OP1 = RT | FRT | BF
*
*   Asm Formats:
*
*       mnemonic  OP1                 ----- RC=0
*       mnemonic. OP1                 ----- RC=1
*
***********************************************************************
*
*********************************************************
**** /*** Floating Point Status and Control Reg ***/ ****
*********************************************************
*Opcode 3F
*       mnem  |input     |out |op code value
*247   mffs   frt            Move from FPSCR
       mffs       r        x4   63-583
       mffs.      r        x4   63-583-1
*026   mtfsb1 bf             Move to FPSCR Bit "one"
       mtfsb1     r        x4   63-038
       mtfsb1.    r        x4   63-038-1
*046   mtfsb0 bf             Move to FPSCR Bit "zero"
       mtfsb0     r        x4   63-070
       mtfsb0.    r        x4   63-070-1
*093   mtmsr  rs             Move to MSR
       mtmsr      r        x4   31-146
*
****************************************************
**** /*** Special Purpose Register Control ***/ ****
****************************************************
*Opcode 1F
*       mnem  |input     |out |op code value
*013   mfcr   rt             Move from Condition Register
       mfcr       r        x4   31-019
*200   mcrxr  bf             Move to CR from XER
       mcrxr      f        x4   31-512
**********************************************
**** /*** Machine State Modification ***/ ****
**********************************************
*Opcode 1F
*       mnem  |input     |out |op code value
*053   mfmsr  rt             Move from Machine State Register
       mfmsr      r        x4   31-083
***********************************************************************
*       XTA-Form instructions
***********************************************************************
*
*       Instruction Format: XTA-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  OP1  |  OP2  | / / / |       EO       |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21            30 31
*
*              OP1 = RT | BF | BFT | FRT
*              OP2 = RA | BFA | FRA | SR | SPR
*
*   Asm Formats:
*
*       mnemonic  OP1,OP2             ----- RC=0
*       mnemonic. OP1,OP2             ----- RC=1
*
***********************************************************************
*
*********************************************************
**** /*** Floating Point Status and Control Reg ***/ ****
*********************************************************
*Opcode 3F
*       mnem  |input     |out |op code value
*040   mcrfs  bf,bfa         Move to CR from FPSCR
       mcrfs      ff       x6   63-064
*
****************************************************
**** /*** Special Purpose Register Control ***/ ****
****************************************************
*Opcode 1F
*       mnem  |input     |out |op code value
*153   mfspr  rt,spr         Move from Special Purpose Register
       mfspr      r5       xj   31-339
**  Since spr now have 10-bit value range, so use x5 instead of x6
**  for the output format to accommodate the 10-bit value.
*   
*000   mcrf   bft,bfa        Move Condition Register Field
       mcrf       ff       x6   19-000
*253   mfsr   rt,sr          Move from segment register
       mfsr       re       x6   31-595
*
***********************************************************************
*       XTB-Form instructions
***********************************************************************
*
*       Instruction Format: XTB-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  OP1  |  ///  |   OP2 |       EO       |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21            30 31
*
*              OP1 = BF | FRT
*              OP2 = I | FRB
*
*   Asm Formats:
*
*       mnemonic  OP1,OP2             ----- RC=0
*       mnemonic. OP1,OP2             ----- RC=1
*
***********************************************************************
*********************************************************
**** /***  Segment Register  *** / ****
*********************************************************
*Opcode 1F
*       mnem  |input     |out |op code value
*0B2   mtsrin     rs,rb       Move to Segment Register Indirect
       mtsrin      rr      x5   31-242
*********************************************************
**** /*** Floating Point Status and Control Reg ***/ ****
*********************************************************
*Opcode 3F
*       mnem  |input     |out |op code value
*086   mtfsfi bf,i           Move to FPSCR Field immediate
       mtfsfi     fq       x5   63-134
       mtfsfi.    fq       x5   63-134-1
*
*********************************************************
**** /*** Floating Point Arithmetic and Compare ***/ ****
*********************************************************
*Opcode 3F
*       mnem  |input     |out |op code value
*00C   frsp   frt,frb        Floating round to Single Precision
*00C   frsp.  frt,frb        Floating round to Single Precision (Rc=1)
       frsp       rr       x5   63-012
       frsp.      rr       x5   63-012-1
************************************************
**** /*** Floating Point Move Register ***/ ****
************************************************
*Opcode 3F
*       mnem  |input     |out |op code value
*108   fabs   frt,frb        Floating absolute value
*108   fabs.  frt,frb        Floating absolute value (Rc=1)
       fabs       rr       x5   63-264
       fabs.      rr       x5   63-264-1
*088   fnabs  frt,frb        Floating negative absolute value
*088   fnabs. frt,frb        Floating negative absolute value (Rc=1)
       fnabs      rr       x5   63-136
       fnabs.     rr       x5   63-136-1
*028   fneg   frt,frb        Floating negate
*028   fneg.  frt,frb        Floating negate (Rc=1)
       fneg       rr       x5   63-040
       fneg.      rr       x5   63-040-1
*048   fmr    frt,frb        Floating move register
*048   fmr.   frt,frb        Floating move register (Rc=1)
       fmr        rr       x5   63-072
       fmr.       rr       x5   63-072-1
* 
***********************************************************************
*       XAT-Form instructions
***********************************************************************
*
*       Instruction Format: XAT-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  RS   |  SPR  | / / / |       EO       |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21            30 31
*
*   Asm Formats:
*
*       mnemonic  SPR,RS              ----- RC=0
*       mnemonic. SPR,RS              ----- RC=1
*
*       NOTE: *** Bits 11-15 (SPR) is the first assembler operand
*
***********************************************************************
*
****************************************************
**** /*** Special Purpose Register Control ***/ ****
****************************************************
*Opcode 1F
*       mnem  |input     |out |op code value
*1D3   mtspr  spr,rs         Move to Special Purpose Register
       mtspr      5r       xi   31-467
*
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*       M-Form  (output format) instructions
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*
***********************************************************************
*       M-Form instructions
***********************************************************************
*
*       Instruction Format: M-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  RS   |  RA   |  OP3  |  MBGN  | MEND  |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21    25 26   30 31
*
*              OP3 = RB | SH
*
*   Asm Formats:
*
*       mnemonic  RA,RS,OP3,MASK      ----- RC=0
*       mnemonic. RA,RS,OP3,MASK      ----- RC=1
*       mnemonic  RA,RS,OP3,MBGN,MEND ----- RC=0
*       mnemonic. RA,RS,OP3,MBGN,MEND ----- RC=1
*
*       NOTE: *** Bits 11-15 (RA) is the first assembler operand
*
***********************************************************************
*
************************************
**** /*** Rotate and Shift ***/ ****
************************************
*       mnem  |input     |out |op code value
*14    rlimi  ra,rs,sh,mb,me    Rotate Left Immediate then Mask Insert
*14    rlimi. ra,rs,sh,mb,me    Rotate Left Immed then Mask Insert (Rc=1)
*14    rlimi  ra,rs,sh,mask     Rotate Left Immediate then Mask Insert
*14    rlimi. ra,rs,sh,mask     Rotate Left Immed then Mask Insert (Rc=1)
       rlwimi      rrty?ztt m    20-000  rlimi
       rlwimi.     rrty?ztt m    20-000-1  rlimi.
*** extended MN for rlwimi
*      inslwi   ra,rs,n,b        insert from left immediate
       inslwi      rr8t     mj   20-000
       inslwi.      rr8t     mj   20-000-1
*      insrwi   ra,rs,n,b        insert from right immediate
       insrwi      rr8t     mk   20-000
       insrwi.      rr8t     mk   20-000-1
**
*15    rlinm  ra,rs,sh,mb,me  Rotate Left Immediate then AND with Mask
*15    rlinm. ra,rs,sh,mb,me  Rotate Left Immed then AND with Mask (Rc=1)
*15    rlinm  ra,rs,sh,mask   Rotate Left Immediate then AND with Mask
*15    rlinm. ra,rs,sh,mask   Rotate Left Immed then AND with Mask (Rc=1)
       rlwinm      rrty?ztt m    21-000  rlinm
       rlwinm.     rrty?ztt m    21-000-1  rlinm.
**
*** extended MN for rlwinm
*15    sli    ra,rs,sh        Shift Left Immediate (rlinm)
*15    sli.   ra,rs,sh        Shift Left Immediate (Rc=1)
       slwi        rr6      ml   21-000  sli
       slwi.       rr6      ml   21-000-1  sli.
*15    sri    ra,rs,sh        Shift Right Immediate (rlinm)
*15    sri.   ra,rs,sh        Shift Right Immediate (Rc=1)
       srwi        rr6      mr   21-000  sri
       srwi.       rr6      mr   21-000-1  sri.
*
*      extlwi   ra,rs,n,b   Extract and left justify immediate
       extlwi      rr8t     ma   21-000
       extlwi.      rr8t     ma   21-000-1
*      extrwi   ra,rs,n,b   Extract and right justify immediate
       extrwi      rr8t     mb   21-000
       extrwi.      rr8t     mb   21-000-1
*      rotlwi   ra,rs,n     Rotate left immediate
       rotlwi      rr6      mc   21-000
       rotlwi.      rr6      mc   21-000-1
*      rotrwi   ra,rs,n     Rotate right immediate
       rotrwi      rr6      md   21-000
       rotrwi.      rr6      md   21-000-1
*      clrlwi   ra,rs,n     clear left immediate
       clrlwi      rr6      me   21-000
       clrlwi.      rr6      me   21-000-1
*      clrrwi   ra,rs,n     clear right immediate
       clrrwi      rr6      mf   21-000
       clrrwi.      rr6      mf   21-000-1
*      clrlslwi  ra,rs,b,n   clear left and shift left immediate
       clrlslwi     rr6t      mg   21-000
       clrlslwi.     rr6t     mg   21-000-1
**
*17    rlnm   ra,rs,rb,mb,me    Rotate Left then AND with Mask
*17    rlnm.  ra,rs,rb,mb,me    Rotate Left then AND with Mask (Rc=1)
*17    rlnm   ra,rs,rb,mask     Rotate Left then AND with Mask
*17    rlnm.  ra,rs,rb,mask     Rotate Left then AND with Mask (Rc=1)
       rlwnm       rrry?ztt m    23-000  rlnm
       rlwnm.      rrry?ztt m    23-000-1  rlnm.
*
**** extended MN for rlwnm
*      rotlw   ra,rs,rb         rotate left
       rotlw       rrr      mh   23-000
       rotlw.       rrr      mh   23-000-1
*
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*       A-Form  (output format) instructions
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*
***********************************************************************
*       A-Form instructions
***********************************************************************
*
*       Instruction Format: A-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  FRT  |  FRA  |  FRB  |  FRC  |   XO   |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21   25 26    30 31
*
*   Asm Formats:
*
*       mnemonic  FRT,FRA,FRC,FRB     ----- RC=0
*       mnemonic. FRT,FRA,FRC,FRB     ----- RC=1
*
***********************************************************************
********************************
*       floating point         *
********************************
*Opcode 3F
*       mnem  |input     |out |op code value
*01D   fma                     frt=(fra*frc)+frb
*01D   fma    frt,fra,frc,frb  Floating Multiply Add
*01D   fma.   frt,fra,frc,frb  Floating Multiply Add (Rc=1)
       fmadd        rrrr     a    63-029  fma
       fmadd.       rrrr     a    63-029-1  fma.
*
*01C   fnms                    frt= -((fra*frc)-frb)
*01C   fnms   frt,fra,frc,frb  Floating negative multiply subtract
*01C   fnms.  frt,fra,frc,frb  Floating negative multiply subtract (Rc=1)
       fnmsub       rrrr     a    63-030  fnms
       fnmsub.      rrrr     a    63-030-1  fnms.
*
*01E   fms                     frt=(fra*frc)-frb
*01E   fms    frt,fra,frc,frb  Floating Multiply Subtract
*01E   fms.   frt,fra,frc,frb  Floating Multiply Subtract (Rc=1)
       fmsub        rrrr     a    63-028  fms
       fmsub.       rrrr     a    63-028-1  fms.
*
*01F   fnma                    frt=-((fra*frc)+frb)
*01F   fnma   frt,fra,frc,frb  Floating negative multiply add
*01F   fnma.  frt,fra,frc,frb  Floating Negative Multiply Add  (Rc=1)
       fnmadd       rrrr     a    63-031  fnma
       fnmadd.      rrrr     a    63-031-1  fnma.
***********************************************************************
*       AB-Form instructions
***********************************************************************
*
*       Instruction Format: AB-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  FRT  |  FRA  |  FRB  | ////  |   XO   |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21   25 26    30 31
*
*   Asm Formats:
*
*       mnemonic  FRT,FRA,FRB         ----- RC=0
*       mnemonic. FRT,FRA,FRB         ----- RC=1
*
***********************************************************************
*********************************************************
**** /*** Floating Point Arithmetic and Compare ***/ ****
*********************************************************
*Opcode 3F
*       mnem  |input     |out |op code value
*015   fa     frt,fra,frb    Floating Add
*015   fa.    frt,fra,frb    Floating Add (Rc=1)
       fadd         rrr      ab   63-021  fa
       fadd.        rrr      ab   63-021-1  fa.
*014   fs     frt,fra,frb    Floating Subtract
*014   fs.    frt,fra,frb    Floating Subtract (Rc=1)
       fsub         rrr      ab   63-020  fs
       fsub.        rrr      ab   63-020-1  fs.
*012   fd     frt,fra,frb    Floating Divide
*012   fd.    frt,fra,frb    Floating Divide (Rc=1)
       fdiv         rrr      ab   63-018  fd
       fdiv.        rrr      ab   63-018-1  fd.
***********************************************************************
*       AC-Form instructions
***********************************************************************
*
*       Instruction Format: AC-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  FRT  |  FRA  | ////  |  FRC  |   XO   |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21   25 26    30 31
*
*   Asm Formats:
*
*       mnemonic  FRT,FRA,FRC         ----- RC=0
*       mnemonic. FRT,FRA,FRC         ----- RC=1
*
***********************************************************************
*********************************************************
**** /*** Floating Point Arithmetic and Compare ***/ ****
*********************************************************
*Opcode 3F
*       mnem  |input     |out |op code value
*019   fm     frt,fra,frc    Floating Multiply
*019   fm.    frt,fra,frc    Floating Multip
       fmul         rrr      ac   63-025  fm
       fmul.        rrr      ac   63-025-1  fm.
***********************************************************************
*       AD-Form instructions
***********************************************************************
*
*       Instruction Format: AD-FORM
*
*       ---------------------------------------------------
*      |OPCODE|  FRT  |  ///  | FRB   |  ///  |XO = 22 |Rc |
*       ---------------------------------------------------
*       0    5 6    10 11   15 16   20 21   25 26    30 31
*
*   Asm Formats:
*
*       mnemonic  FRT,FRB         ----- RC=0
*       mnemonic. FRT,FRB         ----- RC=1
*
***********************************************************************
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*       I-Form  (output format) instructions
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
*
***********************************************************************
*       I-Form instructions
***********************************************************************
*
*       Instruction Format: I-FORM
*
*       --------------------------------------------------
*      |OPCODE|              LI                     |AR|LK|
*       --------------------------------------------------
*       0    5 6                                  29 30 31
*
*   Asm Formats:
*
*       mnemonic  LI
*
***********************************************************************
*       mnem  |input     |out |op code value
****************************
**** /*** Branches ***/ ****
****************************
*12    b      li             Branch  relative                 (AR=0 LK=0)
       b          l        li   18-000
*12    bl     li             Branch and Link relative         (AR=0 LK=1)
       bl         l        li   18-000-1
*12    ba     li             Branch absolute                  (AR=1 LK=0)
       ba         a        la   18-000-0-0-0-0-1
*12    bla    li             Branch and link absolute         (AR=1 LK=1)
       bla        a        la   18-000-1-0-0-0-1
***********************************************************************
***********************************************************************
**             Some special extended mnemonics                      ***
**             No particular instruction format order               ***
***********************************************************************
*       mnem  |input     |out |op code value
*1D3   mtxer  rs             Move to XER -Fixed Pt Exception- (mtspr)
       mtxer      r        x4   31-467-0-0-0-01
*1D3   mtlr   rs             Move to LR -Link Reg- (mtspr)
       mtlr       r        x4   31-467-0-0-0-08
*1D3   mtctr  rs             Move to CTR -Count Reg- (mtspr)
       mtctr      r        x4   31-467-0-0-0-09
*1D3   mtdsisr rs            Move to DSISR register (mtspr)
       mtdsisr    r        x4   31-467-0-0-0-18
*1D3   mtdar  rs             Move to DAR register (mtspr)
       mtdar      r        x4   31-467-0-0-0-19
*1D3   mtsdr1 rs             Move to SDR1 register (mtspr)
       mtsdr1     r        x4   31-467-0-0-0-25
*1D3   mtsrr0 rs             Move to SRR0 register (mtspr)
       mtsrr0     r        x4   31-467-0-0-0-26
*1D3   mtsrr1 rs             Move to SRR1 register (mtspr)
       mtsrr1     r        x4   31-467-0-0-0-27
*1D3   mtdec  rs             Move to decrementer (mtspr)
       mtdec      r        x4   31-467-0-0-0-22
*153   mfxer  rt             Move from XER -Fixed Pt Exception- (mfspr)
       mfxer      r        x4   31-339-0-0-0-01
*153   mflr   rt             Move from LR -Link Reg- (mfspr)
       mflr       r        x4   31-339-0-0-0-08
*153   mfctr  rt             Move from CTR -Count Reg- (mfspr)
       mfctr      r        x4   31-339-0-0-0-09
*153   mfdsisr rt            Move from DSISR register (mfspr)
       mfdsisr    r        x4   31-339-0-0-0-18
*153   mfdar   rt            Move from DAR register (mfspr)
       mfdar      r        x4   31-339-0-0-0-19
*153   mfsdr1  rt            Move from SDR1 register (mfspr)
       mfsdr1     r        x4   31-339-0-0-0-25
*153   mfsrr0  rt            Move from SRR0 register (mfspr)
       mfsrr0     r        x4   31-339-0-0-0-26
*153   mfsrr1  rt            Move from SRR1 register (mfspr)
       mfsrr1     r        x4   31-339-0-0-0-27
*153   mfdec   rt            Move from decrementer (mfspr)
       mfdec      r        xw   31-339
***********************************************************************
*****   END   ****   END   ********************************************
***********************************************************************
