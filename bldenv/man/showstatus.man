# @(#)04	1.12  src/bldenv/man/showstatus.man, bldtools, bos412, GOLDA411a 3/28/94 15:56:46
#
# COMPONENT_NAME: (BLDTOOLS) BAI Build Tools
#
# FUNCTIONS: showstatus
#
# ORIGINS: 27
#
# (C) COPYRIGHT International Business Machines Corp. 1991
# All Rights Reserved
# Licensed Materials - Property of IBM
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
# NAME: showstatus.man
#
# PURPOSE: man page for showstatus command
#
# EXECUTION ENVIRONMENT: Build process environment
#
  showstatus Command
  
  Purpose
  
  Queries the status file and generates various formatted reports based on 
  its contents.  Allows the user to add/modify/delete entries in the status 
  file.  Operates from menu mode or by passing command line options.
  
  Syntax
  
  	showstatus [-a] [-b <bldcycle>] [-f <status_file>] [-g] [-p] [-l]
  		   [-q <string>] [-r] [-s] [-t] [-v]
  
  Description
  
  The showstatus command reads entries from the status file and generates 
  formatted reports based on the data read.  The build cycle for which the 
  reports are generated can be specified in the BLDCYCLE environment variable 
  or on the command line.  If it is not specified by either, the user is 
  prompted for the build cycle upon invocation of the command.  The user may 
  decide not to select any build cycle at all by simply pressing RETURN at the 
  prompt.  In this case, the reports contain information from all entries in 
  the status file regardless of the build cycle to which an entry belongs.  The 
  only exception to this rule is when the user wishes to print out a build 
  process summary report (see below).  In this case a build cycle is required 
  and if the it is not set, the user will be repeatedly prompted until one has 
  been entered. The status file can also be specified by the STATUS_FILE 
  environment variable or on the command line.  If not specified by either, the 
  default is the file, "$BLDTMP/status.db".
  
  There are 9 different reports that can be generated:
  
  	prebuild  - all entries that contain a type field of prebuild
  	bldretain - all entries that contain a type field of bldretain
  	v3bld     - all entries that contain a type field of v3bld
  	subptf    - all entries that contain a type field of subptf
  	cumptf    - all entries that contain a type field of cumptf
  	bldstatus - all entries that contain a type field of bldstatus
  	all	  - all entries in the status file no matter what the value 
		    of the type field
  	search    - all entries in the status file that contain occurrences of 
		    a given string or set of strings
  	summary   - status information on which build processes completed or 
  		    failed for a given build cycle (build cycle required for 
  		    this report)
  
  All of these reports can be generated by using the menu mode or by use of 
  command line options.  In addition, the menu mode offers the option to 
  add/modify/delete entries in the status file.  This option is not available 
  from the command line.  
  
  Report Format
  
  Each of the reports listed above, with the exception of the summary report,
  follow a fairly straightforward format, i.e:
  
  title
  fldname1 fldname2 fldname3 ...
  -------- -------- -------- ...
  data     data     data     ...
    .
    .
    .
  
  For example, the following is output from a typical v3bld report:
  
  V3BLD STATUS: FOR BUILD CYCLE 9142A
  Bcycl Release       Level    Builder    Date         Mode     
  ----- ------------- -------- ---------- ------------ ---------
  9142A bos320        9142320g Conway     Oct 16 09:14 update   
  9142A bos320        9142320h rgjack     Oct 16 16:50 update   
  9142A des320        9142320  rgjack     Oct 16 19:36 update   
  9142A ncs320        9142320  rgjack     Oct 16 19:33 update   
  9142A cmdtext320    9142320  rgjack     Oct 16 20:19 update   
  9142A xlfcmpi320    9142320  Ray        Oct 17 11:16 no_update
  9142A em78320       9142320  rgjack     Oct 16 19:53 update   
  9142A tenplus320    9142320  rgjack     Oct 16 19:37 update   
  
  Build Process Summary Report
  
  The build process summary report has a completely different format.  The
  following is a typical build process summary report:
  
  -----------------------------------------------------------------------------
  Current build cycle:	9142A
  Active build cycles:	9142A (prebuild)
  			9141(package)
  prebuild:
     -cmvcextract:	3 extracts across 2 releases
     -buildmerge:	3 releases merged, 0 not merged
     -cmvcmerge:	2 releases merged, 1 not merged
      (not merged)	pcsim320(9142320) 
     -cmvccommit:	2 releases committed, 1 not committed
      (not committed)	pcsim320(9142320) 
  
  bldabstracts:		success
  
  bldretain:		2 success, 0 failure
  
  v3bld:
      (summary)		2 releases built, 0 pending
  
  postbuild:		success
  
  subptf:
     -getlists:		19 success, 0 failure, 1 not done
      (not done)	xlfcmpi320 
     -normalizexref:	success
     -finddependents:	19 success, 0 failure, 1 not done
      (not done)	xlfcmpi320 
     -package:		failure
  
  postpackage:		not done
  
  cumptf (LPPs):
      (summary)		7 success, 1 failure, 2 not done
      (failure)		bsl 
      (not done)	gem1 370p 
  -----------------------------------------------------------------------------
  
  The current build cycle refers to the build cycle that the user selected
  from the command line or the BLDCYCLE environment variable.  The active
  build cycles refer to all builds that are currently executing.  In the 
  example above, the 9142A build cycle is executing in the prebuild stage 
  while the 9141 build is in the "package" stage.  
  
  Next, a summary of the status of the prebuild process is displayed.  The 
  prebuild process has 4 stages: cmvcextract, buildmerge, cmvcmerge and
  cmvccommit.  Each stage is done on a release by release basis.  Each time
  a stage is executed an entry is added to the status file with a type of
  "prebuild", a subtype corresponding to whichever stage was executed (e.g.
  "cmvcextract"), and the release field containing the value of the release
  on which it was performed (e.g. "bos320").  
  
  The first line of the prebuild summary section is labeled "-cmvcextract" 
  and refers to the cmvcextract stage.  During this stage all files from the 
  release on which the cmvcextract is being performed that have had changes 
  made to them are extracted from the CMVC database.  The number listed on 
  the "-cmvcextract" line gives the number of cmvcextract entries found in 
  the status file for the current build cycle.  It is also possible to perform 
  this step on the same release more than once but under a different build 
  level.  Therefore, the number of unique releases on which this step was 
  performed is also given.  I.e., the line "3 extracts across 2 releases" in 
  the example above indicates that there were 3 cmvcextracts performed, but 
  across 2 distinct releases.  In other words, 2 of the extracts were performed   on the same release but under different build levels.
  
  Next, a summary of the buildmerge stage is listed to the right of the heading 
  "-buildmerge".  During this stage files extracted during the cmvcextract 
  stage are merged into the production source tree on one of the build 
  machines.  Thus, the number given on this line corresponds to the number of 
  cmvcextract entries for which there is also a corresponding buildmerge entry 
  with the same release and build level.  If there is no such corresponding 
  entry then the release was not merged at that build level.  I.e., the line "3 
  releases merged, 0 not merged" in the example above indicates that all 3 
  releases extracted during the cmvcextract stage successfully completed the 
  buildmerge stage as well.  The release and build level for each cmvcextract 
  entry that was not merged is printed out below the "-buildmerge" line (none 
  in the example above).
  
  A summary of the cmvcmerge stage is printed out next on the line labeled 
  "-cmvcmerge".  This stage is identical to the buildmerge stage except that 
  instead of merging the extracted source into the production source on a 
  build machine, the source is merged with the CMVC source on the CMVC 
  server.  Also just as in the case of the buildmerge stage, the number given
  on this line corresponds to the number of cmvcextract entries for which 
  there is also a corresponding cmvcmerge entry with the same release and 
  build level.  If there is no such corresponding entry then the release was 
  not merged at that build level.  I.e., the line "2 releases merged, 1 not 
  merged" in the example above indicates that only two of the 3 releases 
  extracted actually completed the cmvcmerge stage as well.  The release and 
  build level for each cmvcextract entry that was not merged is printed out 
  below the "-cmvcmerge" line ("pcsim320(9142320)" in the example above).
  
  The next line labeled "-cmvccommit" contains a summary of the cmvccommit
  stage.  During this stage, source files that were extracted during the 
  cmvcextract stage are committed to the build, and the state of the track 
  that caused them to change is altered.  The number given on this line gives 
  the number of cmvcextract entries for which there is also a corresponding 
  cmvccommit entry with the same release and build level.  If there is no such 
  corresponding entry then the release was not committed at that build level.  
  I.e., the line "2 releases committed, 1 not committed" in the example above 
  indicates that only 2 of the 3 releases extracted were actually committed.  
  The release and build level for each cmvcextract entry that was not merged 
  is printed out below the "-cmvccommit" line ("pcsim320(9142320)" in the 
  example above).
  
  Next, the status of the "bldabstracts" step is printed out.  This will be 
  either "success", "failure" or "not done".  This value is determined by the 
  status field of the bldabstracts entry in the status file.  If no such entry 
  exists then the value printed out is "not done".
  
  Following this, a summary of the "bldretain" step is printed out.  The 
  bldretain step is performed on a per release basis.  Each bldretain process 
  executed will have a result of "success" or "failure".  A summary of the 
  total number of successes and failures is printed out on the "bldretain" 
  line.  If there were any failures then the releases for which the bldretain 
  process failed are printed out on the next line.
  
  A summary of the v3bld process is printed out next.  This gives the number
  of unique releases for which there is an entry of type "v3bld".  The v3bld
  process is run on a release for one of two reasons.  The first one is that
  a source file changed that was part of the release.  In this case there 
  should be a prebuild/cmvcextract entry for the release that occurred prior 
  to the v3bld entry.  The second reason is that a build environment file 
  changed on which the given release depended.  In this case there should be 
  no prebuild/cmvcextract entry for the release.  If there ever exists a 
  prebuild/cmvcextract entry for which there is no corresponding v3bld entry 
  then that release's build is said to be "pending".  All releases that are 
  pending are printed out below the "(summary)" line (none in the example 
  above).
  
  Next, the status of the "postbuild" step is printed out.  This will be either
  "success", "failure" or "not done".  This value is determined by the status 
  field of the postbuild entry in the status file.  If no such entry exists 
  then the value printed out is "not done".
  
  Following this, a summary of all entries with type "subptf" for the current 
  build cycle is printed out.  The first line of this section is the one 
  labeled "-getlists".  This gives the status of subptf/getlists entries in
  the status file.  A subptf/getlists entry can have a status of "success",  
  "failure", or "not done".  The status is calculated by first determining if 
  for a given v3bld entry there is a corresponding subptf/getlists entry with 
  the same release.  If there is none then the status is "not done".  If one 
  does exist then the status is the value of the status field for the entry, 
  either "success" or "failure".  A list of all releases with a status of 
  "failure" and "not done" are printed out below the "-getlists" line (e.g 
  "xlfcmpi320" has a status of "not done" in the example above).
  
  The next two lines, labeled "-normalizexref" and "-package" refer to entries
  of type "subptf" and subtype "normalizexref" and "package".  There should be
  only 1 of each type for any given build cycle in the status file.  These 
  entries will have a value of either "success" or "failure" in the status 
  field.
  
  The next line, labeled "-finddependents" gives the status of subptf/find-
  dependents entries in the status file.  The status is determined in exactly 
  the same way as with the subptf/getlists entries described above except that 
  a correspondence is sought between v3bld entries and subptf/finddependents 
  entries instead of subptf/getlists entries.  A list of all releases with a 
  status of "failure" and "not done" are printed out below the "finddependents"
  line (e.g "xlfcmpi320" has a status of "not done" in the example above).
  
  Next, the status of the "postpackage" step is printed out.  This will be 
  either "success", "failure" or "not done".  This value is determined by the 
  status field of the postpackage entry in the status file.  If no such entry 
  exists then the value printed out is "not done".
  
  Next, a summary of all entries with type cumptf for the current build cycle 
  is printed out.  The first line of this section is the one labeled 
  "(summary)".  This gives the status of cumptf/lpp entries in the status file. 
  The status is calculated by first determining if for a given subptf entry 
  there is a corresponding cumptf/lpp entry with the same LPP name in the LPP 
  field.  If there is none then the status is "not done".  If one does exist 
  then the status is the value of the status field for the entry, either 
  "success" or "failure".  A list of all releases with a status of "failure" 
  and "not done" are printed out below the "(summary)" line (e.g "bsl" failed 
  while "gem1" and "370p" have a status of "not done" in the example above).
  
  Menu Mode
  
  The menu mode is accessed by invoking showstatus without any of the report 
  generation flags listed below in the Flags section.  When invoking the 
  showstatus command in menu mode, the following menu is displayed:
  
  SHOWSTATUS
  
  	 1) summary
  	 2) prebuild
  	 3) bldretain
  	 4) v3bld
  	 5) subptf
  	 6) cumptf
  	 7) bldstatus
  	 8) all
  	 9) search
  	10) duplicate/change/purge
  	11) change build cycle (9999)
  	12) change status file (/selfix/HISTORY/STATUS_FILE)
  	13) exit
  
  choice: 
  
  At this point the user may select any of the options by entering the 
  appropriate number or option name.  The "exit" option may also be selected by 
  typing "x","quit", or "q".  The following table describes the purpose of each 
  selection:
  
  1) summary		      -	prints out build process summary report
  2) prebuild		      -	prints out report on prebuild type entries
  3) bldretain		      -	prints out report on bldretain type entries
  4) v3bld		      -	prints out report on v3bld type entries
  5) subptf		      -	prints out report on subptf type entries
  6) cumptf		      -	prints out report on cumptf type entries
  7) bldstatus		      -	prints out report on bldstatus type entries
  8) all		      -	prints out report on all entries
  9) search		      -	prints out search report
  10) duplicate/change/purge  -	allows the user to duplicate/change/purge lines
  11) change build cycle      -	allows user to change the current build cycle;
				the current value is displayed in paraenthesis
  12) change status file      -	allows user to change the current status file;
				the current value is displayed in paraenthesis
  13) exit		      -	exits from showstatus command
  
  All these options except for number 10 are also selectable from the command 
  line.
  
  When the user selects option number 9, "search", a prompt is displayed
  requesting a search string.  The search string entered should be of the 
  following form:
  
  	"[string 1] [string 2] ... [string n]"
  
  In other words 0 or more individual strings, each separated by a space 
  character (the quotes are present only for readability, the user does not 
  need to enter them).  For example:
  
  	"Cher prebuild success"
  
  The search command then searches the status file finding entries that contain
  at least one occurrence of each of the given strings.  In the example above,
  the status file would be searched looking for entries containing occurrences 
  of "Cher" AND "prebuild" AND "success".  For example the following would be a 
  match:
  
    prebuild|9142A|bos320|9142320h|Cherilyn|Oct 16 16:39|||cmvcextract|success
  
  The following would NOT constitute a match:
  
    prebuild|9142A|bos320|9142320h|rgjack|Oct 16 16:39|||cmvcextract|success
  
  since the string "Cher" does not occur anywhere in the entry.  If a null 
  string is entered for the search string, then all entries are considered 
  matches.  A formatted report is produced that contains all matched entries.
  
  When option number 10, "duplicate/change/purge", is selected, just as with 
  the "search" option, a prompt is displayed requesting a search string of the 
  same form as described above.  Once the user has entered the search string, 
  the status file is searched for all entries that match the search string (or 
  strings) that was entered.  When one is found the entry is printed out on one 
  line followed by the following prompt on the next line:
  
  	d)uplicate c)hange p)urge r)epeat q)uit:
  
  At this point the user is required to enter one of the 5 selections "d", "c",
  "p", "r", or "q".  If one of the "d" or "c" options is selected then the 
  builder name environment variable ($BUILDER) must be set.  Therefore if it 
  was not set when showstatus was executed then the user is prompted for it at 
  this point.  Next, the user is prompted to change each of the entry's fields.  
  The prompt displayed for each field is of the following form:
  
  	field_name = current_value: 
  
  For example:
  
  	Type = prebuild: 
  
  The user may then type in a new value for the field or accept the current 
  value by simply pressing return.  The field can be set to a null value by 
  entering two double quotes: "".  
  
  There is, however, one exception to the rule that the current value of the 
  field is the default if nothing is entered.  This is on the "Builder" field.  
  For this field the user is shown a prompt of the following form:
  
  	Builder = cherilyn (default = "*$BUILDER" = "*rgjack")
  
  In other words the current value of the field is displayed ("cherilyn" in the 
  example above) but the default value if the user just presses return is 
  always the value of the $BUILDER environment variable with a '*' prepended to   it.  I.e. "*rgjack" in the example above.  If another value is entered then 
  that value also will have the '*' prepended to it.  This is used to indicate 
  that the entry was modified by hand.
  
  Once all the fields have been modified or the default value accepted, the new 
  line is displayed with any and all changes.  The user is then prompted to 
  accept or reject the changes with the following prompt:
  
  	a)ccept r)eject:
  
  The changes are accepted by typing "a" or rejected by typing "r".
  
  NOTE: when a modification is made to the status file the old line is deleted
        from wherever it is currently located in the status file, and the new 
        line is appended to the end of the status file.
  
  The "d" option functions in the same way as the "c" option accept that a 
  duplicate entry is created from the current entry and then that duplicate 
  entry is the one that gets modified.  Then when the modification is accepted, 
  the new entry is appended to the end of the status file without deleting the 
  original entry.
  
  An entry can be deleted from the status file by selecting the "p" option at 
  the 
  
  	d)uplicate c)hange p)urge r)epeat q)uit:
  
  prompt.
  
  Also, by selecting the "r" option at the above prompt, the changes from the
  previous modify are all automatically applied to the current line.
  
  By selecting the "q" option the user is returned to the main menu.
  
  The exit values for the showstatus command are:
  
  0	if it completes with no errors 
  1	if there are errors.
  
  Flags
  
  	-a		   print out report on all entries 
  
  	-b <bldcycle>      selects build cycle for which reports will be 
  			   generated
  
  	-f <status_file>   selects status file from which reports will be 
  			   generated
  
  	-g 		   print out report using cumptf type entries 

  	-l 		   print out report using bldstatus type entries 
  
  	-p 		   print out report using prebuild type entries 
  
  	-q <string> 	   searches status file for entries containing the 
			   given string; string may be quoted so that it 
			   contains several separate strings (e.g. "subptf 
			   rgjack success"); in these cases a match occurs only 			   if an entry contains an occurrence of each of the
  			   separate strings
  
  	-s 		   print out build process summary report 
  
  	-t 		   print out report using bldptf type entries 
  
  	-v 		   print out report using v3bld type entries
  
  Examples
  
  	1.  Two ways to generate a report of all v3bld entries for build 
  	    cycle 9138:
  
  		a) showstatus -v -b 9138
  		b) BLDCYCLE=9138; export BLDCYCLE; showstatus -v
  
  	2.  Bring up menu mode:
  
  		a) showstatus -f ./test/STATUS_FILE
  		   (selects status file ./test/STATUS_FILE)
  		b) showstatus -b 9142
  		   (selects build cycle 9142)
  		c) showstatus
  		   (takes default build cycle and status file)
  
  	3.  Generate report of all entries contain strings "prebuild", and 
  	    "success":
  
  		showstatus -q "prebuild success"
  
  	4.  Generate summary report and redirect output to file:
  
  		showstatus -s > sum.rpt
  
  Related Information
  
    The commands:
  	QueryStatus	- queries status file
  	SetStatus	- appends entries to status file
  	DeleteStatus	- deletes entries from status file
  	CheckStatus	- checks status file for a match
  
